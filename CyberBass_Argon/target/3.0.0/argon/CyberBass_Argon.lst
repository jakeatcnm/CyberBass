
c:/Users/jake/Documents/IoT/CyberBass/CyberBass_Argon/target/3.0.0/argon/CyberBass_Argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d75e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e13c  000d75e4  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000023c  2003e5b8  2003e5b8  0002e5b8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7a5c  000d7a5c  00027a5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7a84  000d7a84  00027a84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ab77b  00000000  00000000  00027a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000188b8  00000000  00000000  001d3203  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00034b58  00000000  00000000  001ebabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002aa8  00000000  00000000  00220613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008d28  00000000  00000000  002230bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d477  00000000  00000000  0022bde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040ccf  00000000  00000000  0026925a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128f84  00000000  00000000  002a9f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007768  00000000  00000000  003d2eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fead 	bl	d6d8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 feb5 	bl	d6da8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e13c 	.word	0x2003e13c
   d4048:	000d75e4 	.word	0x000d75e4
   d404c:	2003e5b4 	.word	0x2003e5b4
   d4050:	2003e5b8 	.word	0x2003e5b8
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fe5b 	bl	d5d18 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d75b8 	.word	0x000d75b8
   d407c:	000d75e0 	.word	0x000d75e0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b836 	b.w	d40f0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8bf 	bl	d4208 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 be05 	b.w	d5c9c <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 bb2f 	b.w	d56f4 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 bb35 	b.w	d5704 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fa92 	bl	d55cc <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d531d 	.word	0x000d531d

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c0:	4770      	bx	lr

000d40c2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c6:	6800      	ldr	r0, [r0, #0]
   d40c8:	b108      	cbz	r0, d40ce <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ca:	f001 fb1b 	bl	d5704 <free>
class SystemClass {
   d40ce:	4620      	mov	r0, r4
   d40d0:	bd10      	pop	{r4, pc}

000d40d2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40d2:	b40e      	push	{r1, r2, r3}
   d40d4:	b503      	push	{r0, r1, lr}
   d40d6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40d8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40da:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40de:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40e0:	f001 fd39 	bl	d5b56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40e4:	b002      	add	sp, #8
   d40e6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ea:	b003      	add	sp, #12
   d40ec:	4770      	bx	lr
	...

000d40f0 <setup>:
Adafruit_SSD1306 display(OLED_RESET);

Adafruit_BME280 bme;

// setup() runs once, when the device is first turned on.
void setup() {
   d40f0:	b570      	push	{r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d40f2:	f001 ff17 	bl	d5f24 <_Z16_fetch_usbserialv>
   d40f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fa:	f001 ff07 	bl	d5f0c <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d40fe:	f001 ff97 	bl	d6030 <_Z22__fetch_global_Serial1v>
   d4102:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4106:	f001 ff8f 	bl	d6028 <_ZN11USARTSerial5beginEm>

  pinMode(GREENPIN, OUTPUT);
   d410a:	2101      	movs	r1, #1
   d410c:	200b      	movs	r0, #11
   d410e:	f002 f963 	bl	d63d8 <pinMode>
  pinMode(REDPIN, OUTPUT);
   d4112:	2101      	movs	r1, #1
   d4114:	200c      	movs	r0, #12
   d4116:	f002 f95f 	bl	d63d8 <pinMode>
  pinMode (ENCODERSWITCH, INPUT);
   d411a:	2100      	movs	r1, #0
   d411c:	200d      	movs	r0, #13
   d411e:	f002 f95b 	bl	d63d8 <pinMode>
  pinMode (PUMPBUTTON, INPUT_PULLDOWN);
   d4122:	2103      	movs	r1, #3
   d4124:	200e      	movs	r0, #14
   d4126:	f002 f957 	bl	d63d8 <pinMode>
  pinMode(PUMPOUT, OUTPUT);

  for (i = 0; i <= 127; i++)
   d412a:	4c30      	ldr	r4, [pc, #192]	; (d41ec <setup+0xfc>)
  {
    Wire.beginTransmission (i);
    //Serial.printf("Wire transmission end returned: %i \n",Wire.endTransmission());
    if (Wire.endTransmission () == 0)
      {
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d412c:	4e30      	ldr	r6, [pc, #192]	; (d41f0 <setup+0x100>)
      count++;
   d412e:	4d31      	ldr	r5, [pc, #196]	; (d41f4 <setup+0x104>)
  pinMode(PUMPOUT, OUTPUT);
   d4130:	2101      	movs	r1, #1
   d4132:	2011      	movs	r0, #17
   d4134:	f002 f950 	bl	d63d8 <pinMode>
  for (i = 0; i <= 127; i++)
   d4138:	2300      	movs	r3, #0
   d413a:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission (i);
   d413c:	f002 f9c4 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4140:	6821      	ldr	r1, [r4, #0]
   d4142:	f002 f813 	bl	d616c <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission () == 0)
   d4146:	f002 f9bf 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d414a:	f002 f816 	bl	d617a <_ZN7TwoWire15endTransmissionEv>
   d414e:	b960      	cbnz	r0, d416a <setup+0x7a>
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d4150:	f001 fee8 	bl	d5f24 <_Z16_fetch_usbserialv>
   d4154:	6823      	ldr	r3, [r4, #0]
   d4156:	4631      	mov	r1, r6
   d4158:	461a      	mov	r2, r3
   d415a:	f7ff ffba 	bl	d40d2 <_ZN5Print6printfEPKcz>
      count++;
   d415e:	682b      	ldr	r3, [r5, #0]
      delay (1);
   d4160:	2001      	movs	r0, #1
      count++;
   d4162:	3301      	adds	r3, #1
   d4164:	602b      	str	r3, [r5, #0]
      delay (1);
   d4166:	f001 fd5f 	bl	d5c28 <delay>
  for (i = 0; i <= 127; i++)
   d416a:	6823      	ldr	r3, [r4, #0]
   d416c:	3301      	adds	r3, #1
   d416e:	2b7f      	cmp	r3, #127	; 0x7f
   d4170:	6023      	str	r3, [r4, #0]
   d4172:	dde3      	ble.n	d413c <setup+0x4c>
      } 
  }
  Serial.printf("Done: Found %i device(s). \n",count);
   d4174:	f001 fed6 	bl	d5f24 <_Z16_fetch_usbserialv>
   d4178:	4b1e      	ldr	r3, [pc, #120]	; (d41f4 <setup+0x104>)
   d417a:	491f      	ldr	r1, [pc, #124]	; (d41f8 <setup+0x108>)
   d417c:	681a      	ldr	r2, [r3, #0]
   d417e:	f7ff ffa8 	bl	d40d2 <_ZN5Print6printfEPKcz>

  //setup Display
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
   d4182:	223c      	movs	r2, #60	; 0x3c
   d4184:	2102      	movs	r1, #2
   d4186:	481d      	ldr	r0, [pc, #116]	; (d41fc <setup+0x10c>)
   d4188:	f000 fde8 	bl	d4d5c <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d418c:	481b      	ldr	r0, [pc, #108]	; (d41fc <setup+0x10c>)
   d418e:	f000 fd75 	bl	d4c7c <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
   d4192:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4196:	f001 fd47 	bl	d5c28 <delay>

  // Clear the buffer
  display.clearDisplay();
   d419a:	4818      	ldr	r0, [pc, #96]	; (d41fc <setup+0x10c>)
   d419c:	f000 fd12 	bl	d4bc4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(0);
   d41a0:	4816      	ldr	r0, [pc, #88]	; (d41fc <setup+0x10c>)
   d41a2:	2100      	movs	r1, #0
   d41a4:	f001 f865 	bl	d5272 <_ZN12Adafruit_GFX11setRotationEh>

  display.setTextSize(1);             // Normal 1:1 pixel scale
   d41a8:	4814      	ldr	r0, [pc, #80]	; (d41fc <setup+0x10c>)
   d41aa:	2101      	movs	r1, #1
   d41ac:	f001 f857 	bl	d525e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   d41b0:	4812      	ldr	r0, [pc, #72]	; (d41fc <setup+0x10c>)
   d41b2:	2101      	movs	r1, #1
   d41b4:	f001 f858 	bl	d5268 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d41b8:	2200      	movs	r2, #0
   d41ba:	4611      	mov	r1, r2
   d41bc:	480f      	ldr	r0, [pc, #60]	; (d41fc <setup+0x10c>)
   d41be:	f001 f84b 	bl	d5258 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("CYBERBASS BOOTING UP!");
   d41c2:	490f      	ldr	r1, [pc, #60]	; (d4200 <setup+0x110>)
   d41c4:	480d      	ldr	r0, [pc, #52]	; (d41fc <setup+0x10c>)
   d41c6:	f001 fc9e 	bl	d5b06 <_ZN5Print7printlnEPKc>
  display.display();
   d41ca:	480c      	ldr	r0, [pc, #48]	; (d41fc <setup+0x10c>)
   d41cc:	f000 fd56 	bl	d4c7c <_ZN16Adafruit_SSD13067displayEv>
  // Draw a single pixel in white

  delay(2000);
   d41d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41d4:	f001 fd28 	bl	d5c28 <delay>
  Time.zone(-6);
   d41d8:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d41dc:	f001 fcfa 	bl	d5bd4 <_ZN9TimeClass4zoneEf>

  //Setup BME
  bme.begin(0x76);


}
   d41e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bme.begin(0x76);
   d41e4:	4807      	ldr	r0, [pc, #28]	; (d4204 <setup+0x114>)
   d41e6:	2176      	movs	r1, #118	; 0x76
   d41e8:	f000 bb0f 	b.w	d480a <_ZN15Adafruit_BME2805beginEh>
   d41ec:	2003e634 	.word	0x2003e634
   d41f0:	000d6e24 	.word	0x000d6e24
   d41f4:	2003e60c 	.word	0x2003e60c
   d41f8:	000d6e43 	.word	0x000d6e43
   d41fc:	2003e610 	.word	0x2003e610
   d4200:	000d6e5f 	.word	0x000d6e5f
   d4204:	2003e5c8 	.word	0x2003e5c8

000d4208 <loop>:
  operate pump.

*/

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4208:	b508      	push	{r3, lr}
  

  //enable blood spewing
  bool bloody = digitalRead(PUMPBUTTON);
   d420a:	200e      	movs	r0, #14
   d420c:	f002 f90e 	bl	d642c <digitalRead>
  if(bloody){
   d4210:	4601      	mov	r1, r0
   d4212:	b128      	cbz	r0, d4220 <loop+0x18>
  else{
    digitalWrite(PUMPOUT, LOW);
  }

  
}
   d4214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(PUMPOUT, HIGH);
   d4218:	2101      	movs	r1, #1
   d421a:	2011      	movs	r0, #17
   d421c:	f002 b8ed 	b.w	d63fa <digitalWrite>
}
   d4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(PUMPOUT, LOW);
   d4224:	2011      	movs	r0, #17
   d4226:	f002 b8e8 	b.w	d63fa <digitalWrite>

000d422a <_ZN16Adafruit_SSD1306D0Ev>:
   d422a:	b510      	push	{r4, lr}
   d422c:	2124      	movs	r1, #36	; 0x24
   d422e:	4604      	mov	r4, r0
   d4230:	f002 f977 	bl	d6522 <_ZdlPvj>
   d4234:	4620      	mov	r0, r4
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_GLOBAL__sub_I_SystemMode>:
}
   d4238:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d423a:	4c0f      	ldr	r4, [pc, #60]	; (d4278 <_GLOBAL__sub_I_SystemMode+0x40>)
   d423c:	2300      	movs	r3, #0
   d423e:	6023      	str	r3, [r4, #0]
   d4240:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4242:	71a3      	strb	r3, [r4, #6]
   d4244:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4248:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d424a:	2002      	movs	r0, #2
   d424c:	f001 f9c6 	bl	d55dc <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4250:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   d4252:	4c0a      	ldr	r4, [pc, #40]	; (d427c <_GLOBAL__sub_I_SystemMode+0x44>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4254:	4a0a      	ldr	r2, [pc, #40]	; (d4280 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4256:	490b      	ldr	r1, [pc, #44]	; (d4284 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d4258:	f002 f95e 	bl	d6518 <__aeabi_atexit>
Adafruit_SSD1306 display(OLED_RESET);
   d425c:	2104      	movs	r1, #4
   d425e:	4620      	mov	r0, r4
   d4260:	f000 fc9a 	bl	d4b98 <_ZN16Adafruit_SSD1306C1Ea>
   d4264:	4620      	mov	r0, r4
   d4266:	4a06      	ldr	r2, [pc, #24]	; (d4280 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4268:	4907      	ldr	r1, [pc, #28]	; (d4288 <_GLOBAL__sub_I_SystemMode+0x50>)
   d426a:	f002 f955 	bl	d6518 <__aeabi_atexit>
}
   d426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_BME280 bme;
   d4272:	4806      	ldr	r0, [pc, #24]	; (d428c <_GLOBAL__sub_I_SystemMode+0x54>)
   d4274:	f000 b83e 	b.w	d42f4 <_ZN15Adafruit_BME280C1Ev>
   d4278:	2003e5bc 	.word	0x2003e5bc
   d427c:	2003e610 	.word	0x2003e610
   d4280:	2003e5b8 	.word	0x2003e5b8
   d4284:	000d40c3 	.word	0x000d40c3
   d4288:	000d40c1 	.word	0x000d40c1
   d428c:	2003e5c8 	.word	0x2003e5c8

000d4290 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4290:	4770      	bx	lr

000d4292 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4292:	b510      	push	{r4, lr}
  }
   d4294:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4296:	4604      	mov	r4, r0
  }
   d4298:	f002 f943 	bl	d6522 <_ZdlPvj>
   d429c:	4620      	mov	r0, r4
   d429e:	bd10      	pop	{r4, pc}

000d42a0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42a2:	4604      	mov	r4, r0
   d42a4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42a6:	7922      	ldrb	r2, [r4, #4]
   d42a8:	68a3      	ldr	r3, [r4, #8]
   d42aa:	b132      	cbz	r2, d42ba <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42ac:	b9a3      	cbnz	r3, d42d8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42ae:	490b      	ldr	r1, [pc, #44]	; (d42dc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42b0:	b002      	add	sp, #8
   d42b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42b6:	f001 bc13 	b.w	d5ae0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42ba:	4a09      	ldr	r2, [pc, #36]	; (d42e0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42bc:	7b26      	ldrb	r6, [r4, #12]
   d42be:	4d09      	ldr	r5, [pc, #36]	; (d42e4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42c0:	4909      	ldr	r1, [pc, #36]	; (d42e8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42c2:	7b64      	ldrb	r4, [r4, #13]
   d42c4:	2e01      	cmp	r6, #1
   d42c6:	bf18      	it	ne
   d42c8:	4629      	movne	r1, r5
   d42ca:	e9cd 1400 	strd	r1, r4, [sp]
   d42ce:	4907      	ldr	r1, [pc, #28]	; (d42ec <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42d0:	f7ff feff 	bl	d40d2 <_ZN5Print6printfEPKcz>
  }
   d42d4:	b002      	add	sp, #8
   d42d6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42d8:	4a05      	ldr	r2, [pc, #20]	; (d42f0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d42da:	e7ef      	b.n	d42bc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d42dc:	000d6e86 	.word	0x000d6e86
   d42e0:	000d6e42 	.word	0x000d6e42
   d42e4:	000d6e82 	.word	0x000d6e82
   d42e8:	000d6e7e 	.word	0x000d6e7e
   d42ec:	000d6e9c 	.word	0x000d6e9c
   d42f0:	000d6e75 	.word	0x000d6e75

000d42f4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d42f4:	f04f 33ff 	mov.w	r3, #4294967295
   d42f8:	6103      	str	r3, [r0, #16]
{ }
   d42fa:	4770      	bx	lr

000d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d42fc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d42fe:	4c0b      	ldr	r4, [pc, #44]	; (d432c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4300:	7821      	ldrb	r1, [r4, #0]
   d4302:	f3bf 8f5b 	dmb	ish
   d4306:	f011 0101 	ands.w	r1, r1, #1
   d430a:	d10b      	bne.n	d4324 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d430c:	4620      	mov	r0, r4
   d430e:	9101      	str	r1, [sp, #4]
   d4310:	f7ff fece 	bl	d40b0 <__cxa_guard_acquire>
   d4314:	9901      	ldr	r1, [sp, #4]
   d4316:	b128      	cbz	r0, d4324 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4318:	4805      	ldr	r0, [pc, #20]	; (d4330 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d431a:	f001 fa4f 	bl	d57bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d431e:	4620      	mov	r0, r4
   d4320:	f7ff fecb 	bl	d40ba <__cxa_guard_release>
        return instance;
    }
   d4324:	4802      	ldr	r0, [pc, #8]	; (d4330 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4326:	b002      	add	sp, #8
   d4328:	bd10      	pop	{r4, pc}
   d432a:	bf00      	nop
   d432c:	2003e638 	.word	0x2003e638
   d4330:	2003e63c 	.word	0x2003e63c

000d4334 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4338:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d433c:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d433e:	4605      	mov	r5, r0
   d4340:	460f      	mov	r7, r1
    if (_sck == -1)
   d4342:	d106      	bne.n	d4352 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4344:	f7ff ffda 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4348:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d434e:	f001 bb55 	b.w	d59fc <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4352:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4354:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4356:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d435a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d435e:	2100      	movs	r1, #0
   d4360:	b280      	uxth	r0, r0
   d4362:	f002 f84a 	bl	d63fa <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4366:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d436a:	fa08 f106 	lsl.w	r1, r8, r6
   d436e:	4039      	ands	r1, r7
   d4370:	b280      	uxth	r0, r0
   d4372:	f002 f842 	bl	d63fa <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4376:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d437a:	2101      	movs	r1, #1
   d437c:	b280      	uxth	r0, r0
   d437e:	f002 f83c 	bl	d63fa <digitalWrite>
        if (digitalRead(_miso))
   d4382:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4386:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4388:	b280      	uxth	r0, r0
        reply <<= 1;
   d438a:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d438c:	f002 f84e 	bl	d642c <digitalRead>
   d4390:	b108      	cbz	r0, d4396 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4392:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4396:	3e01      	subs	r6, #1
   d4398:	d2df      	bcs.n	d435a <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d439a:	4620      	mov	r0, r4
   d439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d43a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d43a0:	b508      	push	{r3, lr}
        instance().endTransaction();
   d43a2:	f7ff ffab 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d43a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d43aa:	f001 ba48 	b.w	d583e <_ZN8SPIClass14endTransactionEv>

000d43ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d43ae:	b507      	push	{r0, r1, r2, lr}
   d43b0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d43b2:	f7ff ffa3 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d43b6:	9901      	ldr	r1, [sp, #4]
    }
   d43b8:	b003      	add	sp, #12
   d43ba:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d43be:	f001 ba57 	b.w	d5870 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d43c4 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d43c4:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d43c6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d43ca:	3301      	adds	r3, #1
{
   d43cc:	b085      	sub	sp, #20
   d43ce:	4604      	mov	r4, r0
   d43d0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d43d2:	d11f      	bne.n	d4414 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d43d4:	7901      	ldrb	r1, [r0, #4]
   d43d6:	6800      	ldr	r0, [r0, #0]
   d43d8:	f001 fec4 	bl	d6164 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d43dc:	6820      	ldr	r0, [r4, #0]
   d43de:	6803      	ldr	r3, [r0, #0]
   d43e0:	4629      	mov	r1, r5
   d43e2:	689b      	ldr	r3, [r3, #8]
   d43e4:	4798      	blx	r3
        _wire -> endTransmission();
   d43e6:	6820      	ldr	r0, [r4, #0]
   d43e8:	f001 fec7 	bl	d617a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d43ec:	7921      	ldrb	r1, [r4, #4]
   d43ee:	6820      	ldr	r0, [r4, #0]
   d43f0:	2202      	movs	r2, #2
   d43f2:	f001 feb4 	bl	d615e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d43f6:	6820      	ldr	r0, [r4, #0]
   d43f8:	6803      	ldr	r3, [r0, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	4798      	blx	r3
   d43fe:	4605      	mov	r5, r0
   d4400:	6820      	ldr	r0, [r4, #0]
   d4402:	6803      	ldr	r3, [r0, #0]
   d4404:	695b      	ldr	r3, [r3, #20]
   d4406:	4798      	blx	r3
   d4408:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d440c:	b285      	uxth	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d440e:	4628      	mov	r0, r5
   d4410:	b005      	add	sp, #20
   d4412:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4414:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4418:	3301      	adds	r3, #1
   d441a:	d10c      	bne.n	d4436 <_ZN15Adafruit_BME2806read16Eh+0x72>
      dataMode_{dataMode}
   d441c:	4b18      	ldr	r3, [pc, #96]	; (d4480 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d441e:	9300      	str	r3, [sp, #0]
   d4420:	2300      	movs	r3, #0
   d4422:	f88d 3004 	strb.w	r3, [sp, #4]
   d4426:	4b17      	ldr	r3, [pc, #92]	; (d4484 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4428:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d442a:	4668      	mov	r0, sp
   d442c:	2301      	movs	r3, #1
   d442e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4432:	f7ff ffbc 	bl	d43ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4436:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d443a:	2100      	movs	r1, #0
   d443c:	b280      	uxth	r0, r0
   d443e:	f001 ffdc 	bl	d63fa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4442:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4446:	4620      	mov	r0, r4
   d4448:	f7ff ff74 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d444c:	2100      	movs	r1, #0
   d444e:	4620      	mov	r0, r4
   d4450:	f7ff ff70 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
   d4454:	2100      	movs	r1, #0
   d4456:	4605      	mov	r5, r0
   d4458:	4620      	mov	r0, r4
   d445a:	f7ff ff6b 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
   d445e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4462:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4464:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4468:	2101      	movs	r1, #1
   d446a:	b280      	uxth	r0, r0
   d446c:	f001 ffc5 	bl	d63fa <digitalWrite>
        if (_sck == -1)
   d4470:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4474:	3301      	adds	r3, #1
   d4476:	d1ca      	bne.n	d440e <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d4478:	f7ff ff92 	bl	d43a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d447c:	e7c7      	b.n	d440e <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d447e:	bf00      	nop
   d4480:	000d6ec4 	.word	0x000d6ec4
   d4484:	0007a120 	.word	0x0007a120

000d4488 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4488:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d448a:	f7ff ff9b 	bl	d43c4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d448e:	ba40      	rev16	r0, r0
}
   d4490:	b280      	uxth	r0, r0
   d4492:	bd08      	pop	{r3, pc}

000d4494 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d4494:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4496:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d449a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d449c:	b085      	sub	sp, #20
   d449e:	4604      	mov	r4, r0
   d44a0:	460d      	mov	r5, r1
    if (_cs == -1) {
   d44a2:	d118      	bne.n	d44d6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d44a4:	7901      	ldrb	r1, [r0, #4]
   d44a6:	6800      	ldr	r0, [r0, #0]
   d44a8:	f001 fe5c 	bl	d6164 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44ac:	6820      	ldr	r0, [r4, #0]
   d44ae:	6803      	ldr	r3, [r0, #0]
   d44b0:	4629      	mov	r1, r5
   d44b2:	689b      	ldr	r3, [r3, #8]
   d44b4:	4798      	blx	r3
        _wire -> endTransmission();
   d44b6:	6820      	ldr	r0, [r4, #0]
   d44b8:	f001 fe5f 	bl	d617a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d44bc:	7921      	ldrb	r1, [r4, #4]
   d44be:	6820      	ldr	r0, [r4, #0]
   d44c0:	2201      	movs	r2, #1
   d44c2:	f001 fe4c 	bl	d615e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d44c6:	6820      	ldr	r0, [r4, #0]
   d44c8:	6803      	ldr	r3, [r0, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	4798      	blx	r3
   d44ce:	b2c5      	uxtb	r5, r0
}
   d44d0:	4628      	mov	r0, r5
   d44d2:	b005      	add	sp, #20
   d44d4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d44d6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44da:	3301      	adds	r3, #1
   d44dc:	d10c      	bne.n	d44f8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d44de:	4b15      	ldr	r3, [pc, #84]	; (d4534 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d44e0:	9300      	str	r3, [sp, #0]
   d44e2:	2300      	movs	r3, #0
   d44e4:	f88d 3004 	strb.w	r3, [sp, #4]
   d44e8:	4b13      	ldr	r3, [pc, #76]	; (d4538 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d44ea:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d44ec:	4668      	mov	r0, sp
   d44ee:	2301      	movs	r3, #1
   d44f0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d44f4:	f7ff ff5b 	bl	d43ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d44f8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d44fc:	2100      	movs	r1, #0
   d44fe:	b280      	uxth	r0, r0
   d4500:	f001 ff7b 	bl	d63fa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4504:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4508:	4620      	mov	r0, r4
   d450a:	f7ff ff13 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d450e:	2100      	movs	r1, #0
   d4510:	4620      	mov	r0, r4
   d4512:	f7ff ff0f 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
   d4516:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4518:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d451c:	2101      	movs	r1, #1
   d451e:	b280      	uxth	r0, r0
   d4520:	f001 ff6b 	bl	d63fa <digitalWrite>
        if (_sck == -1)
   d4524:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4528:	3301      	adds	r3, #1
   d452a:	d1d1      	bne.n	d44d0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d452c:	f7ff ff38 	bl	d43a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4530:	e7ce      	b.n	d44d0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d4532:	bf00      	nop
   d4534:	000d6ec4 	.word	0x000d6ec4
   d4538:	0007a120 	.word	0x0007a120

000d453c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d453c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d453e:	21f3      	movs	r1, #243	; 0xf3
   d4540:	f7ff ffa8 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4544:	f000 0001 	and.w	r0, r0, #1
   d4548:	bd08      	pop	{r3, pc}

000d454a <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d454a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d454c:	2188      	movs	r1, #136	; 0x88
{
   d454e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4550:	f7ff ff9a 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d4554:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4556:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d4558:	4620      	mov	r0, r4
   d455a:	f7ff ff95 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d455e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4560:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d4562:	4620      	mov	r0, r4
   d4564:	f7ff ff90 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4568:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d456a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d456c:	4620      	mov	r0, r4
   d456e:	f7ff ff8b 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d4572:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4574:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d4576:	4620      	mov	r0, r4
   d4578:	f7ff ff86 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d457c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d457e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d4580:	4620      	mov	r0, r4
   d4582:	f7ff ff81 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d4586:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4588:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d458a:	4620      	mov	r0, r4
   d458c:	f7ff ff7c 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d4590:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4592:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d4594:	4620      	mov	r0, r4
   d4596:	f7ff ff77 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d459a:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d459c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d459e:	4620      	mov	r0, r4
   d45a0:	f7ff ff72 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d45a4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d45a6:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d45a8:	4620      	mov	r0, r4
   d45aa:	f7ff ff6d 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d45ae:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d45b0:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d45b2:	4620      	mov	r0, r4
   d45b4:	f7ff ff68 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
   d45b8:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d45ba:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d45bc:	4620      	mov	r0, r4
   d45be:	f7ff ff63 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d45c2:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d45c4:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d45c6:	4620      	mov	r0, r4
   d45c8:	f7ff ff64 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d45cc:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d45ce:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d45d2:	4620      	mov	r0, r4
   d45d4:	f7ff ff58 	bl	d4488 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d45d8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d45da:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff ff59 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d45e2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d45e4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d45e8:	4620      	mov	r0, r4
   d45ea:	f7ff ff53 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
   d45ee:	21e5      	movs	r1, #229	; 0xe5
   d45f0:	4605      	mov	r5, r0
   d45f2:	4620      	mov	r0, r4
   d45f4:	f7ff ff4e 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
   d45f8:	f000 030f 	and.w	r3, r0, #15
   d45fc:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d4600:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4602:	21e6      	movs	r1, #230	; 0xe6
   d4604:	4620      	mov	r0, r4
   d4606:	f7ff ff45 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
   d460a:	21e5      	movs	r1, #229	; 0xe5
   d460c:	4605      	mov	r5, r0
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff ff40 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
   d4614:	1103      	asrs	r3, r0, #4
   d4616:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d461a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d461c:	21e7      	movs	r1, #231	; 0xe7
   d461e:	4620      	mov	r0, r4
   d4620:	f7ff ff38 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
   d4624:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d4628:	bd38      	pop	{r3, r4, r5, pc}
	...

000d462c <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d462c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d462e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4632:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d4634:	4604      	mov	r4, r0
   d4636:	460e      	mov	r6, r1
   d4638:	4615      	mov	r5, r2
    if (_cs == -1) {
   d463a:	d112      	bne.n	d4662 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d463c:	7901      	ldrb	r1, [r0, #4]
   d463e:	6800      	ldr	r0, [r0, #0]
   d4640:	f001 fd90 	bl	d6164 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4644:	6820      	ldr	r0, [r4, #0]
   d4646:	6803      	ldr	r3, [r0, #0]
   d4648:	4631      	mov	r1, r6
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d464e:	6820      	ldr	r0, [r4, #0]
   d4650:	6803      	ldr	r3, [r0, #0]
   d4652:	4629      	mov	r1, r5
   d4654:	689b      	ldr	r3, [r3, #8]
   d4656:	4798      	blx	r3
        _wire -> endTransmission();
   d4658:	6820      	ldr	r0, [r4, #0]
   d465a:	f001 fd8e 	bl	d617a <_ZN7TwoWire15endTransmissionEv>
}
   d465e:	b004      	add	sp, #16
   d4660:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d4662:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4666:	3301      	adds	r3, #1
   d4668:	d10c      	bne.n	d4684 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d466a:	4b14      	ldr	r3, [pc, #80]	; (d46bc <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d466c:	9300      	str	r3, [sp, #0]
   d466e:	2300      	movs	r3, #0
   d4670:	f88d 3004 	strb.w	r3, [sp, #4]
   d4674:	4b12      	ldr	r3, [pc, #72]	; (d46c0 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4676:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4678:	4668      	mov	r0, sp
   d467a:	2301      	movs	r3, #1
   d467c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4680:	f7ff fe95 	bl	d43ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4684:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4688:	2100      	movs	r1, #0
   d468a:	b280      	uxth	r0, r0
   d468c:	f001 feb5 	bl	d63fa <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4690:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4694:	4620      	mov	r0, r4
   d4696:	f7ff fe4d 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d469a:	4629      	mov	r1, r5
   d469c:	4620      	mov	r0, r4
   d469e:	f7ff fe49 	bl	d4334 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d46a2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46a6:	2101      	movs	r1, #1
   d46a8:	b280      	uxth	r0, r0
   d46aa:	f001 fea6 	bl	d63fa <digitalWrite>
    if (_sck == -1)
   d46ae:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46b2:	3301      	adds	r3, #1
   d46b4:	d1d3      	bne.n	d465e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d46b6:	f7ff fe73 	bl	d43a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d46ba:	e7d0      	b.n	d465e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d46bc:	000d6ec4 	.word	0x000d6ec4
   d46c0:	0007a120 	.word	0x0007a120

000d46c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d46c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d46c6:	00db      	lsls	r3, r3, #3
   d46c8:	f002 0207 	and.w	r2, r2, #7
   d46cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d46d0:	4313      	orrs	r3, r2
   d46d2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d46d6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d46da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d46de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d46e2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d46e6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d46ea:	f366 1347 	bfi	r3, r6, #5, #3
   d46ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d46f2:	00ed      	lsls	r5, r5, #3
   d46f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d46f8:	f007 0707 	and.w	r7, r7, #7
   d46fc:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d4700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d4704:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d4706:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d4708:	431d      	orrs	r5, r3
   d470a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d470e:	f006 0207 	and.w	r2, r6, #7
   d4712:	21f2      	movs	r1, #242	; 0xf2
   d4714:	f7ff ff8a 	bl	d462c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4718:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d471c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4720:	f002 0107 	and.w	r1, r2, #7
   d4724:	009b      	lsls	r3, r3, #2
   d4726:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d472a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d472e:	4620      	mov	r0, r4
   d4730:	21f5      	movs	r1, #245	; 0xf5
   d4732:	f7ff ff7b 	bl	d462c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4736:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d473a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d473e:	f002 0107 	and.w	r1, r2, #7
   d4742:	009b      	lsls	r3, r3, #2
   d4744:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4748:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d474c:	4620      	mov	r0, r4
   d474e:	21f4      	movs	r1, #244	; 0xf4
}
   d4750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4754:	f7ff bf6a 	b.w	d462c <_ZN15Adafruit_BME2806write8Ehh>

000d4758 <_ZN15Adafruit_BME2804initEv>:
{
   d4758:	b530      	push	{r4, r5, lr}
   d475a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d475c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4760:	1c42      	adds	r2, r0, #1
{
   d4762:	b085      	sub	sp, #20
    if (_cs == -1) {
   d4764:	d119      	bne.n	d479a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d4766:	6820      	ldr	r0, [r4, #0]
   d4768:	f001 fcca 	bl	d6100 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d476c:	21d0      	movs	r1, #208	; 0xd0
   d476e:	4620      	mov	r0, r4
   d4770:	f7ff fe90 	bl	d4494 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4774:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4776:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4778:	d145      	bne.n	d4806 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d477a:	4620      	mov	r0, r4
   d477c:	22b6      	movs	r2, #182	; 0xb6
   d477e:	21e0      	movs	r1, #224	; 0xe0
   d4780:	f7ff ff54 	bl	d462c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d4784:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4788:	f001 fa4e 	bl	d5c28 <delay>
    while (isReadingCalibration())
   d478c:	4620      	mov	r0, r4
   d478e:	f7ff fed5 	bl	d453c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4792:	4605      	mov	r5, r0
   d4794:	b328      	cbz	r0, d47e2 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4796:	2064      	movs	r0, #100	; 0x64
   d4798:	e7f6      	b.n	d4788 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d479a:	2101      	movs	r1, #1
   d479c:	b280      	uxth	r0, r0
   d479e:	f001 fe2c 	bl	d63fa <digitalWrite>
        pinMode(_cs, OUTPUT);
   d47a2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47a6:	2101      	movs	r1, #1
   d47a8:	b280      	uxth	r0, r0
   d47aa:	f001 fe15 	bl	d63d8 <pinMode>
        if (_sck == -1) {
   d47ae:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d47b2:	1c43      	adds	r3, r0, #1
   d47b4:	d104      	bne.n	d47c0 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d47b6:	f7ff fda1 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47ba:	f001 f809 	bl	d57d0 <_ZN8SPIClass5beginEv>
    }
   d47be:	e7d5      	b.n	d476c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d47c0:	2101      	movs	r1, #1
   d47c2:	b280      	uxth	r0, r0
   d47c4:	f001 fe08 	bl	d63d8 <pinMode>
            pinMode(_mosi, OUTPUT);
   d47c8:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d47cc:	2101      	movs	r1, #1
   d47ce:	b280      	uxth	r0, r0
   d47d0:	f001 fe02 	bl	d63d8 <pinMode>
            pinMode(_miso, INPUT);
   d47d4:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d47d8:	2100      	movs	r1, #0
   d47da:	b280      	uxth	r0, r0
   d47dc:	f001 fdfc 	bl	d63d8 <pinMode>
   d47e0:	e7c4      	b.n	d476c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d47e2:	4620      	mov	r0, r4
   d47e4:	f7ff feb1 	bl	d454a <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d47e8:	2305      	movs	r3, #5
   d47ea:	9300      	str	r3, [sp, #0]
   d47ec:	461a      	mov	r2, r3
   d47ee:	2103      	movs	r1, #3
   d47f0:	4620      	mov	r0, r4
   d47f2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d47f6:	f7ff ff65 	bl	d46c4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d47fa:	2064      	movs	r0, #100	; 0x64
   d47fc:	f001 fa14 	bl	d5c28 <delay>
   d4800:	2001      	movs	r0, #1
}
   d4802:	b005      	add	sp, #20
   d4804:	bd30      	pop	{r4, r5, pc}
        return false;
   d4806:	2000      	movs	r0, #0
   d4808:	e7fb      	b.n	d4802 <_ZN15Adafruit_BME2804initEv+0xaa>

000d480a <_ZN15Adafruit_BME2805beginEh>:
{
   d480a:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d480c:	7101      	strb	r1, [r0, #4]
{
   d480e:	4604      	mov	r4, r0
	_wire = &Wire;
   d4810:	f001 fe5a 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4814:	6020      	str	r0, [r4, #0]
	return init();
   d4816:	4620      	mov	r0, r4
}
   d4818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   d481c:	f7ff bf9c 	b.w	d4758 <_ZN15Adafruit_BME2804initEv>

000d4820 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4820:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4822:	f000 fd4b 	bl	d52bc <HAL_Pin_Map>
   d4826:	4b01      	ldr	r3, [pc, #4]	; (d482c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4828:	6018      	str	r0, [r3, #0]
}
   d482a:	bd08      	pop	{r3, pc}
   d482c:	2003e644 	.word	0x2003e644

000d4830 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4830:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4832:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4834:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4838:	2d02      	cmp	r5, #2
   d483a:	d067      	beq.n	d490c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d483c:	2d03      	cmp	r5, #3
   d483e:	f000 8097 	beq.w	d4970 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d4842:	2d01      	cmp	r5, #1
   d4844:	d16a      	bne.n	d491c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4846:	8905      	ldrh	r5, [r0, #8]
   d4848:	43d2      	mvns	r2, r2
   d484a:	442a      	add	r2, r5
   d484c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d484e:	2a00      	cmp	r2, #0
   d4850:	db5b      	blt.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4852:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4856:	4295      	cmp	r5, r2
   d4858:	dd57      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d485a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d485c:	bfbe      	ittt	lt
   d485e:	185b      	addlt	r3, r3, r1
   d4860:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4862:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4864:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4868:	18cd      	adds	r5, r1, r3
   d486a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d486c:	bfc4      	itt	gt
   d486e:	1a43      	subgt	r3, r0, r1
   d4870:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4872:	2b00      	cmp	r3, #0
   d4874:	dd49      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4876:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d487a:	f8df c11c 	ldr.w	ip, [pc, #284]	; d4998 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d487e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4882:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d4886:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4888:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d488c:	d01a      	beq.n	d48c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d488e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4892:	4e3f      	ldr	r6, [pc, #252]	; (d4990 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d4894:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4896:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4898:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d489a:	bf3f      	itttt	cc
   d489c:	eba5 0e03 	subcc.w	lr, r5, r3
   d48a0:	26ff      	movcc	r6, #255	; 0xff
   d48a2:	fa46 f60e 	asrcc.w	r6, r6, lr
   d48a6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d48a8:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d48ac:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d48ae:	bf0c      	ite	eq
   d48b0:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d48b2:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d48b4:	42ab      	cmp	r3, r5
   d48b6:	f80c 6002 	strb.w	r6, [ip, r2]
   d48ba:	d326      	bcc.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d48bc:	3908      	subs	r1, #8
   d48be:	440b      	add	r3, r1
   d48c0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d48c2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d48c4:	2b07      	cmp	r3, #7
   d48c6:	d917      	bls.n	d48f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d48c8:	2c01      	cmp	r4, #1
   d48ca:	bf0c      	ite	eq
   d48cc:	25ff      	moveq	r5, #255	; 0xff
   d48ce:	2500      	movne	r5, #0
   d48d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d48d4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d48d6:	3a08      	subs	r2, #8
   d48d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d48da:	2a07      	cmp	r2, #7
      *pBuf = val;
   d48dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d48e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d48e4:	d8f7      	bhi.n	d48d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d48e6:	f1a3 0208 	sub.w	r2, r3, #8
   d48ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d48ee:	3201      	adds	r2, #1
   d48f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d48f4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d48f8:	b13b      	cbz	r3, d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d48fa:	4a26      	ldr	r2, [pc, #152]	; (d4994 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d48fc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d48fe:	7803      	ldrb	r3, [r0, #0]
   d4900:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4902:	bf0c      	ite	eq
   d4904:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4906:	4393      	bicne	r3, r2
   d4908:	7003      	strb	r3, [r0, #0]
}
   d490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d490c:	8945      	ldrh	r5, [r0, #10]
   d490e:	43d2      	mvns	r2, r2
   d4910:	442a      	add	r2, r5
      x -= (w-1);
   d4912:	18cd      	adds	r5, r1, r3
   d4914:	8901      	ldrh	r1, [r0, #8]
   d4916:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4918:	b212      	sxth	r2, r2
      x -= (w-1);
   d491a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d491c:	2a00      	cmp	r2, #0
   d491e:	dbf4      	blt.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4920:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4924:	4295      	cmp	r5, r2
   d4926:	ddf0      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4928:	2900      	cmp	r1, #0
    w += x;
   d492a:	bfbe      	ittt	lt
   d492c:	185b      	addlt	r3, r3, r1
   d492e:	b21b      	sxthlt	r3, r3
    x = 0;
   d4930:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d4932:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4936:	18ce      	adds	r6, r1, r3
   d4938:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d493a:	bfc4      	itt	gt
   d493c:	1a6b      	subgt	r3, r5, r1
   d493e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4940:	2b00      	cmp	r3, #0
   d4942:	dde2      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4944:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d4946:	2580      	movs	r5, #128	; 0x80
   d4948:	fb10 1105 	smlabb	r1, r0, r5, r1
   d494c:	4812      	ldr	r0, [pc, #72]	; (d4998 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d494e:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4950:	f002 0107 	and.w	r1, r2, #7
   d4954:	2201      	movs	r2, #1
   d4956:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4958:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d495a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d495c:	4403      	add	r3, r0
   d495e:	d10c      	bne.n	d497a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4960:	4283      	cmp	r3, r0
   d4962:	d0d2      	beq.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4964:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4968:	4314      	orrs	r4, r2
   d496a:	f800 4c01 	strb.w	r4, [r0, #-1]
   d496e:	e7f7      	b.n	d4960 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4970:	18cd      	adds	r5, r1, r3
   d4972:	8941      	ldrh	r1, [r0, #10]
   d4974:	1b49      	subs	r1, r1, r5
   d4976:	b209      	sxth	r1, r1
      break;
   d4978:	e769      	b.n	d484e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d497a:	43d2      	mvns	r2, r2
   d497c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d497e:	4283      	cmp	r3, r0
   d4980:	d0c3      	beq.n	d490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4982:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4986:	4014      	ands	r4, r2
   d4988:	f800 4c01 	strb.w	r4, [r0, #-1]
   d498c:	e7f7      	b.n	d497e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d498e:	bf00      	nop
   d4990:	2003e144 	.word	0x2003e144
   d4994:	2003e13c 	.word	0x2003e13c
   d4998:	2003e14c 	.word	0x2003e14c

000d499c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d499c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d499e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d49a0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d49a4:	2d02      	cmp	r5, #2
   d49a6:	d034      	beq.n	d4a12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d49a8:	2d03      	cmp	r5, #3
   d49aa:	f000 8099 	beq.w	d4ae0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d49ae:	2d01      	cmp	r5, #1
   d49b0:	d137      	bne.n	d4a22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d49b2:	18d5      	adds	r5, r2, r3
   d49b4:	8902      	ldrh	r2, [r0, #8]
   d49b6:	1b52      	subs	r2, r2, r5
   d49b8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d49ba:	2900      	cmp	r1, #0
   d49bc:	f2c0 808f 	blt.w	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d49c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d49c4:	428d      	cmp	r5, r1
   d49c6:	f340 808a 	ble.w	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d49ca:	2a00      	cmp	r2, #0
    w += x;
   d49cc:	bfbe      	ittt	lt
   d49ce:	189b      	addlt	r3, r3, r2
   d49d0:	b21b      	sxthlt	r3, r3
    x = 0;
   d49d2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d49d4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d49d8:	18d6      	adds	r6, r2, r3
   d49da:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d49dc:	bfc4      	itt	gt
   d49de:	1aab      	subgt	r3, r5, r2
   d49e0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d49e2:	2b00      	cmp	r3, #0
   d49e4:	dd7b      	ble.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d49e6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d49e8:	2580      	movs	r5, #128	; 0x80
   d49ea:	fb10 2205 	smlabb	r2, r0, r5, r2
   d49ee:	4844      	ldr	r0, [pc, #272]	; (d4b00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d49f0:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d49f2:	f001 0207 	and.w	r2, r1, #7
   d49f6:	2101      	movs	r1, #1
   d49f8:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d49fa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d49fc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d49fe:	4403      	add	r3, r0
   d4a00:	d173      	bne.n	d4aea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d4a02:	4298      	cmp	r0, r3
   d4a04:	d06b      	beq.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4a06:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4a0a:	430c      	orrs	r4, r1
   d4a0c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4a10:	e7f7      	b.n	d4a02 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d4a12:	8905      	ldrh	r5, [r0, #8]
   d4a14:	43c9      	mvns	r1, r1
   d4a16:	4429      	add	r1, r5
      y -= (h-1);
   d4a18:	18d5      	adds	r5, r2, r3
   d4a1a:	8942      	ldrh	r2, [r0, #10]
   d4a1c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4a1e:	b209      	sxth	r1, r1
      y -= (h-1);
   d4a20:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d4a22:	2900      	cmp	r1, #0
   d4a24:	db5b      	blt.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4a26:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4a2a:	428d      	cmp	r5, r1
   d4a2c:	dd57      	ble.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4a2e:	2a00      	cmp	r2, #0
    __h += __y;
   d4a30:	bfbe      	ittt	lt
   d4a32:	189b      	addlt	r3, r3, r2
   d4a34:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4a36:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4a38:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4a3c:	18d5      	adds	r5, r2, r3
   d4a3e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4a40:	bfc4      	itt	gt
   d4a42:	1a83      	subgt	r3, r0, r2
   d4a44:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d4a46:	2b00      	cmp	r3, #0
   d4a48:	dd49      	ble.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4a4a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4a4e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d4b00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d4a52:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d4a56:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4a5a:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4a5c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4a60:	d01a      	beq.n	d4a98 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d4a62:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d4a66:	4e27      	ldr	r6, [pc, #156]	; (d4b04 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4a68:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4a6a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4a6c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4a6e:	bf3f      	itttt	cc
   d4a70:	eba5 0e03 	subcc.w	lr, r5, r3
   d4a74:	26ff      	movcc	r6, #255	; 0xff
   d4a76:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4a7a:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4a7c:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4a80:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4a82:	bf0c      	ite	eq
   d4a84:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d4a86:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4a88:	42ab      	cmp	r3, r5
   d4a8a:	f80c 6001 	strb.w	r6, [ip, r1]
   d4a8e:	d326      	bcc.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4a90:	3a08      	subs	r2, #8
   d4a92:	4413      	add	r3, r2
   d4a94:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d4a96:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d4a98:	2b07      	cmp	r3, #7
   d4a9a:	d917      	bls.n	d4acc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4a9c:	2c01      	cmp	r4, #1
   d4a9e:	bf0c      	ite	eq
   d4aa0:	25ff      	moveq	r5, #255	; 0xff
   d4aa2:	2500      	movne	r5, #0
   d4aa4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4aa8:	461a      	mov	r2, r3
      h -= 8;
   d4aaa:	3a08      	subs	r2, #8
   d4aac:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4aae:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4ab0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4ab4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4ab8:	d8f7      	bhi.n	d4aaa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d4aba:	f1a3 0208 	sub.w	r2, r3, #8
   d4abe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4ac2:	3201      	adds	r2, #1
   d4ac4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4ac8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d4acc:	b13b      	cbz	r3, d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d4ace:	4a0e      	ldr	r2, [pc, #56]	; (d4b08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d4ad0:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4ad2:	7803      	ldrb	r3, [r0, #0]
   d4ad4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4ad6:	bf0c      	ite	eq
   d4ad8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d4ada:	4393      	bicne	r3, r2
   d4adc:	7003      	strb	r3, [r0, #0]
}
   d4ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4ae0:	8945      	ldrh	r5, [r0, #10]
   d4ae2:	43c9      	mvns	r1, r1
   d4ae4:	4429      	add	r1, r5
   d4ae6:	b209      	sxth	r1, r1
      break;
   d4ae8:	e767      	b.n	d49ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d4aea:	43c9      	mvns	r1, r1
   d4aec:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d4aee:	4298      	cmp	r0, r3
   d4af0:	d0f5      	beq.n	d4ade <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4af2:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4af6:	400c      	ands	r4, r1
   d4af8:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4afc:	e7f7      	b.n	d4aee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4afe:	bf00      	nop
   d4b00:	2003e14c 	.word	0x2003e14c
   d4b04:	2003e144 	.word	0x2003e144
   d4b08:	2003e13c 	.word	0x2003e13c

000d4b0c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4b0e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4b10:	4606      	mov	r6, r0
   d4b12:	4614      	mov	r4, r2
   d4b14:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4b16:	db2d      	blt.n	d4b74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4b18:	f000 fbb9 	bl	d528e <_ZN12Adafruit_GFX5widthEv>
   d4b1c:	42a8      	cmp	r0, r5
   d4b1e:	dd29      	ble.n	d4b74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4b20:	2c00      	cmp	r4, #0
   d4b22:	db27      	blt.n	d4b74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4b24:	4630      	mov	r0, r6
   d4b26:	f000 fbb5 	bl	d5294 <_ZN12Adafruit_GFX6heightEv>
   d4b2a:	42a0      	cmp	r0, r4
   d4b2c:	dd22      	ble.n	d4b74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4b2e:	4630      	mov	r0, r6
   d4b30:	f000 fb9d 	bl	d526e <_ZN12Adafruit_GFX11getRotationEv>
   d4b34:	2802      	cmp	r0, #2
   d4b36:	d01e      	beq.n	d4b76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4b38:	2803      	cmp	r0, #3
   d4b3a:	d025      	beq.n	d4b88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4b3c:	2801      	cmp	r0, #1
   d4b3e:	d104      	bne.n	d4b4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4b40:	8932      	ldrh	r2, [r6, #8]
   d4b42:	43e4      	mvns	r4, r4
   d4b44:	4422      	add	r2, r4
    break;
   d4b46:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4b48:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4b4a:	2c00      	cmp	r4, #0
   d4b4c:	4621      	mov	r1, r4
   d4b4e:	bfb8      	it	lt
   d4b50:	1de1      	addlt	r1, r4, #7
   d4b52:	10c9      	asrs	r1, r1, #3
   d4b54:	2380      	movs	r3, #128	; 0x80
   d4b56:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4b5a:	490e      	ldr	r1, [pc, #56]	; (d4b94 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4b5c:	2201      	movs	r2, #1
   d4b5e:	f004 0407 	and.w	r4, r4, #7
   d4b62:	574b      	ldrsb	r3, [r1, r5]
   d4b64:	fa02 f404 	lsl.w	r4, r2, r4
   d4b68:	b264      	sxtb	r4, r4
   d4b6a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4b6c:	bf0c      	ite	eq
   d4b6e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4b70:	43a3      	bicne	r3, r4
   d4b72:	554b      	strb	r3, [r1, r5]
}
   d4b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d4b76:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4b78:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4b7a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4b7c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4b7e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4b80:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d4b82:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d4b84:	b224      	sxth	r4, r4
    break;
   d4b86:	e7e0      	b.n	d4b4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4b88:	8973      	ldrh	r3, [r6, #10]
   d4b8a:	3b01      	subs	r3, #1
   d4b8c:	1b5b      	subs	r3, r3, r5
    break;
   d4b8e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4b90:	b21c      	sxth	r4, r3
    break;
   d4b92:	e7da      	b.n	d4b4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d4b94:	2003e14c 	.word	0x2003e14c

000d4b98 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4b98:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4b9a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4b9c:	4604      	mov	r4, r0
   d4b9e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4ba0:	2180      	movs	r1, #128	; 0x80
   d4ba2:	f000 fa8b 	bl	d50bc <_ZN12Adafruit_GFXC1Ess>
   d4ba6:	4b06      	ldr	r3, [pc, #24]	; (d4bc0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4ba8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4baa:	23ff      	movs	r3, #255	; 0xff
   d4bac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4bb0:	7763      	strb	r3, [r4, #29]
   d4bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4bb6:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d4bb8:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	bd38      	pop	{r3, r4, r5, pc}
   d4bc0:	000d6ed8 	.word	0x000d6ed8

000d4bc4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4bc4:	4802      	ldr	r0, [pc, #8]	; (d4bd0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4bca:	2100      	movs	r1, #0
   d4bcc:	f002 b8ec 	b.w	d6da8 <memset>
   d4bd0:	2003e14c 	.word	0x2003e14c

000d4bd4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4bd4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4bd6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d4bda:	b143      	cbz	r3, d4bee <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d4bdc:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   d4bde:	f7ff fb8d 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4be2:	9901      	ldr	r1, [sp, #4]
}
   d4be4:	b003      	add	sp, #12
   d4be6:	f85d eb04 	ldr.w	lr, [sp], #4
   d4bea:	f000 bf07 	b.w	d59fc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4bee:	460b      	mov	r3, r1
   d4bf0:	7f81      	ldrb	r1, [r0, #30]
   d4bf2:	7f40      	ldrb	r0, [r0, #29]
   d4bf4:	2201      	movs	r2, #1
}
   d4bf6:	b003      	add	sp, #12
   d4bf8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4bfc:	f001 bc29 	b.w	d6452 <shiftOut>

000d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4c00:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4c02:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4c06:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4c08:	4604      	mov	r4, r0
   d4c0a:	460d      	mov	r5, r1
  if (sid != -1)
   d4c0c:	d01d      	beq.n	d4c4a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d4c0e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4c12:	2101      	movs	r1, #1
   d4c14:	b280      	uxth	r0, r0
   d4c16:	f001 fbf0 	bl	d63fa <digitalWrite>
    digitalWrite(dc, LOW);
   d4c1a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4c1e:	2100      	movs	r1, #0
   d4c20:	b280      	uxth	r0, r0
   d4c22:	f001 fbea 	bl	d63fa <digitalWrite>
    digitalWrite(cs, LOW);
   d4c26:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c2a:	2100      	movs	r1, #0
   d4c2c:	b280      	uxth	r0, r0
   d4c2e:	f001 fbe4 	bl	d63fa <digitalWrite>
    fastSPIwrite(c);
   d4c32:	4629      	mov	r1, r5
   d4c34:	4620      	mov	r0, r4
   d4c36:	f7ff ffcd 	bl	d4bd4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d4c3a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c3e:	2101      	movs	r1, #1
}
   d4c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4c44:	b280      	uxth	r0, r0
   d4c46:	f001 bbd8 	b.w	d63fa <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d4c4a:	f001 fc3d 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4c4e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4c52:	f001 fa8b 	bl	d616c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4c56:	f001 fc37 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4c5a:	6803      	ldr	r3, [r0, #0]
   d4c5c:	2100      	movs	r1, #0
   d4c5e:	689b      	ldr	r3, [r3, #8]
   d4c60:	4798      	blx	r3
    Wire.write(c);
   d4c62:	f001 fc31 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4c66:	6803      	ldr	r3, [r0, #0]
   d4c68:	4629      	mov	r1, r5
   d4c6a:	689b      	ldr	r3, [r3, #8]
   d4c6c:	4798      	blx	r3
    Wire.endTransmission();
   d4c6e:	f001 fc2b 	bl	d64c8 <_Z19__fetch_global_Wirev>
}
   d4c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d4c76:	f001 ba80 	b.w	d617a <_ZN7TwoWire15endTransmissionEv>
	...

000d4c7c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d4c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c7e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d4c80:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c82:	f7ff ffbd 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4c86:	2100      	movs	r1, #0
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f7ff ffb9 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4c8e:	217f      	movs	r1, #127	; 0x7f
   d4c90:	4620      	mov	r0, r4
   d4c92:	f7ff ffb5 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d4c96:	2122      	movs	r1, #34	; 0x22
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff ffb1 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4c9e:	2100      	movs	r1, #0
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	f7ff ffad 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4ca6:	2107      	movs	r1, #7
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f7ff ffa9 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d4cae:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4cb2:	4f29      	ldr	r7, [pc, #164]	; (d4d58 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d4cb4:	3301      	adds	r3, #1
   d4cb6:	d02a      	beq.n	d4d0e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d4cb8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4cbc:	2101      	movs	r1, #1
   d4cbe:	b280      	uxth	r0, r0
   d4cc0:	f001 fb9b 	bl	d63fa <digitalWrite>
    digitalWrite(dc, HIGH);
   d4cc4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4cc8:	2101      	movs	r1, #1
   d4cca:	b280      	uxth	r0, r0
   d4ccc:	f001 fb95 	bl	d63fa <digitalWrite>
    digitalWrite(cs, LOW);
   d4cd0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4cd4:	2100      	movs	r1, #0
   d4cd6:	b280      	uxth	r0, r0
   d4cd8:	f001 fb8f 	bl	d63fa <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4cdc:	2001      	movs	r0, #1
   d4cde:	f000 fb1d 	bl	d531c <HAL_Delay_Microseconds>
   d4ce2:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4ce6:	3d01      	subs	r5, #1
   d4ce8:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4cec:	4620      	mov	r0, r4
   d4cee:	b2ad      	uxth	r5, r5
   d4cf0:	f7ff ff70 	bl	d4bd4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4cf4:	2d00      	cmp	r5, #0
   d4cf6:	d1f6      	bne.n	d4ce6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4cf8:	2001      	movs	r0, #1
   d4cfa:	f000 fb0f 	bl	d531c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d4cfe:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4d02:	2101      	movs	r1, #1
}
   d4d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4d08:	b280      	uxth	r0, r0
   d4d0a:	f001 bb76 	b.w	d63fa <digitalWrite>
   d4d0e:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4d10:	f001 fbda 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4d14:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4d18:	f001 fa28 	bl	d616c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4d1c:	f001 fbd4 	bl	d64c8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d20:	6803      	ldr	r3, [r0, #0]
   d4d22:	f1a6 0510 	sub.w	r5, r6, #16
   d4d26:	689b      	ldr	r3, [r3, #8]
   d4d28:	2140      	movs	r1, #64	; 0x40
   d4d2a:	b2ad      	uxth	r5, r5
   d4d2c:	4798      	blx	r3
		Wire.write(buffer[i]);
   d4d2e:	f001 fbcb 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4d32:	6803      	ldr	r3, [r0, #0]
   d4d34:	5d79      	ldrb	r1, [r7, r5]
   d4d36:	689b      	ldr	r3, [r3, #8]
		i++;
   d4d38:	3501      	adds	r5, #1
   d4d3a:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d4d3c:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d4d3e:	42ae      	cmp	r6, r5
   d4d40:	d1f5      	bne.n	d4d2e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4d42:	f001 fbc1 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4d46:	f001 fa18 	bl	d617a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4d4a:	f106 0310 	add.w	r3, r6, #16
   d4d4e:	b29e      	uxth	r6, r3
   d4d50:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4d54:	d1dc      	bne.n	d4d10 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4d58:	2003e14c 	.word	0x2003e14c

000d4d5c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4d5c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d4d5e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d4d62:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d4d64:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4d66:	4604      	mov	r4, r0
   d4d68:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d4d6a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d4d6c:	f000 80c9 	beq.w	d4f02 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d4d70:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4d74:	2101      	movs	r1, #1
   d4d76:	b280      	uxth	r0, r0
   d4d78:	f001 fb2e 	bl	d63d8 <pinMode>
    pinMode(cs, OUTPUT);
   d4d7c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4d80:	2101      	movs	r1, #1
   d4d82:	b280      	uxth	r0, r0
   d4d84:	f001 fb28 	bl	d63d8 <pinMode>
    if (!hwSPI){
   d4d88:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4d8c:	2b00      	cmp	r3, #0
   d4d8e:	f000 80a6 	beq.w	d4ede <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d4d92:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4d96:	2101      	movs	r1, #1
   d4d98:	b280      	uxth	r0, r0
   d4d9a:	f001 fb2e 	bl	d63fa <digitalWrite>
        instance().setBitOrder(order);
   d4d9e:	f7ff faad 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4da2:	2101      	movs	r1, #1
   d4da4:	f000 fd25 	bl	d57f2 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d4da8:	f7ff faa8 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4dac:	2110      	movs	r1, #16
   d4dae:	f000 fdff 	bl	d59b0 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d4db2:	f7ff faa3 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4db6:	2100      	movs	r1, #0
   d4db8:	f000 fd2e 	bl	d5818 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d4dbc:	f7ff fa9e 	bl	d42fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4dc0:	f000 fd06 	bl	d57d0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d4dc4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4dc8:	2101      	movs	r1, #1
   d4dca:	b280      	uxth	r0, r0
   d4dcc:	f001 fb04 	bl	d63d8 <pinMode>
  digitalWrite(rst, HIGH);
   d4dd0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4dd4:	2101      	movs	r1, #1
   d4dd6:	b280      	uxth	r0, r0
   d4dd8:	f001 fb0f 	bl	d63fa <digitalWrite>
  delay(1);
   d4ddc:	2001      	movs	r0, #1
   d4dde:	f000 ff23 	bl	d5c28 <delay>
  digitalWrite(rst, LOW);
   d4de2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4de6:	2100      	movs	r1, #0
   d4de8:	b280      	uxth	r0, r0
   d4dea:	f001 fb06 	bl	d63fa <digitalWrite>
  delay(10);
   d4dee:	200a      	movs	r0, #10
   d4df0:	f000 ff1a 	bl	d5c28 <delay>
  digitalWrite(rst, HIGH);
   d4df4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4df8:	2101      	movs	r1, #1
   d4dfa:	b280      	uxth	r0, r0
   d4dfc:	f001 fafd 	bl	d63fa <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4e00:	4620      	mov	r0, r4
   d4e02:	21ae      	movs	r1, #174	; 0xae
   d4e04:	f7ff fefc 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4e08:	4620      	mov	r0, r4
   d4e0a:	21d5      	movs	r1, #213	; 0xd5
   d4e0c:	f7ff fef8 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4e10:	4620      	mov	r0, r4
   d4e12:	2180      	movs	r1, #128	; 0x80
   d4e14:	f7ff fef4 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4e18:	4620      	mov	r0, r4
   d4e1a:	21a8      	movs	r1, #168	; 0xa8
   d4e1c:	f7ff fef0 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4e20:	4620      	mov	r0, r4
   d4e22:	213f      	movs	r1, #63	; 0x3f
   d4e24:	f7ff feec 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4e28:	4620      	mov	r0, r4
   d4e2a:	21d3      	movs	r1, #211	; 0xd3
   d4e2c:	f7ff fee8 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4e30:	4620      	mov	r0, r4
   d4e32:	2100      	movs	r1, #0
   d4e34:	f7ff fee4 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4e38:	4620      	mov	r0, r4
   d4e3a:	2140      	movs	r1, #64	; 0x40
   d4e3c:	f7ff fee0 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4e40:	218d      	movs	r1, #141	; 0x8d
   d4e42:	4620      	mov	r0, r4
   d4e44:	f7ff fedc 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4e48:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4e4a:	bf0c      	ite	eq
   d4e4c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d4e4e:	2114      	movne	r1, #20
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff fed5 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4e56:	4620      	mov	r0, r4
   d4e58:	2120      	movs	r1, #32
   d4e5a:	f7ff fed1 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4e5e:	4620      	mov	r0, r4
   d4e60:	2100      	movs	r1, #0
   d4e62:	f7ff fecd 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4e66:	4620      	mov	r0, r4
   d4e68:	21a1      	movs	r1, #161	; 0xa1
   d4e6a:	f7ff fec9 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4e6e:	4620      	mov	r0, r4
   d4e70:	21c8      	movs	r1, #200	; 0xc8
   d4e72:	f7ff fec5 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4e76:	4620      	mov	r0, r4
   d4e78:	21da      	movs	r1, #218	; 0xda
   d4e7a:	f7ff fec1 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4e7e:	4620      	mov	r0, r4
   d4e80:	2112      	movs	r1, #18
   d4e82:	f7ff febd 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4e86:	2181      	movs	r1, #129	; 0x81
   d4e88:	4620      	mov	r0, r4
   d4e8a:	f7ff feb9 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4e8e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4e90:	bf0c      	ite	eq
   d4e92:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d4e94:	21cf      	movne	r1, #207	; 0xcf
   d4e96:	4620      	mov	r0, r4
   d4e98:	f7ff feb2 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4e9c:	21d9      	movs	r1, #217	; 0xd9
   d4e9e:	4620      	mov	r0, r4
   d4ea0:	f7ff feae 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4ea4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4ea6:	bf0c      	ite	eq
   d4ea8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d4eaa:	21f1      	movne	r1, #241	; 0xf1
   d4eac:	4620      	mov	r0, r4
   d4eae:	f7ff fea7 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	21db      	movs	r1, #219	; 0xdb
   d4eb6:	f7ff fea3 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4eba:	4620      	mov	r0, r4
   d4ebc:	2140      	movs	r1, #64	; 0x40
   d4ebe:	f7ff fe9f 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	21a4      	movs	r1, #164	; 0xa4
   d4ec6:	f7ff fe9b 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4eca:	4620      	mov	r0, r4
   d4ecc:	21a6      	movs	r1, #166	; 0xa6
   d4ece:	f7ff fe97 	bl	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	21af      	movs	r1, #175	; 0xaf
}
   d4ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4eda:	f7ff be91 	b.w	d4c00 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d4ede:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ee2:	2101      	movs	r1, #1
   d4ee4:	b280      	uxth	r0, r0
   d4ee6:	f001 fa77 	bl	d63d8 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4eea:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4eee:	2101      	movs	r1, #1
   d4ef0:	b280      	uxth	r0, r0
   d4ef2:	f001 fa71 	bl	d63d8 <pinMode>
    if (hwSPI){
   d4ef6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4efa:	2b00      	cmp	r3, #0
   d4efc:	f43f af62 	beq.w	d4dc4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d4f00:	e747      	b.n	d4d92 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d4f02:	f001 fae1 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d4f06:	f001 f8fb 	bl	d6100 <_ZN7TwoWire5beginEv>
   d4f0a:	e75b      	b.n	d4dc4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d4f0c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f10:	b085      	sub	sp, #20
   d4f12:	461f      	mov	r7, r3
   d4f14:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4f18:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4f1c:	eba8 0902 	sub.w	r9, r8, r2
   d4f20:	eba7 0a01 	sub.w	sl, r7, r1
   d4f24:	f1b9 0f00 	cmp.w	r9, #0
   d4f28:	bfb8      	it	lt
   d4f2a:	f1c9 0900 	rsblt	r9, r9, #0
   d4f2e:	f1ba 0f00 	cmp.w	sl, #0
   d4f32:	bfb8      	it	lt
   d4f34:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d4f38:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d4f3a:	4683      	mov	fp, r0
   d4f3c:	460c      	mov	r4, r1
   d4f3e:	4615      	mov	r5, r2
  if (steep) {
   d4f40:	dd04      	ble.n	d4f4c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d4f42:	463a      	mov	r2, r7
    swap(x0, y0);
   d4f44:	462c      	mov	r4, r5
    swap(x1, y1);
   d4f46:	4647      	mov	r7, r8
    swap(x0, y0);
   d4f48:	460d      	mov	r5, r1
    swap(x1, y1);
   d4f4a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d4f4c:	42bc      	cmp	r4, r7
   d4f4e:	dd05      	ble.n	d4f5c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d4f50:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4f52:	4645      	mov	r5, r8
   d4f54:	4690      	mov	r8, r2
  if (x0 > x1) {
   d4f56:	4622      	mov	r2, r4
   d4f58:	463c      	mov	r4, r7
   d4f5a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4f5c:	1b3e      	subs	r6, r7, r4
   d4f5e:	b2b2      	uxth	r2, r6
   d4f60:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d4f62:	eba8 0205 	sub.w	r2, r8, r5
   d4f66:	2a00      	cmp	r2, #0
   d4f68:	bfb8      	it	lt
   d4f6a:	4252      	neglt	r2, r2
   d4f6c:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d4f6e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4f72:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4f76:	4545      	cmp	r5, r8
   d4f78:	bfb4      	ite	lt
   d4f7a:	2201      	movlt	r2, #1
   d4f7c:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d4f80:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d4f82:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d4f84:	42bc      	cmp	r4, r7
   d4f86:	dc1c      	bgt.n	d4fc2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d4f88:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d4f8c:	9303      	str	r3, [sp, #12]
    if (steep) {
   d4f8e:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d4f90:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d4f94:	bfc7      	ittee	gt
   d4f96:	4629      	movgt	r1, r5
   d4f98:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d4f9a:	462a      	movle	r2, r5
   d4f9c:	4621      	movle	r1, r4
   d4f9e:	4658      	mov	r0, fp
   d4fa0:	47c0      	blx	r8
    }
    err -= dy;
   d4fa2:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d4fa4:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d4fa6:	1ab6      	subs	r6, r6, r2
   d4fa8:	b2b1      	uxth	r1, r6
   d4faa:	b236      	sxth	r6, r6
    if (err < 0) {
   d4fac:	2e00      	cmp	r6, #0
   d4fae:	da05      	bge.n	d4fbc <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d4fb0:	9a02      	ldr	r2, [sp, #8]
   d4fb2:	4415      	add	r5, r2
      err += dx;
   d4fb4:	9a00      	ldr	r2, [sp, #0]
   d4fb6:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d4fb8:	b22d      	sxth	r5, r5
      err += dx;
   d4fba:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d4fbc:	3401      	adds	r4, #1
   d4fbe:	b224      	sxth	r4, r4
   d4fc0:	e7e0      	b.n	d4f84 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d4fc2:	b005      	add	sp, #20
   d4fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4fc8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4fc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fcc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4fd0:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d4fd2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4fd6:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d4fda:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4fdc:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d4fde:	4616      	mov	r6, r2
   d4fe0:	468a      	mov	sl, r1
   d4fe2:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d4fe4:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4fe6:	6823      	ldr	r3, [r4, #0]
   d4fe8:	f8cd 8000 	str.w	r8, [sp]
   d4fec:	f109 32ff 	add.w	r2, r9, #4294967295
   d4ff0:	4432      	add	r2, r6
   d4ff2:	69df      	ldr	r7, [r3, #28]
   d4ff4:	4651      	mov	r1, sl
   d4ff6:	462b      	mov	r3, r5
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	b212      	sxth	r2, r2
   d4ffc:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4ffe:	6823      	ldr	r3, [r4, #0]
   d5000:	f8cd 8000 	str.w	r8, [sp]
   d5004:	699f      	ldr	r7, [r3, #24]
   d5006:	4632      	mov	r2, r6
   d5008:	464b      	mov	r3, r9
   d500a:	4651      	mov	r1, sl
   d500c:	4620      	mov	r0, r4
   d500e:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5010:	1e6b      	subs	r3, r5, #1
   d5012:	eb03 010a 	add.w	r1, r3, sl
   d5016:	6823      	ldr	r3, [r4, #0]
   d5018:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d501c:	699d      	ldr	r5, [r3, #24]
   d501e:	4632      	mov	r2, r6
   d5020:	464b      	mov	r3, r9
   d5022:	b209      	sxth	r1, r1
   d5024:	4620      	mov	r0, r4
   d5026:	46ac      	mov	ip, r5
}
   d5028:	b002      	add	sp, #8
   d502a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d502e:	4760      	bx	ip

000d5030 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5032:	3b01      	subs	r3, #1
   d5034:	4413      	add	r3, r2
   d5036:	6804      	ldr	r4, [r0, #0]
   d5038:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d503c:	9501      	str	r5, [sp, #4]
   d503e:	b21b      	sxth	r3, r3
   d5040:	9300      	str	r3, [sp, #0]
   d5042:	6964      	ldr	r4, [r4, #20]
   d5044:	460b      	mov	r3, r1
   d5046:	47a0      	blx	r4
}
   d5048:	b003      	add	sp, #12
   d504a:	bd30      	pop	{r4, r5, pc}

000d504c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d504c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d504e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5052:	6804      	ldr	r4, [r0, #0]
   d5054:	e9cd 2500 	strd	r2, r5, [sp]
   d5058:	3b01      	subs	r3, #1
   d505a:	440b      	add	r3, r1
   d505c:	6964      	ldr	r4, [r4, #20]
   d505e:	b21b      	sxth	r3, r3
   d5060:	47a0      	blx	r4
}
   d5062:	b003      	add	sp, #12
   d5064:	bd30      	pop	{r4, r5, pc}

000d5066 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5066:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d506a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d506e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5072:	4605      	mov	r5, r0
   d5074:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5076:	460c      	mov	r4, r1
   d5078:	18ce      	adds	r6, r1, r3
   d507a:	42b4      	cmp	r4, r6
   d507c:	da0b      	bge.n	d5096 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d507e:	682b      	ldr	r3, [r5, #0]
   d5080:	f8cd 8000 	str.w	r8, [sp]
   d5084:	699f      	ldr	r7, [r3, #24]
   d5086:	4621      	mov	r1, r4
   d5088:	464b      	mov	r3, r9
   d508a:	4652      	mov	r2, sl
   d508c:	4628      	mov	r0, r5
   d508e:	3401      	adds	r4, #1
   d5090:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d5092:	b224      	sxth	r4, r4
   d5094:	e7f1      	b.n	d507a <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d5096:	b002      	add	sp, #8
   d5098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d509c <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d509c:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d509e:	6802      	ldr	r2, [r0, #0]
   d50a0:	9101      	str	r1, [sp, #4]
   d50a2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d50a6:	9100      	str	r1, [sp, #0]
   d50a8:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d50aa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d50ae:	2200      	movs	r2, #0
   d50b0:	4611      	mov	r1, r2
   d50b2:	47a0      	blx	r4
}
   d50b4:	b002      	add	sp, #8
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d50b8:	4770      	bx	lr
	...

000d50bc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d50bc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d50be:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d50c0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d50c2:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d50c6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d50c8:	4d05      	ldr	r5, [pc, #20]	; (d50e0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d50ca:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d50cc:	2201      	movs	r2, #1
   d50ce:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d50d0:	6005      	str	r5, [r0, #0]
   d50d2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d50d4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d50d6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d50d8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d50da:	7682      	strb	r2, [r0, #26]
}
   d50dc:	bd30      	pop	{r4, r5, pc}
   d50de:	bf00      	nop
   d50e0:	000d740c 	.word	0x000d740c

000d50e4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d50e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50e8:	ed2d 8b02 	vpush	{d8}
   d50ec:	b08b      	sub	sp, #44	; 0x2c
   d50ee:	4606      	mov	r6, r0
   d50f0:	9103      	str	r1, [sp, #12]
   d50f2:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d50f6:	9105      	str	r1, [sp, #20]
   d50f8:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d50fc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d50fe:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5102:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5104:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5108:	4281      	cmp	r1, r0
   d510a:	dd51      	ble.n	d51b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d510c:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d5110:	4291      	cmp	r1, r2
   d5112:	dd4d      	ble.n	d51b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5114:	2106      	movs	r1, #6
   d5116:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d511a:	2c00      	cmp	r4, #0
   d511c:	dd48      	ble.n	d51b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d511e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d5122:	2c00      	cmp	r4, #0
   d5124:	dd44      	ble.n	d51b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d5126:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d512a:	9309      	str	r3, [sp, #36]	; 0x24
   d512c:	b293      	uxth	r3, r2
   d512e:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d5130:	2400      	movs	r4, #0
   d5132:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d5134:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d5136:	bf1c      	itt	ne
   d5138:	4b2d      	ldrne	r3, [pc, #180]	; (d51f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d513a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d513c:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d513e:	bf16      	itet	ne
   d5140:	191b      	addne	r3, r3, r4
      line = 0x0;
   d5142:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d5144:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d5146:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5148:	9a03      	ldr	r2, [sp, #12]
   d514a:	b2ab      	uxth	r3, r5
   d514c:	9308      	str	r3, [sp, #32]
   d514e:	fb04 f305 	mul.w	r3, r4, r5
   d5152:	fa13 f382 	uxtah	r3, r3, r2
   d5156:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d5158:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d515c:	ee08 3a10 	vmov	s16, r3
   d5160:	f04f 0800 	mov.w	r8, #0
   d5164:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d5168:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d516c:	9b02      	ldr	r3, [sp, #8]
   d516e:	07db      	lsls	r3, r3, #31
   d5170:	d52f      	bpl.n	d51d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5172:	2d01      	cmp	r5, #1
   d5174:	6833      	ldr	r3, [r6, #0]
   d5176:	d120      	bne.n	d51ba <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d5178:	9a04      	ldr	r2, [sp, #16]
   d517a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d517e:	9b05      	ldr	r3, [sp, #20]
   d5180:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d5182:	b212      	sxth	r2, r2
   d5184:	4651      	mov	r1, sl
   d5186:	4630      	mov	r0, r6
   d5188:	47d8      	blx	fp
      line >>= 1;
   d518a:	9b02      	ldr	r3, [sp, #8]
   d518c:	085b      	lsrs	r3, r3, #1
   d518e:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d5190:	9b08      	ldr	r3, [sp, #32]
   d5192:	f108 0801 	add.w	r8, r8, #1
   d5196:	441f      	add	r7, r3
   d5198:	f1b8 0f08 	cmp.w	r8, #8
   d519c:	b2bf      	uxth	r7, r7
   d519e:	d1e5      	bne.n	d516c <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d51a0:	9b07      	ldr	r3, [sp, #28]
   d51a2:	3b01      	subs	r3, #1
   d51a4:	3401      	adds	r4, #1
   d51a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d51aa:	b264      	sxtb	r4, r4
   d51ac:	9307      	str	r3, [sp, #28]
   d51ae:	d1c1      	bne.n	d5134 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d51b0:	b00b      	add	sp, #44	; 0x2c
   d51b2:	ecbd 8b02 	vpop	{d8}
   d51b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d51ba:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d51bc:	e9cd 9200 	strd	r9, r2, [sp]
   d51c0:	ee18 1a10 	vmov	r1, s16
   d51c4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d51c8:	b23a      	sxth	r2, r7
   d51ca:	464b      	mov	r3, r9
   d51cc:	4630      	mov	r0, r6
   d51ce:	47d8      	blx	fp
   d51d0:	e7db      	b.n	d518a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d51d2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d51d6:	4293      	cmp	r3, r2
   d51d8:	d0d7      	beq.n	d518a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d51da:	2d01      	cmp	r5, #1
   d51dc:	6833      	ldr	r3, [r6, #0]
   d51de:	d105      	bne.n	d51ec <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d51e0:	9a04      	ldr	r2, [sp, #16]
   d51e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d51e6:	9b06      	ldr	r3, [sp, #24]
   d51e8:	4442      	add	r2, r8
   d51ea:	e7ca      	b.n	d5182 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d51ec:	9a06      	ldr	r2, [sp, #24]
   d51ee:	e7e5      	b.n	d51bc <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d51f0:	000d6f08 	.word	0x000d6f08

000d51f4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d51f4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d51f6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d51f8:	b085      	sub	sp, #20
   d51fa:	4604      	mov	r4, r0
  if (c == '\n') {
   d51fc:	d107      	bne.n	d520e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d51fe:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d5200:	8a63      	ldrh	r3, [r4, #18]
   d5202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5206:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5208:	2300      	movs	r3, #0
   d520a:	8223      	strh	r3, [r4, #16]
   d520c:	e021      	b.n	d5252 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d520e:	290d      	cmp	r1, #13
   d5210:	d01f      	beq.n	d5252 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5212:	7e03      	ldrb	r3, [r0, #24]
   d5214:	9302      	str	r3, [sp, #8]
   d5216:	8ac3      	ldrh	r3, [r0, #22]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	8a83      	ldrh	r3, [r0, #20]
   d521c:	9300      	str	r3, [sp, #0]
   d521e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5222:	460b      	mov	r3, r1
   d5224:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5228:	f7ff ff5c 	bl	d50e4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d522c:	7e21      	ldrb	r1, [r4, #24]
   d522e:	8a23      	ldrh	r3, [r4, #16]
   d5230:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5234:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5238:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d523a:	b21b      	sxth	r3, r3
   d523c:	460a      	mov	r2, r1
   d523e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5240:	b138      	cbz	r0, d5252 <_ZN12Adafruit_GFX5writeEh+0x5e>
   d5242:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5246:	f06f 0505 	mvn.w	r5, #5
   d524a:	fb05 0101 	mla	r1, r5, r1, r0
   d524e:	428b      	cmp	r3, r1
   d5250:	dcd6      	bgt.n	d5200 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d5252:	2001      	movs	r0, #1
   d5254:	b005      	add	sp, #20
   d5256:	bd30      	pop	{r4, r5, pc}

000d5258 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d5258:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d525a:	8242      	strh	r2, [r0, #18]
}
   d525c:	4770      	bx	lr

000d525e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d525e:	2901      	cmp	r1, #1
   d5260:	bf38      	it	cc
   d5262:	2101      	movcc	r1, #1
   d5264:	7601      	strb	r1, [r0, #24]
}
   d5266:	4770      	bx	lr

000d5268 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d5268:	82c1      	strh	r1, [r0, #22]
   d526a:	8281      	strh	r1, [r0, #20]
}
   d526c:	4770      	bx	lr

000d526e <_ZN12Adafruit_GFX11getRotationEv>:
}
   d526e:	7e40      	ldrb	r0, [r0, #25]
   d5270:	4770      	bx	lr

000d5272 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d5272:	f001 0303 	and.w	r3, r1, #3
   d5276:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d527a:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   d527c:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   d527e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5282:	bf59      	ittee	pl
   d5284:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d5286:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   d5288:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d528a:	81c3      	strhmi	r3, [r0, #14]
}
   d528c:	4770      	bx	lr

000d528e <_ZN12Adafruit_GFX5widthEv>:
}
   d528e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5292:	4770      	bx	lr

000d5294 <_ZN12Adafruit_GFX6heightEv>:
}
   d5294:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5298:	4770      	bx	lr
	...

000d529c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <netdb_freeaddrinfo+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	689b      	ldr	r3, [r3, #8]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030268 	.word	0x00030268

000d52ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <netdb_getaddrinfo+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	68db      	ldr	r3, [r3, #12]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030268 	.word	0x00030268

000d52bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_Pin_Map+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	681b      	ldr	r3, [r3, #0]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003022c 	.word	0x0003022c

000d52cc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_Pin_Mode+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	689b      	ldr	r3, [r3, #8]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	0003022c 	.word	0x0003022c

000d52dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_Get_Pin_Mode+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	68db      	ldr	r3, [r3, #12]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003022c 	.word	0x0003022c

000d52ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_GPIO_Write+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	691b      	ldr	r3, [r3, #16]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003022c 	.word	0x0003022c

000d52fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_GPIO_Read+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	695b      	ldr	r3, [r3, #20]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003022c 	.word	0x0003022c

000d530c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_RNG_GetRandomNumber+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	685b      	ldr	r3, [r3, #4]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030218 	.word	0x00030218

000d531c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_Delay_Microseconds+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	68db      	ldr	r3, [r3, #12]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030218 	.word	0x00030218

000d532c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	695b      	ldr	r3, [r3, #20]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030218 	.word	0x00030218

000d533c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <os_mutex_recursive_create+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030248 	.word	0x00030248

000d534c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <os_mutex_recursive_destroy+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030248 	.word	0x00030248

000d535c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <inet_inet_ntop+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	695b      	ldr	r3, [r3, #20]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030264 	.word	0x00030264

000d536c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <hal_usart_init+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	681b      	ldr	r3, [r3, #0]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003023c 	.word	0x0003023c

000d537c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <hal_usart_write+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	68db      	ldr	r3, [r3, #12]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003023c 	.word	0x0003023c

000d538c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <hal_usart_available+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	691b      	ldr	r3, [r3, #16]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003023c 	.word	0x0003023c

000d539c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <hal_usart_read+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	695b      	ldr	r3, [r3, #20]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	0003023c 	.word	0x0003023c

000d53ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <hal_usart_peek+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	699b      	ldr	r3, [r3, #24]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	0003023c 	.word	0x0003023c

000d53bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <hal_usart_flush+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	69db      	ldr	r3, [r3, #28]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	0003023c 	.word	0x0003023c

000d53cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <hal_usart_is_enabled+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6a1b      	ldr	r3, [r3, #32]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	0003023c 	.word	0x0003023c

000d53dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <hal_usart_available_data_for_write+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	0003023c 	.word	0x0003023c

000d53ec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <hal_usart_begin_config+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	0003023c 	.word	0x0003023c

000d53fc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <hal_i2c_begin+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	68db      	ldr	r3, [r3, #12]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030228 	.word	0x00030228

000d540c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <hal_i2c_begin_transmission+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	699b      	ldr	r3, [r3, #24]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030228 	.word	0x00030228

000d541c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <hal_i2c_end_transmission+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	69db      	ldr	r3, [r3, #28]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030228 	.word	0x00030228

000d542c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <hal_i2c_write+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6a1b      	ldr	r3, [r3, #32]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030228 	.word	0x00030228

000d543c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <hal_i2c_available+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030228 	.word	0x00030228

000d544c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <hal_i2c_read+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030228 	.word	0x00030228

000d545c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <hal_i2c_peek+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030228 	.word	0x00030228

000d546c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <hal_i2c_flush+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030228 	.word	0x00030228

000d547c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <hal_i2c_is_enabled+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030228 	.word	0x00030228

000d548c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <hal_i2c_init+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030228 	.word	0x00030228

000d549c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <hal_i2c_request_ex+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030228 	.word	0x00030228

000d54ac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <hal_spi_begin+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	681b      	ldr	r3, [r3, #0]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030230 	.word	0x00030230

000d54bc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <hal_spi_set_bit_order+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	689b      	ldr	r3, [r3, #8]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030230 	.word	0x00030230

000d54cc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <hal_spi_set_data_mode+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	68db      	ldr	r3, [r3, #12]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	00030230 	.word	0x00030230

000d54dc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <hal_spi_set_clock_divider+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	691b      	ldr	r3, [r3, #16]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	00030230 	.word	0x00030230

000d54ec <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <hal_spi_transfer+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	695b      	ldr	r3, [r3, #20]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	00030230 	.word	0x00030230

000d54fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <hal_spi_init+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	69db      	ldr	r3, [r3, #28]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	00030230 	.word	0x00030230

000d550c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <hal_spi_is_enabled+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6a1b      	ldr	r3, [r3, #32]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030230 	.word	0x00030230

000d551c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <hal_spi_info+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030230 	.word	0x00030230

000d552c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <hal_spi_set_settings+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030230 	.word	0x00030230

000d553c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <hal_spi_acquire+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030230 	.word	0x00030230

000d554c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <hal_spi_release+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030230 	.word	0x00030230

000d555c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_USB_USART_Init+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	681b      	ldr	r3, [r3, #0]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	0003024c 	.word	0x0003024c

000d556c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_USB_USART_Begin+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	685b      	ldr	r3, [r3, #4]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003024c 	.word	0x0003024c

000d557c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_USB_USART_Available_Data+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	691b      	ldr	r3, [r3, #16]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003024c 	.word	0x0003024c

000d558c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	695b      	ldr	r3, [r3, #20]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003024c 	.word	0x0003024c

000d559c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_USB_USART_Receive_Data+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	699b      	ldr	r3, [r3, #24]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003024c 	.word	0x0003024c

000d55ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_USB_USART_Send_Data+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	69db      	ldr	r3, [r3, #28]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003024c 	.word	0x0003024c

000d55bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_USB_USART_Flush_Data+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	6a1b      	ldr	r3, [r3, #32]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	0003024c 	.word	0x0003024c

000d55cc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <panic_+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030260 	.word	0x00030260

000d55dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <set_system_mode+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	685b      	ldr	r3, [r3, #4]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030220 	.word	0x00030220

000d55ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <system_delay_ms+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	695b      	ldr	r3, [r3, #20]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030220 	.word	0x00030220

000d55fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b03      	ldr	r3, [pc, #12]	; (d560c <system_ctrl_set_app_request_handler+0x10>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5606:	9301      	str	r3, [sp, #4]
   d5608:	bd08      	pop	{r3, pc}
   d560a:	0000      	.short	0x0000
   d560c:	00030220 	.word	0x00030220

000d5610 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b03      	ldr	r3, [pc, #12]	; (d5620 <system_ctrl_set_result+0x10>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d561a:	9301      	str	r3, [sp, #4]
   d561c:	bd08      	pop	{r3, pc}
   d561e:	0000      	.short	0x0000
   d5620:	00030220 	.word	0x00030220

000d5624 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <network_connect+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	685b      	ldr	r3, [r3, #4]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030240 	.word	0x00030240

000d5634 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <network_connecting+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030240 	.word	0x00030240

000d5644 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <network_disconnect+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	68db      	ldr	r3, [r3, #12]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030240 	.word	0x00030240

000d5654 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_ready+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	691b      	ldr	r3, [r3, #16]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_on+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	695b      	ldr	r3, [r3, #20]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_off+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	699b      	ldr	r3, [r3, #24]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <network_listen+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	69db      	ldr	r3, [r3, #28]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030240 	.word	0x00030240

000d5694 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <network_listening+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6a1b      	ldr	r3, [r3, #32]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030240 	.word	0x00030240

000d56a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <network_set_listen_timeout+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030240 	.word	0x00030240

000d56b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <network_get_listen_timeout+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030240 	.word	0x00030240

000d56c4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <network_is_on+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030240 	.word	0x00030240

000d56d4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <network_is_off+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030240 	.word	0x00030240

000d56e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030244 	.word	0x00030244

000d56f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <malloc+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	681b      	ldr	r3, [r3, #0]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003021c 	.word	0x0003021c

000d5704 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <free+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	685b      	ldr	r3, [r3, #4]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003021c 	.word	0x0003021c

000d5714 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <vsnprintf+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003021c 	.word	0x0003021c

000d5724 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <newlib_impure_ptr_callback+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003021c 	.word	0x0003021c

000d5734 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5734:	2200      	movs	r2, #0
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	4611      	mov	r1, r2
   d573a:	f7ff bfab 	b.w	d5694 <network_listening>

000d573e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d573e:	2200      	movs	r2, #0
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	4611      	mov	r1, r2
   d5744:	f7ff bfb6 	b.w	d56b4 <network_get_listen_timeout>

000d5748 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5748:	6840      	ldr	r0, [r0, #4]
   d574a:	2200      	movs	r2, #0
   d574c:	f7ff bfaa 	b.w	d56a4 <network_set_listen_timeout>

000d5750 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	2200      	movs	r2, #0
   d5754:	f081 0101 	eor.w	r1, r1, #1
   d5758:	f7ff bf94 	b.w	d5684 <network_listen>

000d575c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d575c:	2300      	movs	r3, #0
   d575e:	6840      	ldr	r0, [r0, #4]
   d5760:	461a      	mov	r2, r3
   d5762:	4619      	mov	r1, r3
   d5764:	f7ff bf86 	b.w	d5674 <network_off>

000d5768 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5768:	2300      	movs	r3, #0
   d576a:	6840      	ldr	r0, [r0, #4]
   d576c:	461a      	mov	r2, r3
   d576e:	4619      	mov	r1, r3
   d5770:	f7ff bf78 	b.w	d5664 <network_on>

000d5774 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5774:	2200      	movs	r2, #0
   d5776:	6840      	ldr	r0, [r0, #4]
   d5778:	4611      	mov	r1, r2
   d577a:	f7ff bf6b 	b.w	d5654 <network_ready>

000d577e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d577e:	2200      	movs	r2, #0
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	4611      	mov	r1, r2
   d5784:	f7ff bf56 	b.w	d5634 <network_connecting>

000d5788 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5788:	6840      	ldr	r0, [r0, #4]
   d578a:	2200      	movs	r2, #0
   d578c:	2102      	movs	r1, #2
   d578e:	f7ff bf59 	b.w	d5644 <network_disconnect>

000d5792 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5792:	2300      	movs	r3, #0
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	461a      	mov	r2, r3
   d5798:	f7ff bf44 	b.w	d5624 <network_connect>

000d579c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d579c:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d579e:	2203      	movs	r2, #3
   d57a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d57a2:	4a02      	ldr	r2, [pc, #8]	; (d57ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d57a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d57a6:	4770      	bx	lr
   d57a8:	2003e648 	.word	0x2003e648
   d57ac:	000d7444 	.word	0x000d7444

000d57b0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d57b0:	2100      	movs	r1, #0
   d57b2:	f7ff bec3 	b.w	d553c <hal_spi_acquire>

000d57b6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d57b6:	2100      	movs	r1, #0
   d57b8:	f7ff bec8 	b.w	d554c <hal_spi_release>

000d57bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d57bc:	b510      	push	{r4, lr}
   d57be:	4604      	mov	r4, r0
   d57c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d57c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d57c4:	f7ff fe9a 	bl	d54fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d57c8:	2300      	movs	r3, #0
   d57ca:	6063      	str	r3, [r4, #4]
}
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}

000d57d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d57d0:	b510      	push	{r4, lr}
   d57d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d57d4:	7800      	ldrb	r0, [r0, #0]
   d57d6:	f7ff ffeb 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d57da:	b948      	cbnz	r0, d57f0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d57dc:	7820      	ldrb	r0, [r4, #0]
   d57de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d57e2:	f7ff fe63 	bl	d54ac <hal_spi_begin>
        unlock();
   d57e6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d57e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d57ec:	f7ff bfe3 	b.w	d57b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d57f0:	bd10      	pop	{r4, pc}

000d57f2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d57f2:	b513      	push	{r0, r1, r4, lr}
   d57f4:	4604      	mov	r4, r0
    if (!lock())
   d57f6:	7800      	ldrb	r0, [r0, #0]
{
   d57f8:	9101      	str	r1, [sp, #4]
    if (!lock())
   d57fa:	f7ff ffd9 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d57fe:	9901      	ldr	r1, [sp, #4]
   d5800:	b940      	cbnz	r0, d5814 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5802:	7820      	ldrb	r0, [r4, #0]
   d5804:	f7ff fe5a 	bl	d54bc <hal_spi_set_bit_order>
        unlock();
   d5808:	7820      	ldrb	r0, [r4, #0]
    }
}
   d580a:	b002      	add	sp, #8
   d580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5810:	f7ff bfd1 	b.w	d57b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5814:	b002      	add	sp, #8
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5818:	b513      	push	{r0, r1, r4, lr}
   d581a:	4604      	mov	r4, r0
    if (!lock())
   d581c:	7800      	ldrb	r0, [r0, #0]
{
   d581e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5820:	f7ff ffc6 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d5824:	9901      	ldr	r1, [sp, #4]
   d5826:	b940      	cbnz	r0, d583a <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5828:	7820      	ldrb	r0, [r4, #0]
   d582a:	f7ff fe4f 	bl	d54cc <hal_spi_set_data_mode>
        unlock();
   d582e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5830:	b002      	add	sp, #8
   d5832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5836:	f7ff bfbe 	b.w	d57b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d583a:	b002      	add	sp, #8
   d583c:	bd10      	pop	{r4, pc}

000d583e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d583e:	7800      	ldrb	r0, [r0, #0]
   d5840:	f7ff bfb9 	b.w	d57b6 <_ZN8SPIClass6unlockEv.isra.0>

000d5844 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5844:	0840      	lsrs	r0, r0, #1
{
   d5846:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5848:	6018      	str	r0, [r3, #0]
   d584a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d584c:	6818      	ldr	r0, [r3, #0]
   d584e:	4288      	cmp	r0, r1
   d5850:	b2e5      	uxtb	r5, r4
   d5852:	d906      	bls.n	d5862 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5854:	3401      	adds	r4, #1
   d5856:	2c08      	cmp	r4, #8
   d5858:	d002      	beq.n	d5860 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d585a:	0840      	lsrs	r0, r0, #1
   d585c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d585e:	e7f5      	b.n	d584c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5860:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5864:	5d5b      	ldrb	r3, [r3, r5]
   d5866:	7013      	strb	r3, [r2, #0]
}
   d5868:	bd30      	pop	{r4, r5, pc}
   d586a:	bf00      	nop
   d586c:	000d7478 	.word	0x000d7478

000d5870 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5874:	4606      	mov	r6, r0
   d5876:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5878:	7800      	ldrb	r0, [r0, #0]
{
   d587a:	460c      	mov	r4, r1
    CHECK(lock());
   d587c:	f7ff ff98 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d5880:	2800      	cmp	r0, #0
   d5882:	db1b      	blt.n	d58bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5884:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5886:	2214      	movs	r2, #20
   d5888:	2100      	movs	r1, #0
   d588a:	a809      	add	r0, sp, #36	; 0x24
   d588c:	f001 fa8c 	bl	d6da8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5890:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5892:	2200      	movs	r2, #0
   d5894:	a909      	add	r1, sp, #36	; 0x24
   d5896:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5898:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d589c:	f7ff fe3e 	bl	d551c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d58a0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d58a4:	b113      	cbz	r3, d58ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d58a6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d58aa:	b155      	cbz	r5, d58c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d58ac:	2700      	movs	r7, #0
   d58ae:	46b9      	mov	r9, r7
   d58b0:	46b8      	mov	r8, r7
   d58b2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d58b4:	7923      	ldrb	r3, [r4, #4]
   d58b6:	b15d      	cbz	r5, d58d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d58b8:	b1c3      	cbz	r3, d58ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d58ba:	2000      	movs	r0, #0
}
   d58bc:	b00f      	add	sp, #60	; 0x3c
   d58be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d58c2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d58c6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d58ca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d58ce:	e7f1      	b.n	d58b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d58d0:	2b00      	cmp	r3, #0
   d58d2:	d135      	bne.n	d5940 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d58d4:	68a3      	ldr	r3, [r4, #8]
   d58d6:	4543      	cmp	r3, r8
   d58d8:	d108      	bne.n	d58ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d58da:	f88d 9020 	strb.w	r9, [sp, #32]
   d58de:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d58e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d58e6:	89a3      	ldrh	r3, [r4, #12]
   d58e8:	429a      	cmp	r2, r3
   d58ea:	d0e6      	beq.n	d58ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d58ec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d58ee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d58f0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d58f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d58f6:	ab04      	add	r3, sp, #16
   d58f8:	f10d 020f 	add.w	r2, sp, #15
   d58fc:	f7ff ffa2 	bl	d5844 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5900:	7921      	ldrb	r1, [r4, #4]
   d5902:	b985      	cbnz	r5, d5926 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5904:	b989      	cbnz	r1, d592a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5906:	68a3      	ldr	r3, [r4, #8]
   d5908:	4543      	cmp	r3, r8
   d590a:	d30e      	bcc.n	d592a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d590c:	f88d 9020 	strb.w	r9, [sp, #32]
   d5910:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5914:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5918:	89a3      	ldrh	r3, [r4, #12]
   d591a:	429a      	cmp	r2, r3
   d591c:	d105      	bne.n	d592a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d591e:	9b04      	ldr	r3, [sp, #16]
   d5920:	4543      	cmp	r3, r8
   d5922:	d102      	bne.n	d592a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5924:	e7c9      	b.n	d58ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5926:	2900      	cmp	r1, #0
   d5928:	d1f9      	bne.n	d591e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d592a:	2300      	movs	r3, #0
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	7b63      	ldrb	r3, [r4, #13]
   d5930:	9300      	str	r3, [sp, #0]
   d5932:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5936:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5938:	7830      	ldrb	r0, [r6, #0]
   d593a:	f7ff fdf7 	bl	d552c <hal_spi_set_settings>
   d593e:	e7bc      	b.n	d58ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5940:	e9cd 5500 	strd	r5, r5, [sp]
   d5944:	462b      	mov	r3, r5
   d5946:	462a      	mov	r2, r5
   d5948:	2101      	movs	r1, #1
   d594a:	e7f5      	b.n	d5938 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d594c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5950:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5952:	2300      	movs	r3, #0
{
   d5954:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5956:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5958:	9302      	str	r3, [sp, #8]
{
   d595a:	460e      	mov	r6, r1
   d595c:	4617      	mov	r7, r2
    if (!lock())
   d595e:	f7ff ff27 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d5962:	4605      	mov	r5, r0
   d5964:	bb00      	cbnz	r0, d59a8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5966:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d596a:	4601      	mov	r1, r0
   d596c:	2214      	movs	r2, #20
   d596e:	a803      	add	r0, sp, #12
   d5970:	f001 fa1a 	bl	d6da8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5974:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5976:	462a      	mov	r2, r5
   d5978:	a903      	add	r1, sp, #12
   d597a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d597c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5980:	f7ff fdcc 	bl	d551c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5984:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5986:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d598a:	ab02      	add	r3, sp, #8
   d598c:	f10d 0207 	add.w	r2, sp, #7
   d5990:	fb07 f106 	mul.w	r1, r7, r6
   d5994:	f7ff ff56 	bl	d5844 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5998:	7820      	ldrb	r0, [r4, #0]
   d599a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d599e:	f7ff fd9d 	bl	d54dc <hal_spi_set_clock_divider>
        unlock();
   d59a2:	7820      	ldrb	r0, [r4, #0]
   d59a4:	f7ff ff07 	bl	d57b6 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d59a8:	9802      	ldr	r0, [sp, #8]
   d59aa:	b008      	add	sp, #32
   d59ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d59b0 <_ZN8SPIClass15setClockDividerEh>:
{
   d59b0:	b538      	push	{r3, r4, r5, lr}
   d59b2:	4604      	mov	r4, r0
    if (!lock())
   d59b4:	7800      	ldrb	r0, [r0, #0]
{
   d59b6:	460d      	mov	r5, r1
    if (!lock())
   d59b8:	f7ff fefa 	bl	d57b0 <_ZN8SPIClass4lockEv.isra.0>
   d59bc:	4603      	mov	r3, r0
   d59be:	b9d0      	cbnz	r0, d59f6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d59c0:	6861      	ldr	r1, [r4, #4]
   d59c2:	b199      	cbz	r1, d59ec <_ZN8SPIClass15setClockDividerEh+0x3c>
   d59c4:	4a0c      	ldr	r2, [pc, #48]	; (d59f8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d59c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d59ca:	4285      	cmp	r5, r0
   d59cc:	d002      	beq.n	d59d4 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d59ce:	3301      	adds	r3, #1
   d59d0:	2b08      	cmp	r3, #8
   d59d2:	d1f8      	bne.n	d59c6 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d59d4:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d59d6:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d59d8:	2201      	movs	r2, #1
   d59da:	40d9      	lsrs	r1, r3
   d59dc:	4620      	mov	r0, r4
   d59de:	f7ff ffb5 	bl	d594c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d59e2:	7820      	ldrb	r0, [r4, #0]
}
   d59e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d59e8:	f7ff bee5 	b.w	d57b6 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d59ec:	7820      	ldrb	r0, [r4, #0]
   d59ee:	4629      	mov	r1, r5
   d59f0:	f7ff fd74 	bl	d54dc <hal_spi_set_clock_divider>
   d59f4:	e7f5      	b.n	d59e2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d59f6:	bd38      	pop	{r3, r4, r5, pc}
   d59f8:	000d7478 	.word	0x000d7478

000d59fc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d59fc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d59fe:	7800      	ldrb	r0, [r0, #0]
   d5a00:	f7ff fd74 	bl	d54ec <hal_spi_transfer>
}
   d5a04:	b2c0      	uxtb	r0, r0
   d5a06:	bd08      	pop	{r3, pc}

000d5a08 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a08:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5a0a:	4b09      	ldr	r3, [pc, #36]	; (d5a30 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a0c:	4c09      	ldr	r4, [pc, #36]	; (d5a34 <_GLOBAL__sub_I_System+0x2c>)
   d5a0e:	2202      	movs	r2, #2
   d5a10:	2000      	movs	r0, #0
   d5a12:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5a14:	4b08      	ldr	r3, [pc, #32]	; (d5a38 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5a16:	6020      	str	r0, [r4, #0]
   d5a18:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5a1a:	71a0      	strb	r0, [r4, #6]
   d5a1c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a1e:	f7ff fddd 	bl	d55dc <set_system_mode>
SystemClass System;
   d5a22:	4620      	mov	r0, r4
   d5a24:	4a05      	ldr	r2, [pc, #20]	; (d5a3c <_GLOBAL__sub_I_System+0x34>)
   d5a26:	4906      	ldr	r1, [pc, #24]	; (d5a40 <_GLOBAL__sub_I_System+0x38>)
   d5a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5a2c:	f000 bd74 	b.w	d6518 <__aeabi_atexit>
   d5a30:	2003e65c 	.word	0x2003e65c
   d5a34:	2003e650 	.word	0x2003e650
   d5a38:	ffff0000 	.word	0xffff0000
   d5a3c:	2003e5b8 	.word	0x2003e5b8
   d5a40:	000d40c3 	.word	0x000d40c3

000d5a44 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5a44:	b510      	push	{r4, lr}
   d5a46:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5a48:	6800      	ldr	r0, [r0, #0]
   d5a4a:	b108      	cbz	r0, d5a50 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5a4c:	f7ff fc7e 	bl	d534c <os_mutex_recursive_destroy>
    }
   d5a50:	4620      	mov	r0, r4
   d5a52:	bd10      	pop	{r4, pc}

000d5a54 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a54:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a56:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5a58:	4604      	mov	r4, r0
      if (_M_manager)
   d5a5a:	b113      	cbz	r3, d5a62 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a5c:	2203      	movs	r2, #3
   d5a5e:	4601      	mov	r1, r0
   d5a60:	4798      	blx	r3
    }
   d5a62:	4620      	mov	r0, r4
   d5a64:	bd10      	pop	{r4, pc}
	...

000d5a68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5a68:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5a6a:	4c06      	ldr	r4, [pc, #24]	; (d5a84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a6c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5a6e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5a70:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5a72:	f7ff fc63 	bl	d533c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5a76:	4620      	mov	r0, r4
   d5a78:	4a03      	ldr	r2, [pc, #12]	; (d5a88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a7a:	4904      	ldr	r1, [pc, #16]	; (d5a8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5a80:	f000 bd4a 	b.w	d6518 <__aeabi_atexit>
   d5a84:	2003e660 	.word	0x2003e660
   d5a88:	2003e5b8 	.word	0x2003e5b8
   d5a8c:	000d5a45 	.word	0x000d5a45

000d5a90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a92:	4606      	mov	r6, r0
   d5a94:	460d      	mov	r5, r1
  size_t n = 0;
   d5a96:	188f      	adds	r7, r1, r2
   d5a98:	2400      	movs	r4, #0
  while (size--) {
   d5a9a:	42bd      	cmp	r5, r7
   d5a9c:	d00c      	beq.n	d5ab8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a9e:	6833      	ldr	r3, [r6, #0]
   d5aa0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5aa4:	689b      	ldr	r3, [r3, #8]
   d5aa6:	4630      	mov	r0, r6
   d5aa8:	4798      	blx	r3
     if (chunk>=0)
   d5aaa:	1e03      	subs	r3, r0, #0
   d5aac:	db01      	blt.n	d5ab2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5aae:	441c      	add	r4, r3
  while (size--) {
   d5ab0:	e7f3      	b.n	d5a9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ab2:	2c00      	cmp	r4, #0
   d5ab4:	bf08      	it	eq
   d5ab6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5abc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5abc:	b513      	push	{r0, r1, r4, lr}
   d5abe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5ac0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5ac2:	b159      	cbz	r1, d5adc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5ac4:	9101      	str	r1, [sp, #4]
   d5ac6:	f001 f99b 	bl	d6e00 <strlen>
   d5aca:	6823      	ldr	r3, [r4, #0]
   d5acc:	9901      	ldr	r1, [sp, #4]
   d5ace:	68db      	ldr	r3, [r3, #12]
   d5ad0:	4602      	mov	r2, r0
   d5ad2:	4620      	mov	r0, r4
    }
   d5ad4:	b002      	add	sp, #8
   d5ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5ada:	4718      	bx	r3
    }
   d5adc:	b002      	add	sp, #8
   d5ade:	bd10      	pop	{r4, pc}

000d5ae0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5ae0:	b508      	push	{r3, lr}
  return write(str);
   d5ae2:	f7ff ffeb 	bl	d5abc <_ZN5Print5writeEPKc>
}
   d5ae6:	bd08      	pop	{r3, pc}

000d5ae8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5ae8:	6803      	ldr	r3, [r0, #0]
   d5aea:	689b      	ldr	r3, [r3, #8]
   d5aec:	4718      	bx	r3

000d5aee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5aee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5af0:	210d      	movs	r1, #13
{
   d5af2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5af4:	f7ff fff8 	bl	d5ae8 <_ZN5Print5printEc>
  n += print('\n');
   d5af8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5afa:	4604      	mov	r4, r0
  n += print('\n');
   d5afc:	4628      	mov	r0, r5
   d5afe:	f7ff fff3 	bl	d5ae8 <_ZN5Print5printEc>
  return n;
}
   d5b02:	4420      	add	r0, r4
   d5b04:	bd38      	pop	{r3, r4, r5, pc}

000d5b06 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5b06:	b538      	push	{r3, r4, r5, lr}
   d5b08:	4605      	mov	r5, r0
  return write(str);
   d5b0a:	f7ff ffd7 	bl	d5abc <_ZN5Print5writeEPKc>
   d5b0e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5b10:	4628      	mov	r0, r5
   d5b12:	f7ff ffec 	bl	d5aee <_ZN5Print7printlnEv>
  return n;
}
   d5b16:	4420      	add	r0, r4
   d5b18:	bd38      	pop	{r3, r4, r5, pc}

000d5b1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5b1a:	b530      	push	{r4, r5, lr}
   d5b1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5b1e:	2300      	movs	r3, #0
   d5b20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5b24:	2a01      	cmp	r2, #1
   d5b26:	bf98      	it	ls
   d5b28:	220a      	movls	r2, #10
   d5b2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5b2c:	460d      	mov	r5, r1
   d5b2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5b32:	fb01 5312 	mls	r3, r1, r2, r5
   d5b36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b3a:	2b09      	cmp	r3, #9
   d5b3c:	bf94      	ite	ls
   d5b3e:	3330      	addls	r3, #48	; 0x30
   d5b40:	3337      	addhi	r3, #55	; 0x37
   d5b42:	b2db      	uxtb	r3, r3
  } while(n);
   d5b44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5b4a:	d9ef      	bls.n	d5b2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5b4c:	4621      	mov	r1, r4
   d5b4e:	f7ff ffb5 	bl	d5abc <_ZN5Print5writeEPKc>
}
   d5b52:	b00b      	add	sp, #44	; 0x2c
   d5b54:	bd30      	pop	{r4, r5, pc}

000d5b56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b5a:	b086      	sub	sp, #24
   d5b5c:	af00      	add	r7, sp, #0
   d5b5e:	4605      	mov	r5, r0
   d5b60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5b62:	1d38      	adds	r0, r7, #4
   d5b64:	2114      	movs	r1, #20
{
   d5b66:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5b68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5b6a:	f7ff fdd3 	bl	d5714 <vsnprintf>

    if (n<bufsize)
   d5b6e:	2813      	cmp	r0, #19
   d5b70:	d80e      	bhi.n	d5b90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5b72:	1d39      	adds	r1, r7, #4
   d5b74:	4628      	mov	r0, r5
   d5b76:	f7ff ffa1 	bl	d5abc <_ZN5Print5writeEPKc>
   d5b7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5b7c:	b11e      	cbz	r6, d5b86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5b7e:	4628      	mov	r0, r5
   d5b80:	f7ff ffb5 	bl	d5aee <_ZN5Print7printlnEv>
   d5b84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5b86:	4620      	mov	r0, r4
   d5b88:	3718      	adds	r7, #24
   d5b8a:	46bd      	mov	sp, r7
   d5b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5b90:	f100 0308 	add.w	r3, r0, #8
   d5b94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5b98:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5b9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5b9e:	4622      	mov	r2, r4
   d5ba0:	1c41      	adds	r1, r0, #1
   d5ba2:	683b      	ldr	r3, [r7, #0]
   d5ba4:	4668      	mov	r0, sp
   d5ba6:	f7ff fdb5 	bl	d5714 <vsnprintf>
  return write(str);
   d5baa:	4669      	mov	r1, sp
   d5bac:	4628      	mov	r0, r5
   d5bae:	f7ff ff85 	bl	d5abc <_ZN5Print5writeEPKc>
   d5bb2:	4604      	mov	r4, r0
   d5bb4:	46c5      	mov	sp, r8
   d5bb6:	e7e1      	b.n	d5b7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5bb8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5bb8:	2300      	movs	r3, #0
   d5bba:	6840      	ldr	r0, [r0, #4]
   d5bbc:	461a      	mov	r2, r3
   d5bbe:	4619      	mov	r1, r3
   d5bc0:	f7ff bd50 	b.w	d5664 <network_on>

000d5bc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5bc4:	4b01      	ldr	r3, [pc, #4]	; (d5bcc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5bc6:	4a02      	ldr	r2, [pc, #8]	; (d5bd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5bc8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5bca:	4770      	bx	lr
   d5bcc:	2003e664 	.word	0x2003e664
   d5bd0:	000d7480 	.word	0x000d7480

000d5bd4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5bd4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5bd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5be0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5be2:	d411      	bmi.n	d5c08 <_ZN9TimeClass4zoneEf+0x34>
   d5be4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5be8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5bf0:	dc0a      	bgt.n	d5c08 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5bf2:	eddf 7a06 	vldr	s15, [pc, #24]	; d5c0c <_ZN9TimeClass4zoneEf+0x38>
   d5bf6:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5bfa:	ee17 0a90 	vmov	r0, s15
   d5bfe:	f001 f883 	bl	d6d08 <__aeabi_f2lz>
   d5c02:	4b03      	ldr	r3, [pc, #12]	; (d5c10 <_ZN9TimeClass4zoneEf+0x3c>)
   d5c04:	e9c3 0100 	strd	r0, r1, [r3]
}
   d5c08:	bd08      	pop	{r3, pc}
   d5c0a:	bf00      	nop
   d5c0c:	45610000 	.word	0x45610000
   d5c10:	2003e670 	.word	0x2003e670

000d5c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c14:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c1a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5c1c:	4770      	bx	lr
   d5c1e:	bf00      	nop
   d5c20:	2003e54c 	.word	0x2003e54c
   d5c24:	2003e668 	.word	0x2003e668

000d5c28 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5c28:	2100      	movs	r1, #0
   d5c2a:	f7ff bcdf 	b.w	d55ec <system_delay_ms>

000d5c2e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5c2e:	b510      	push	{r4, lr}
   d5c30:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c32:	f7ff ff0f 	bl	d5a54 <_ZNSt14_Function_baseD1Ev>
   d5c36:	4620      	mov	r0, r4
   d5c38:	bd10      	pop	{r4, pc}
	...

000d5c3c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5c3c:	4803      	ldr	r0, [pc, #12]	; (d5c4c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5c3e:	4a04      	ldr	r2, [pc, #16]	; (d5c50 <_GLOBAL__sub_I_RGB+0x14>)
   d5c40:	4904      	ldr	r1, [pc, #16]	; (d5c54 <_GLOBAL__sub_I_RGB+0x18>)
   d5c42:	2300      	movs	r3, #0
   d5c44:	6083      	str	r3, [r0, #8]
   d5c46:	f000 bc67 	b.w	d6518 <__aeabi_atexit>
   d5c4a:	bf00      	nop
   d5c4c:	2003e678 	.word	0x2003e678
   d5c50:	2003e5b8 	.word	0x2003e5b8
   d5c54:	000d5c2f 	.word	0x000d5c2f

000d5c58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5c58:	4b01      	ldr	r3, [pc, #4]	; (d5c60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5c5a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5c5c:	4770      	bx	lr
   d5c5e:	bf00      	nop
   d5c60:	2003e550 	.word	0x2003e550

000d5c64 <serialEventRun>:
{
   d5c64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c66:	4b0b      	ldr	r3, [pc, #44]	; (d5c94 <serialEventRun+0x30>)
   d5c68:	b143      	cbz	r3, d5c7c <serialEventRun+0x18>
   d5c6a:	f000 f95b 	bl	d5f24 <_Z16_fetch_usbserialv>
   d5c6e:	6803      	ldr	r3, [r0, #0]
   d5c70:	691b      	ldr	r3, [r3, #16]
   d5c72:	4798      	blx	r3
   d5c74:	2800      	cmp	r0, #0
   d5c76:	dd01      	ble.n	d5c7c <serialEventRun+0x18>
        serialEvent();
   d5c78:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5c7c:	4b06      	ldr	r3, [pc, #24]	; (d5c98 <serialEventRun+0x34>)
   d5c7e:	b143      	cbz	r3, d5c92 <serialEventRun+0x2e>
   d5c80:	f000 f9d6 	bl	d6030 <_Z22__fetch_global_Serial1v>
   d5c84:	6803      	ldr	r3, [r0, #0]
   d5c86:	691b      	ldr	r3, [r3, #16]
   d5c88:	4798      	blx	r3
   d5c8a:	2800      	cmp	r0, #0
   d5c8c:	dd01      	ble.n	d5c92 <serialEventRun+0x2e>
        serialEvent1();
   d5c8e:	f3af 8000 	nop.w
}
   d5c92:	bd08      	pop	{r3, pc}
	...

000d5c9c <_post_loop>:
{
   d5c9c:	b508      	push	{r3, lr}
	serialEventRun();
   d5c9e:	f7ff ffe1 	bl	d5c64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ca2:	f7ff fb43 	bl	d532c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ca6:	4b01      	ldr	r3, [pc, #4]	; (d5cac <_post_loop+0x10>)
   d5ca8:	6018      	str	r0, [r3, #0]
}
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	2003e7d8 	.word	0x2003e7d8

000d5cb0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5cb0:	4802      	ldr	r0, [pc, #8]	; (d5cbc <_Z33system_initialize_user_backup_ramv+0xc>)
   d5cb2:	4a03      	ldr	r2, [pc, #12]	; (d5cc0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5cb4:	4903      	ldr	r1, [pc, #12]	; (d5cc4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5cb6:	1a12      	subs	r2, r2, r0
   d5cb8:	f001 b868 	b.w	d6d8c <memcpy>
   d5cbc:	2003f400 	.word	0x2003f400
   d5cc0:	2003f404 	.word	0x2003f404
   d5cc4:	000d75e0 	.word	0x000d75e0

000d5cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5cc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	9300      	str	r3, [sp, #0]
   d5cce:	461a      	mov	r2, r3
   d5cd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cd4:	f7ff fc9c 	bl	d5610 <system_ctrl_set_result>
}
   d5cd8:	b003      	add	sp, #12
   d5cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ce0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5ce0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5ce2:	8843      	ldrh	r3, [r0, #2]
   d5ce4:	2b0a      	cmp	r3, #10
   d5ce6:	d008      	beq.n	d5cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ce8:	2b50      	cmp	r3, #80	; 0x50
   d5cea:	d10b      	bne.n	d5d04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5cec:	4b09      	ldr	r3, [pc, #36]	; (d5d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5cee:	681b      	ldr	r3, [r3, #0]
   d5cf0:	b14b      	cbz	r3, d5d06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5cf2:	b003      	add	sp, #12
   d5cf4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5cf8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5cfa:	f7ff ffe5 	bl	d5cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5cfe:	b003      	add	sp, #12
   d5d00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d04:	2300      	movs	r3, #0
   d5d06:	9300      	str	r3, [sp, #0]
   d5d08:	461a      	mov	r2, r3
   d5d0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d0e:	f7ff fc7f 	bl	d5610 <system_ctrl_set_result>
}
   d5d12:	e7f4      	b.n	d5cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5d14:	2003e68c 	.word	0x2003e68c

000d5d18 <module_user_init_hook>:
{
   d5d18:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5d1a:	4c12      	ldr	r4, [pc, #72]	; (d5d64 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5d1c:	4812      	ldr	r0, [pc, #72]	; (d5d68 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5d1e:	4d13      	ldr	r5, [pc, #76]	; (d5d6c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5d20:	2100      	movs	r1, #0
   d5d22:	f7ff fcff 	bl	d5724 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5d26:	6823      	ldr	r3, [r4, #0]
   d5d28:	42ab      	cmp	r3, r5
   d5d2a:	4b11      	ldr	r3, [pc, #68]	; (d5d70 <module_user_init_hook+0x58>)
   d5d2c:	bf0c      	ite	eq
   d5d2e:	2201      	moveq	r2, #1
   d5d30:	2200      	movne	r2, #0
   d5d32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5d34:	d002      	beq.n	d5d3c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5d36:	f7ff ffbb 	bl	d5cb0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5d3a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d3c:	f7ff fae6 	bl	d530c <HAL_RNG_GetRandomNumber>
   d5d40:	4604      	mov	r4, r0
    srand(seed);
   d5d42:	f001 f839 	bl	d6db8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d46:	4b0b      	ldr	r3, [pc, #44]	; (d5d74 <module_user_init_hook+0x5c>)
   d5d48:	b113      	cbz	r3, d5d50 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d50:	2100      	movs	r1, #0
   d5d52:	4808      	ldr	r0, [pc, #32]	; (d5d74 <module_user_init_hook+0x5c>)
   d5d54:	f7ff fcc6 	bl	d56e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d5c:	4806      	ldr	r0, [pc, #24]	; (d5d78 <module_user_init_hook+0x60>)
   d5d5e:	2100      	movs	r1, #0
   d5d60:	f7ff bc4c 	b.w	d55fc <system_ctrl_set_app_request_handler>
   d5d64:	2003f400 	.word	0x2003f400
   d5d68:	000d5c59 	.word	0x000d5c59
   d5d6c:	9a271c1e 	.word	0x9a271c1e
   d5d70:	2003e688 	.word	0x2003e688
   d5d74:	00000000 	.word	0x00000000
   d5d78:	000d5ce1 	.word	0x000d5ce1

000d5d7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d7c:	4770      	bx	lr

000d5d7e <_ZN9IPAddressD0Ev>:
   d5d7e:	b510      	push	{r4, lr}
   d5d80:	2118      	movs	r1, #24
   d5d82:	4604      	mov	r4, r0
   d5d84:	f000 fbcd 	bl	d6522 <_ZdlPvj>
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bd10      	pop	{r4, pc}

000d5d8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d8e:	7d03      	ldrb	r3, [r0, #20]
   d5d90:	2b06      	cmp	r3, #6
{
   d5d92:	b08d      	sub	sp, #52	; 0x34
   d5d94:	460e      	mov	r6, r1
   d5d96:	f100 0704 	add.w	r7, r0, #4
   d5d9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5d9e:	d012      	beq.n	d5dc6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5da0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5da8:	220a      	movs	r2, #10
   d5daa:	4630      	mov	r0, r6
   d5dac:	f7ff feb5 	bl	d5b1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5db0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5db2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5db4:	d019      	beq.n	d5dea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5db6:	2c00      	cmp	r4, #0
   d5db8:	d0f4      	beq.n	d5da4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5dba:	212e      	movs	r1, #46	; 0x2e
   d5dbc:	4630      	mov	r0, r6
   d5dbe:	f7ff fe93 	bl	d5ae8 <_ZN5Print5printEc>
   d5dc2:	4404      	add	r4, r0
   d5dc4:	e7ee      	b.n	d5da4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dc6:	232f      	movs	r3, #47	; 0x2f
   d5dc8:	466a      	mov	r2, sp
   d5dca:	4639      	mov	r1, r7
   d5dcc:	200a      	movs	r0, #10
		buf[0] = 0;
   d5dce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dd2:	f7ff fac3 	bl	d535c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5dd6:	4668      	mov	r0, sp
   d5dd8:	f001 f812 	bl	d6e00 <strlen>
   d5ddc:	6833      	ldr	r3, [r6, #0]
   d5dde:	4602      	mov	r2, r0
   d5de0:	68db      	ldr	r3, [r3, #12]
   d5de2:	4669      	mov	r1, sp
   d5de4:	4630      	mov	r0, r6
   d5de6:	4798      	blx	r3
   d5de8:	4604      	mov	r4, r0
    }
    return n;
}
   d5dea:	4620      	mov	r0, r4
   d5dec:	b00d      	add	sp, #52	; 0x34
   d5dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5df0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5df0:	b510      	push	{r4, lr}
   d5df2:	4b05      	ldr	r3, [pc, #20]	; (d5e08 <_ZN9IPAddressC1Ev+0x18>)
   d5df4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5df6:	2211      	movs	r2, #17
   d5df8:	f840 3b04 	str.w	r3, [r0], #4
   d5dfc:	2100      	movs	r1, #0
   d5dfe:	f000 ffd3 	bl	d6da8 <memset>
}
   d5e02:	4620      	mov	r0, r4
   d5e04:	bd10      	pop	{r4, pc}
   d5e06:	bf00      	nop
   d5e08:	000d74a8 	.word	0x000d74a8

000d5e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e0c:	4603      	mov	r3, r0
   d5e0e:	4a07      	ldr	r2, [pc, #28]	; (d5e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e10:	b510      	push	{r4, lr}
   d5e12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5e16:	f101 0210 	add.w	r2, r1, #16
   d5e1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e1e:	f843 4b04 	str.w	r4, [r3], #4
   d5e22:	4291      	cmp	r1, r2
   d5e24:	d1f9      	bne.n	d5e1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e26:	780a      	ldrb	r2, [r1, #0]
   d5e28:	701a      	strb	r2, [r3, #0]
}
   d5e2a:	bd10      	pop	{r4, pc}
   d5e2c:	000d74a8 	.word	0x000d74a8

000d5e30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5e30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e42:	2304      	movs	r3, #4
   d5e44:	6041      	str	r1, [r0, #4]
   d5e46:	7503      	strb	r3, [r0, #20]
}
   d5e48:	bd10      	pop	{r4, pc}
	...

000d5e4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5e4c:	b513      	push	{r0, r1, r4, lr}
   d5e4e:	4b05      	ldr	r3, [pc, #20]	; (d5e64 <_ZN9IPAddressC1EPKh+0x18>)
   d5e50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5e52:	78cb      	ldrb	r3, [r1, #3]
   d5e54:	9300      	str	r3, [sp, #0]
   d5e56:	788b      	ldrb	r3, [r1, #2]
   d5e58:	784a      	ldrb	r2, [r1, #1]
   d5e5a:	7809      	ldrb	r1, [r1, #0]
   d5e5c:	f7ff ffe8 	bl	d5e30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e60:	b002      	add	sp, #8
   d5e62:	bd10      	pop	{r4, pc}
   d5e64:	000d74a8 	.word	0x000d74a8

000d5e68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e68:	7441      	strb	r1, [r0, #17]
}
   d5e6a:	4770      	bx	lr

000d5e6c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e6c:	4770      	bx	lr

000d5e6e <_ZN9USBSerial4readEv>:
{
   d5e6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5e70:	2100      	movs	r1, #0
   d5e72:	7c00      	ldrb	r0, [r0, #16]
   d5e74:	f7ff fb92 	bl	d559c <HAL_USB_USART_Receive_Data>
}
   d5e78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e7c:	bd08      	pop	{r3, pc}

000d5e7e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5e7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5e80:	2101      	movs	r1, #1
   d5e82:	7c00      	ldrb	r0, [r0, #16]
   d5e84:	f7ff fb8a 	bl	d559c <HAL_USB_USART_Receive_Data>
}
   d5e88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e8c:	bd08      	pop	{r3, pc}

000d5e8e <_ZN9USBSerial17availableForWriteEv>:
{
   d5e8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e90:	7c00      	ldrb	r0, [r0, #16]
   d5e92:	f7ff fb7b 	bl	d558c <HAL_USB_USART_Available_Data_For_Write>
}
   d5e96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e9a:	bd08      	pop	{r3, pc}

000d5e9c <_ZN9USBSerial9availableEv>:
{
   d5e9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e9e:	7c00      	ldrb	r0, [r0, #16]
   d5ea0:	f7ff fb6c 	bl	d557c <HAL_USB_USART_Available_Data>
}
   d5ea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ea8:	bd08      	pop	{r3, pc}

000d5eaa <_ZN9USBSerial5writeEh>:
{
   d5eaa:	b513      	push	{r0, r1, r4, lr}
   d5eac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eae:	7c00      	ldrb	r0, [r0, #16]
{
   d5eb0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eb2:	f7ff fb6b 	bl	d558c <HAL_USB_USART_Available_Data_For_Write>
   d5eb6:	2800      	cmp	r0, #0
   d5eb8:	9901      	ldr	r1, [sp, #4]
   d5eba:	dc01      	bgt.n	d5ec0 <_ZN9USBSerial5writeEh+0x16>
   d5ebc:	7c60      	ldrb	r0, [r4, #17]
   d5ebe:	b120      	cbz	r0, d5eca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5ec0:	7c20      	ldrb	r0, [r4, #16]
   d5ec2:	f7ff fb73 	bl	d55ac <HAL_USB_USART_Send_Data>
   d5ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5eca:	b002      	add	sp, #8
   d5ecc:	bd10      	pop	{r4, pc}

000d5ece <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ece:	7c00      	ldrb	r0, [r0, #16]
   d5ed0:	f7ff bb74 	b.w	d55bc <HAL_USB_USART_Flush_Data>

000d5ed4 <_ZN9USBSerialD0Ev>:
   d5ed4:	b510      	push	{r4, lr}
   d5ed6:	2114      	movs	r1, #20
   d5ed8:	4604      	mov	r4, r0
   d5eda:	f000 fb22 	bl	d6522 <_ZdlPvj>
   d5ede:	4620      	mov	r0, r4
   d5ee0:	bd10      	pop	{r4, pc}
	...

000d5ee4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ee4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5eea:	4604      	mov	r4, r0
   d5eec:	4608      	mov	r0, r1
   d5eee:	2100      	movs	r1, #0
   d5ef0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5ef4:	4b04      	ldr	r3, [pc, #16]	; (d5f08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ef6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5ef8:	2301      	movs	r3, #1
  _serial = serial;
   d5efa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5efc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5efe:	4611      	mov	r1, r2
   d5f00:	f7ff fb2c 	bl	d555c <HAL_USB_USART_Init>
}
   d5f04:	4620      	mov	r0, r4
   d5f06:	bd10      	pop	{r4, pc}
   d5f08:	000d74bc 	.word	0x000d74bc

000d5f0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f0c:	7c00      	ldrb	r0, [r0, #16]
   d5f0e:	2200      	movs	r2, #0
   d5f10:	f7ff bb2c 	b.w	d556c <HAL_USB_USART_Begin>

000d5f14 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f16:	2214      	movs	r2, #20
{
   d5f18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f1a:	2100      	movs	r1, #0
   d5f1c:	f000 ff44 	bl	d6da8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f20:	4620      	mov	r0, r4
   d5f22:	bd10      	pop	{r4, pc}

000d5f24 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f26:	4c10      	ldr	r4, [pc, #64]	; (d5f68 <_Z16_fetch_usbserialv+0x44>)
{
   d5f28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f2a:	a803      	add	r0, sp, #12
   d5f2c:	f7ff fff2 	bl	d5f14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f30:	7821      	ldrb	r1, [r4, #0]
   d5f32:	f3bf 8f5b 	dmb	ish
   d5f36:	f011 0101 	ands.w	r1, r1, #1
   d5f3a:	d111      	bne.n	d5f60 <_Z16_fetch_usbserialv+0x3c>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	9101      	str	r1, [sp, #4]
   d5f40:	f7fe f8b6 	bl	d40b0 <__cxa_guard_acquire>
   d5f44:	9901      	ldr	r1, [sp, #4]
   d5f46:	b158      	cbz	r0, d5f60 <_Z16_fetch_usbserialv+0x3c>
   d5f48:	aa03      	add	r2, sp, #12
   d5f4a:	4808      	ldr	r0, [pc, #32]	; (d5f6c <_Z16_fetch_usbserialv+0x48>)
   d5f4c:	f7ff ffca 	bl	d5ee4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f50:	4620      	mov	r0, r4
   d5f52:	f7fe f8b2 	bl	d40ba <__cxa_guard_release>
   d5f56:	4a06      	ldr	r2, [pc, #24]	; (d5f70 <_Z16_fetch_usbserialv+0x4c>)
   d5f58:	4906      	ldr	r1, [pc, #24]	; (d5f74 <_Z16_fetch_usbserialv+0x50>)
   d5f5a:	4804      	ldr	r0, [pc, #16]	; (d5f6c <_Z16_fetch_usbserialv+0x48>)
   d5f5c:	f000 fadc 	bl	d6518 <__aeabi_atexit>
	return _usbserial;
}
   d5f60:	4802      	ldr	r0, [pc, #8]	; (d5f6c <_Z16_fetch_usbserialv+0x48>)
   d5f62:	b008      	add	sp, #32
   d5f64:	bd10      	pop	{r4, pc}
   d5f66:	bf00      	nop
   d5f68:	2003e690 	.word	0x2003e690
   d5f6c:	2003e694 	.word	0x2003e694
   d5f70:	2003e5b8 	.word	0x2003e5b8
   d5f74:	000d5e6d 	.word	0x000d5e6d

000d5f78 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5f78:	4770      	bx	lr

000d5f7a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f7a:	7441      	strb	r1, [r0, #17]
}
   d5f7c:	4770      	bx	lr

000d5f7e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5f7e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5f80:	7c00      	ldrb	r0, [r0, #16]
   d5f82:	f7ff fa2b 	bl	d53dc <hal_usart_available_data_for_write>
}
   d5f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f8a:	bd08      	pop	{r3, pc}

000d5f8c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5f8c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5f8e:	7c00      	ldrb	r0, [r0, #16]
   d5f90:	f7ff f9fc 	bl	d538c <hal_usart_available>
}
   d5f94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f98:	bd08      	pop	{r3, pc}

000d5f9a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5f9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5f9c:	7c00      	ldrb	r0, [r0, #16]
   d5f9e:	f7ff fa05 	bl	d53ac <hal_usart_peek>
}
   d5fa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fa6:	bd08      	pop	{r3, pc}

000d5fa8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5fa8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5faa:	7c00      	ldrb	r0, [r0, #16]
   d5fac:	f7ff f9f6 	bl	d539c <hal_usart_read>
}
   d5fb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fb4:	bd08      	pop	{r3, pc}

000d5fb6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5fb6:	7c00      	ldrb	r0, [r0, #16]
   d5fb8:	f7ff ba00 	b.w	d53bc <hal_usart_flush>

000d5fbc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fbe:	7c45      	ldrb	r5, [r0, #17]
{
   d5fc0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fc2:	b12d      	cbz	r5, d5fd0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5fc4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5fc6:	b003      	add	sp, #12
   d5fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5fcc:	f7ff b9d6 	b.w	d537c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fd0:	7c00      	ldrb	r0, [r0, #16]
   d5fd2:	9101      	str	r1, [sp, #4]
   d5fd4:	f7ff fa02 	bl	d53dc <hal_usart_available_data_for_write>
   d5fd8:	2800      	cmp	r0, #0
   d5fda:	9901      	ldr	r1, [sp, #4]
   d5fdc:	dcf2      	bgt.n	d5fc4 <_ZN11USARTSerial5writeEh+0x8>
}
   d5fde:	4628      	mov	r0, r5
   d5fe0:	b003      	add	sp, #12
   d5fe2:	bd30      	pop	{r4, r5, pc}

000d5fe4 <_ZN11USARTSerialD0Ev>:
   d5fe4:	b510      	push	{r4, lr}
   d5fe6:	2114      	movs	r1, #20
   d5fe8:	4604      	mov	r4, r0
   d5fea:	f000 fa9a 	bl	d6522 <_ZdlPvj>
   d5fee:	4620      	mov	r0, r4
   d5ff0:	bd10      	pop	{r4, pc}
	...

000d5ff4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5ff4:	b510      	push	{r4, lr}
   d5ff6:	f04f 0c00 	mov.w	ip, #0
   d5ffa:	4604      	mov	r4, r0
   d5ffc:	4608      	mov	r0, r1
   d5ffe:	4611      	mov	r1, r2
   d6000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6004:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6008:	4a04      	ldr	r2, [pc, #16]	; (d601c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d600a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d600c:	2201      	movs	r2, #1
  _serial = serial;
   d600e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6010:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6012:	461a      	mov	r2, r3
   d6014:	f7ff f9aa 	bl	d536c <hal_usart_init>
}
   d6018:	4620      	mov	r0, r4
   d601a:	bd10      	pop	{r4, pc}
   d601c:	000d74ec 	.word	0x000d74ec

000d6020 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6020:	7c00      	ldrb	r0, [r0, #16]
   d6022:	2300      	movs	r3, #0
   d6024:	f7ff b9e2 	b.w	d53ec <hal_usart_begin_config>

000d6028 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6028:	2200      	movs	r2, #0
   d602a:	f7ff bff9 	b.w	d6020 <_ZN11USARTSerial5beginEmm>
	...

000d6030 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6030:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6032:	4c0e      	ldr	r4, [pc, #56]	; (d606c <_Z22__fetch_global_Serial1v+0x3c>)
   d6034:	7821      	ldrb	r1, [r4, #0]
   d6036:	f3bf 8f5b 	dmb	ish
   d603a:	f011 0101 	ands.w	r1, r1, #1
   d603e:	d112      	bne.n	d6066 <_Z22__fetch_global_Serial1v+0x36>
   d6040:	4620      	mov	r0, r4
   d6042:	9101      	str	r1, [sp, #4]
   d6044:	f7fe f834 	bl	d40b0 <__cxa_guard_acquire>
   d6048:	9901      	ldr	r1, [sp, #4]
   d604a:	b160      	cbz	r0, d6066 <_Z22__fetch_global_Serial1v+0x36>
   d604c:	4a08      	ldr	r2, [pc, #32]	; (d6070 <_Z22__fetch_global_Serial1v+0x40>)
   d604e:	4b09      	ldr	r3, [pc, #36]	; (d6074 <_Z22__fetch_global_Serial1v+0x44>)
   d6050:	4809      	ldr	r0, [pc, #36]	; (d6078 <_Z22__fetch_global_Serial1v+0x48>)
   d6052:	f7ff ffcf 	bl	d5ff4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6056:	4620      	mov	r0, r4
   d6058:	f7fe f82f 	bl	d40ba <__cxa_guard_release>
   d605c:	4a07      	ldr	r2, [pc, #28]	; (d607c <_Z22__fetch_global_Serial1v+0x4c>)
   d605e:	4908      	ldr	r1, [pc, #32]	; (d6080 <_Z22__fetch_global_Serial1v+0x50>)
   d6060:	4805      	ldr	r0, [pc, #20]	; (d6078 <_Z22__fetch_global_Serial1v+0x48>)
   d6062:	f000 fa59 	bl	d6518 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6066:	4804      	ldr	r0, [pc, #16]	; (d6078 <_Z22__fetch_global_Serial1v+0x48>)
   d6068:	b002      	add	sp, #8
   d606a:	bd10      	pop	{r4, pc}
   d606c:	2003e6a8 	.word	0x2003e6a8
   d6070:	2003e6ac 	.word	0x2003e6ac
   d6074:	2003e730 	.word	0x2003e730
   d6078:	2003e7b4 	.word	0x2003e7b4
   d607c:	2003e5b8 	.word	0x2003e5b8
   d6080:	000d5f79 	.word	0x000d5f79

000d6084 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6084:	4770      	bx	lr

000d6086 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6088:	4606      	mov	r6, r0
   d608a:	4615      	mov	r5, r2
   d608c:	460c      	mov	r4, r1
   d608e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6090:	42bc      	cmp	r4, r7
   d6092:	d006      	beq.n	d60a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6094:	6833      	ldr	r3, [r6, #0]
   d6096:	f814 1b01 	ldrb.w	r1, [r4], #1
   d609a:	689b      	ldr	r3, [r3, #8]
   d609c:	4630      	mov	r0, r6
   d609e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d60a0:	e7f6      	b.n	d6090 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d60a2:	4628      	mov	r0, r5
   d60a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60a6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d60a6:	7c00      	ldrb	r0, [r0, #16]
   d60a8:	2200      	movs	r2, #0
   d60aa:	f7ff b9bf 	b.w	d542c <hal_i2c_write>

000d60ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d60ae:	7c00      	ldrb	r0, [r0, #16]
   d60b0:	2100      	movs	r1, #0
   d60b2:	f7ff b9c3 	b.w	d543c <hal_i2c_available>

000d60b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d60b6:	7c00      	ldrb	r0, [r0, #16]
   d60b8:	2100      	movs	r1, #0
   d60ba:	f7ff b9c7 	b.w	d544c <hal_i2c_read>

000d60be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d60be:	7c00      	ldrb	r0, [r0, #16]
   d60c0:	2100      	movs	r1, #0
   d60c2:	f7ff b9cb 	b.w	d545c <hal_i2c_peek>

000d60c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d60c6:	7c00      	ldrb	r0, [r0, #16]
   d60c8:	2100      	movs	r1, #0
   d60ca:	f7ff b9cf 	b.w	d546c <hal_i2c_flush>

000d60ce <_ZN7TwoWireD0Ev>:
   d60ce:	b510      	push	{r4, lr}
   d60d0:	2114      	movs	r1, #20
   d60d2:	4604      	mov	r4, r0
   d60d4:	f000 fa25 	bl	d6522 <_ZdlPvj>
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}

000d60dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d60dc:	b510      	push	{r4, lr}
   d60de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60e2:	4604      	mov	r4, r0
   d60e4:	4608      	mov	r0, r1
   d60e6:	2100      	movs	r1, #0
   d60e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d60ec:	4b03      	ldr	r3, [pc, #12]	; (d60fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d60ee:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d60f0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d60f2:	4611      	mov	r1, r2
   d60f4:	f7ff f9ca 	bl	d548c <hal_i2c_init>
}
   d60f8:	4620      	mov	r0, r4
   d60fa:	bd10      	pop	{r4, pc}
   d60fc:	000d751c 	.word	0x000d751c

000d6100 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6100:	2300      	movs	r3, #0
   d6102:	7c00      	ldrb	r0, [r0, #16]
   d6104:	461a      	mov	r2, r3
   d6106:	4619      	mov	r1, r3
   d6108:	f7ff b978 	b.w	d53fc <hal_i2c_begin>

000d610c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d610c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d610e:	2200      	movs	r2, #0
   d6110:	2314      	movs	r3, #20
   d6112:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6116:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d611a:	780b      	ldrb	r3, [r1, #0]
   d611c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6120:	684b      	ldr	r3, [r1, #4]
   d6122:	9303      	str	r3, [sp, #12]
   d6124:	68cb      	ldr	r3, [r1, #12]
   d6126:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6128:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d612a:	7a0b      	ldrb	r3, [r1, #8]
   d612c:	9305      	str	r3, [sp, #20]
   d612e:	a901      	add	r1, sp, #4
   d6130:	f7ff f9b4 	bl	d549c <hal_i2c_request_ex>
}
   d6134:	b007      	add	sp, #28
   d6136:	f85d fb04 	ldr.w	pc, [sp], #4

000d613a <_ZN7TwoWire11requestFromEhjh>:
{
   d613a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d613c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d613e:	f88d 1000 	strb.w	r1, [sp]
   d6142:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6146:	9103      	str	r1, [sp, #12]
   d6148:	bf18      	it	ne
   d614a:	2301      	movne	r3, #1
   d614c:	4669      	mov	r1, sp
    size_ = size;
   d614e:	9201      	str	r2, [sp, #4]
   d6150:	f88d 3008 	strb.w	r3, [sp, #8]
   d6154:	f7ff ffda 	bl	d610c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6158:	b005      	add	sp, #20
   d615a:	f85d fb04 	ldr.w	pc, [sp], #4

000d615e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d615e:	2301      	movs	r3, #1
   d6160:	f7ff bfeb 	b.w	d613a <_ZN7TwoWire11requestFromEhjh>

000d6164 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6164:	7c00      	ldrb	r0, [r0, #16]
   d6166:	2200      	movs	r2, #0
   d6168:	f7ff b950 	b.w	d540c <hal_i2c_begin_transmission>

000d616c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d616c:	b2c9      	uxtb	r1, r1
   d616e:	f7ff bff9 	b.w	d6164 <_ZN7TwoWire17beginTransmissionEh>

000d6172 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6172:	7c00      	ldrb	r0, [r0, #16]
   d6174:	2200      	movs	r2, #0
   d6176:	f7ff b951 	b.w	d541c <hal_i2c_end_transmission>

000d617a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d617a:	2101      	movs	r1, #1
   d617c:	f7ff bff9 	b.w	d6172 <_ZN7TwoWire15endTransmissionEh>

000d6180 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6180:	2200      	movs	r2, #0
   d6182:	6840      	ldr	r0, [r0, #4]
   d6184:	4611      	mov	r1, r2
   d6186:	f7ff ba65 	b.w	d5654 <network_ready>

000d618a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d618a:	2200      	movs	r2, #0
   d618c:	6840      	ldr	r0, [r0, #4]
   d618e:	4611      	mov	r1, r2
   d6190:	f7ff ba80 	b.w	d5694 <network_listening>

000d6194 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6194:	2200      	movs	r2, #0
   d6196:	6840      	ldr	r0, [r0, #4]
   d6198:	4611      	mov	r1, r2
   d619a:	f7ff ba8b 	b.w	d56b4 <network_get_listen_timeout>

000d619e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d619e:	6840      	ldr	r0, [r0, #4]
   d61a0:	2200      	movs	r2, #0
   d61a2:	f7ff ba7f 	b.w	d56a4 <network_set_listen_timeout>

000d61a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d61a6:	6840      	ldr	r0, [r0, #4]
   d61a8:	2200      	movs	r2, #0
   d61aa:	f081 0101 	eor.w	r1, r1, #1
   d61ae:	f7ff ba69 	b.w	d5684 <network_listen>

000d61b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61b2:	2300      	movs	r3, #0
   d61b4:	6840      	ldr	r0, [r0, #4]
   d61b6:	461a      	mov	r2, r3
   d61b8:	4619      	mov	r1, r3
   d61ba:	f7ff ba5b 	b.w	d5674 <network_off>

000d61be <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d61be:	2200      	movs	r2, #0
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	4611      	mov	r1, r2
   d61c4:	f7ff ba36 	b.w	d5634 <network_connecting>

000d61c8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61c8:	6840      	ldr	r0, [r0, #4]
   d61ca:	2200      	movs	r2, #0
   d61cc:	2102      	movs	r1, #2
   d61ce:	f7ff ba39 	b.w	d5644 <network_disconnect>

000d61d2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d61d2:	2300      	movs	r3, #0
   d61d4:	6840      	ldr	r0, [r0, #4]
   d61d6:	461a      	mov	r2, r3
   d61d8:	f7ff ba24 	b.w	d5624 <network_connect>

000d61dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d61dc:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d61de:	2204      	movs	r2, #4
   d61e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d61e2:	4a02      	ldr	r2, [pc, #8]	; (d61ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d61e4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d61e6:	4770      	bx	lr
   d61e8:	2003e7c8 	.word	0x2003e7c8
   d61ec:	000d7544 	.word	0x000d7544

000d61f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61f0:	2300      	movs	r3, #0
   d61f2:	6840      	ldr	r0, [r0, #4]
   d61f4:	461a      	mov	r2, r3
   d61f6:	f7ff ba15 	b.w	d5624 <network_connect>

000d61fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61fa:	6840      	ldr	r0, [r0, #4]
   d61fc:	2200      	movs	r2, #0
   d61fe:	2102      	movs	r1, #2
   d6200:	f7ff ba20 	b.w	d5644 <network_disconnect>

000d6204 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6204:	2200      	movs	r2, #0
   d6206:	6840      	ldr	r0, [r0, #4]
   d6208:	4611      	mov	r1, r2
   d620a:	f7ff ba13 	b.w	d5634 <network_connecting>

000d620e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d620e:	2200      	movs	r2, #0
   d6210:	6840      	ldr	r0, [r0, #4]
   d6212:	4611      	mov	r1, r2
   d6214:	f7ff ba1e 	b.w	d5654 <network_ready>

000d6218 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6218:	2300      	movs	r3, #0
   d621a:	6840      	ldr	r0, [r0, #4]
   d621c:	461a      	mov	r2, r3
   d621e:	4619      	mov	r1, r3
   d6220:	f7ff ba20 	b.w	d5664 <network_on>

000d6224 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6224:	2300      	movs	r3, #0
   d6226:	6840      	ldr	r0, [r0, #4]
   d6228:	461a      	mov	r2, r3
   d622a:	4619      	mov	r1, r3
   d622c:	f7ff ba22 	b.w	d5674 <network_off>

000d6230 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6230:	6840      	ldr	r0, [r0, #4]
   d6232:	2100      	movs	r1, #0
   d6234:	f7ff ba46 	b.w	d56c4 <network_is_on>

000d6238 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6238:	6840      	ldr	r0, [r0, #4]
   d623a:	2100      	movs	r1, #0
   d623c:	f7ff ba4a 	b.w	d56d4 <network_is_off>

000d6240 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6240:	6840      	ldr	r0, [r0, #4]
   d6242:	2200      	movs	r2, #0
   d6244:	f081 0101 	eor.w	r1, r1, #1
   d6248:	f7ff ba1c 	b.w	d5684 <network_listen>

000d624c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d624c:	6840      	ldr	r0, [r0, #4]
   d624e:	2200      	movs	r2, #0
   d6250:	f7ff ba28 	b.w	d56a4 <network_set_listen_timeout>

000d6254 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6254:	2200      	movs	r2, #0
   d6256:	6840      	ldr	r0, [r0, #4]
   d6258:	4611      	mov	r1, r2
   d625a:	f7ff ba2b 	b.w	d56b4 <network_get_listen_timeout>

000d625e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d625e:	2200      	movs	r2, #0
   d6260:	6840      	ldr	r0, [r0, #4]
   d6262:	4611      	mov	r1, r2
   d6264:	f7ff ba16 	b.w	d5694 <network_listening>

000d6268 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d626c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d626e:	b095      	sub	sp, #84	; 0x54
   d6270:	4616      	mov	r6, r2
   d6272:	460d      	mov	r5, r1
   d6274:	4607      	mov	r7, r0
    IPAddress addr;
   d6276:	f7ff fdbb 	bl	d5df0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d627a:	4621      	mov	r1, r4
   d627c:	2218      	movs	r2, #24
   d627e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6280:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6282:	f000 fd91 	bl	d6da8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6286:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6288:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d628c:	4621      	mov	r1, r4
   d628e:	466b      	mov	r3, sp
   d6290:	aa0c      	add	r2, sp, #48	; 0x30
   d6292:	4630      	mov	r0, r6
   d6294:	f7ff f80a 	bl	d52ac <netdb_getaddrinfo>
    if (!r) {
   d6298:	4604      	mov	r4, r0
   d629a:	2800      	cmp	r0, #0
   d629c:	d14c      	bne.n	d6338 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d629e:	4602      	mov	r2, r0
   d62a0:	2101      	movs	r1, #1
   d62a2:	6868      	ldr	r0, [r5, #4]
   d62a4:	f7ff f9d6 	bl	d5654 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62ac:	4622      	mov	r2, r4
   d62ae:	6868      	ldr	r0, [r5, #4]
   d62b0:	f7ff f9d0 	bl	d5654 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62b6:	4681      	mov	r9, r0
        bool ok = false;
   d62b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62ba:	2e00      	cmp	r6, #0
   d62bc:	d03c      	beq.n	d6338 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d62be:	2900      	cmp	r1, #0
   d62c0:	d13a      	bne.n	d6338 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d62c2:	6873      	ldr	r3, [r6, #4]
   d62c4:	2b02      	cmp	r3, #2
   d62c6:	d003      	beq.n	d62d0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d62c8:	2b0a      	cmp	r3, #10
   d62ca:	d011      	beq.n	d62f0 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62cc:	69f6      	ldr	r6, [r6, #28]
   d62ce:	e7f4      	b.n	d62ba <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d62d0:	f1b8 0f00 	cmp.w	r8, #0
   d62d4:	d00a      	beq.n	d62ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d62d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d62d8:	a806      	add	r0, sp, #24
   d62da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d62dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d62de:	f7ff fdb5 	bl	d5e4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d62e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62e4:	1d3c      	adds	r4, r7, #4
   d62e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62e8:	682b      	ldr	r3, [r5, #0]
   d62ea:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d62ec:	4641      	mov	r1, r8
   d62ee:	e7ed      	b.n	d62cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d62f0:	f1b9 0f00 	cmp.w	r9, #0
   d62f4:	d101      	bne.n	d62fa <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d62f6:	4649      	mov	r1, r9
   d62f8:	e7e8      	b.n	d62cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62fc:	2210      	movs	r2, #16
   d62fe:	a801      	add	r0, sp, #4
   d6300:	f000 fd52 	bl	d6da8 <memset>
                    a.v = 6;
   d6304:	2306      	movs	r3, #6
   d6306:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d630a:	ad01      	add	r5, sp, #4
   d630c:	f104 0308 	add.w	r3, r4, #8
   d6310:	3418      	adds	r4, #24
   d6312:	6818      	ldr	r0, [r3, #0]
   d6314:	6859      	ldr	r1, [r3, #4]
   d6316:	462a      	mov	r2, r5
   d6318:	c203      	stmia	r2!, {r0, r1}
   d631a:	3308      	adds	r3, #8
   d631c:	42a3      	cmp	r3, r4
   d631e:	4615      	mov	r5, r2
   d6320:	d1f7      	bne.n	d6312 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6322:	a901      	add	r1, sp, #4
   d6324:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6326:	ad07      	add	r5, sp, #28
   d6328:	f7ff fd70 	bl	d5e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d632c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d632e:	1d3c      	adds	r4, r7, #4
   d6330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6332:	682b      	ldr	r3, [r5, #0]
   d6334:	7023      	strb	r3, [r4, #0]
   d6336:	e7de      	b.n	d62f6 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6338:	9800      	ldr	r0, [sp, #0]
   d633a:	f7fe ffaf 	bl	d529c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d633e:	4638      	mov	r0, r7
   d6340:	b015      	add	sp, #84	; 0x54
   d6342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6348:	4b02      	ldr	r3, [pc, #8]	; (d6354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d634a:	4a03      	ldr	r2, [pc, #12]	; (d6358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d634c:	601a      	str	r2, [r3, #0]
   d634e:	2200      	movs	r2, #0
   d6350:	605a      	str	r2, [r3, #4]

} // spark
   d6352:	4770      	bx	lr
   d6354:	2003e7d0 	.word	0x2003e7d0
   d6358:	000d7580 	.word	0x000d7580

000d635c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d635c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d635e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6360:	d902      	bls.n	d6368 <pinAvailable+0xc>
    return false;
   d6362:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6364:	b002      	add	sp, #8
   d6366:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6368:	f1a0 030b 	sub.w	r3, r0, #11
   d636c:	2b02      	cmp	r3, #2
   d636e:	d81a      	bhi.n	d63a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6370:	4c17      	ldr	r4, [pc, #92]	; (d63d0 <pinAvailable+0x74>)
   d6372:	7821      	ldrb	r1, [r4, #0]
   d6374:	f3bf 8f5b 	dmb	ish
   d6378:	f011 0101 	ands.w	r1, r1, #1
   d637c:	d10b      	bne.n	d6396 <pinAvailable+0x3a>
   d637e:	4620      	mov	r0, r4
   d6380:	9101      	str	r1, [sp, #4]
   d6382:	f7fd fe95 	bl	d40b0 <__cxa_guard_acquire>
   d6386:	9901      	ldr	r1, [sp, #4]
   d6388:	b128      	cbz	r0, d6396 <pinAvailable+0x3a>
   d638a:	4812      	ldr	r0, [pc, #72]	; (d63d4 <pinAvailable+0x78>)
   d638c:	f7ff fa16 	bl	d57bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6390:	4620      	mov	r0, r4
   d6392:	f7fd fe92 	bl	d40ba <__cxa_guard_release>
   d6396:	4b0f      	ldr	r3, [pc, #60]	; (d63d4 <pinAvailable+0x78>)
   d6398:	7818      	ldrb	r0, [r3, #0]
   d639a:	f7ff f8b7 	bl	d550c <hal_spi_is_enabled>
   d639e:	2800      	cmp	r0, #0
   d63a0:	d1df      	bne.n	d6362 <pinAvailable+0x6>
  return true; // 'pin' is available
   d63a2:	2001      	movs	r0, #1
   d63a4:	e7de      	b.n	d6364 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d63a6:	2801      	cmp	r0, #1
   d63a8:	d809      	bhi.n	d63be <pinAvailable+0x62>
   d63aa:	f000 f88d 	bl	d64c8 <_Z19__fetch_global_Wirev>
   d63ae:	2100      	movs	r1, #0
   d63b0:	7c00      	ldrb	r0, [r0, #16]
   d63b2:	f7ff f863 	bl	d547c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d63b6:	f080 0001 	eor.w	r0, r0, #1
   d63ba:	b2c0      	uxtb	r0, r0
   d63bc:	e7d2      	b.n	d6364 <pinAvailable+0x8>
   d63be:	3809      	subs	r0, #9
   d63c0:	2801      	cmp	r0, #1
   d63c2:	d8ee      	bhi.n	d63a2 <pinAvailable+0x46>
   d63c4:	f7ff fe34 	bl	d6030 <_Z22__fetch_global_Serial1v>
   d63c8:	7c00      	ldrb	r0, [r0, #16]
   d63ca:	f7fe ffff 	bl	d53cc <hal_usart_is_enabled>
   d63ce:	e7f2      	b.n	d63b6 <pinAvailable+0x5a>
   d63d0:	2003e638 	.word	0x2003e638
   d63d4:	2003e63c 	.word	0x2003e63c

000d63d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63d8:	2823      	cmp	r0, #35	; 0x23
{
   d63da:	b538      	push	{r3, r4, r5, lr}
   d63dc:	4604      	mov	r4, r0
   d63de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63e0:	d80a      	bhi.n	d63f8 <pinMode+0x20>
   d63e2:	29ff      	cmp	r1, #255	; 0xff
   d63e4:	d008      	beq.n	d63f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d63e6:	f7ff ffb9 	bl	d635c <pinAvailable>
   d63ea:	b128      	cbz	r0, d63f8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d63ec:	4629      	mov	r1, r5
   d63ee:	4620      	mov	r0, r4
}
   d63f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d63f4:	f7fe bf6a 	b.w	d52cc <HAL_Pin_Mode>
}
   d63f8:	bd38      	pop	{r3, r4, r5, pc}

000d63fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63fa:	b538      	push	{r3, r4, r5, lr}
   d63fc:	4604      	mov	r4, r0
   d63fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6400:	f7fe ff6c 	bl	d52dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6404:	28ff      	cmp	r0, #255	; 0xff
   d6406:	d010      	beq.n	d642a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6408:	2806      	cmp	r0, #6
   d640a:	d804      	bhi.n	d6416 <digitalWrite+0x1c>
   d640c:	234d      	movs	r3, #77	; 0x4d
   d640e:	fa23 f000 	lsr.w	r0, r3, r0
   d6412:	07c3      	lsls	r3, r0, #31
   d6414:	d409      	bmi.n	d642a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6416:	4620      	mov	r0, r4
   d6418:	f7ff ffa0 	bl	d635c <pinAvailable>
   d641c:	b128      	cbz	r0, d642a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d641e:	4629      	mov	r1, r5
   d6420:	4620      	mov	r0, r4
}
   d6422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6426:	f7fe bf61 	b.w	d52ec <HAL_GPIO_Write>
}
   d642a:	bd38      	pop	{r3, r4, r5, pc}

000d642c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d642c:	b510      	push	{r4, lr}
   d642e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6430:	f7fe ff54 	bl	d52dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6434:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6436:	b2db      	uxtb	r3, r3
   d6438:	2b01      	cmp	r3, #1
   d643a:	d908      	bls.n	d644e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d643c:	4620      	mov	r0, r4
   d643e:	f7ff ff8d 	bl	d635c <pinAvailable>
   d6442:	b120      	cbz	r0, d644e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6444:	4620      	mov	r0, r4
}
   d6446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d644a:	f7fe bf57 	b.w	d52fc <HAL_GPIO_Read>
}
   d644e:	2000      	movs	r0, #0
   d6450:	bd10      	pop	{r4, pc}

000d6452 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6456:	4690      	mov	r8, r2
   d6458:	461f      	mov	r7, r3
   d645a:	2400      	movs	r4, #0
   d645c:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d645e:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d6460:	f1b8 0f00 	cmp.w	r8, #0
   d6464:	d113      	bne.n	d648e <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6466:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d646a:	f001 0101 	and.w	r1, r1, #1
   d646e:	4630      	mov	r0, r6
   d6470:	f7ff ffc3 	bl	d63fa <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d6474:	2101      	movs	r1, #1
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff ffbf 	bl	d63fa <digitalWrite>
    digitalWrite(clockPin, LOW);
   d647c:	3401      	adds	r4, #1
   d647e:	2100      	movs	r1, #0
   d6480:	4628      	mov	r0, r5
   d6482:	f7ff ffba 	bl	d63fa <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d6486:	2c08      	cmp	r4, #8
   d6488:	d1ea      	bne.n	d6460 <shiftOut+0xe>
  }
}
   d648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d648e:	f1c4 0107 	rsb	r1, r4, #7
   d6492:	fa47 f101 	asr.w	r1, r7, r1
   d6496:	e7e8      	b.n	d646a <shiftOut+0x18>

000d6498 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6498:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d649a:	2300      	movs	r3, #0
   d649c:	2520      	movs	r5, #32
   d649e:	8043      	strh	r3, [r0, #2]
   d64a0:	2314      	movs	r3, #20
{
   d64a2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d64a4:	8003      	strh	r3, [r0, #0]
   d64a6:	6085      	str	r5, [r0, #8]
   d64a8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64aa:	4906      	ldr	r1, [pc, #24]	; (d64c4 <_Z17acquireWireBufferv+0x2c>)
   d64ac:	4628      	mov	r0, r5
   d64ae:	f000 f83a 	bl	d6526 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64b2:	4904      	ldr	r1, [pc, #16]	; (d64c4 <_Z17acquireWireBufferv+0x2c>)
	};
   d64b4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64b6:	4628      	mov	r0, r5
   d64b8:	f000 f835 	bl	d6526 <_ZnajRKSt9nothrow_t>
	};
   d64bc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d64be:	4620      	mov	r0, r4
   d64c0:	bd38      	pop	{r3, r4, r5, pc}
   d64c2:	bf00      	nop
   d64c4:	000d75b4 	.word	0x000d75b4

000d64c8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d64c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64ca:	4d0f      	ldr	r5, [pc, #60]	; (d6508 <_Z19__fetch_global_Wirev+0x40>)
   d64cc:	7829      	ldrb	r1, [r5, #0]
   d64ce:	f3bf 8f5b 	dmb	ish
   d64d2:	f011 0401 	ands.w	r4, r1, #1
{
   d64d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64d8:	d113      	bne.n	d6502 <_Z19__fetch_global_Wirev+0x3a>
   d64da:	4628      	mov	r0, r5
   d64dc:	f7fd fde8 	bl	d40b0 <__cxa_guard_acquire>
   d64e0:	b178      	cbz	r0, d6502 <_Z19__fetch_global_Wirev+0x3a>
   d64e2:	a801      	add	r0, sp, #4
   d64e4:	f7ff ffd8 	bl	d6498 <_Z17acquireWireBufferv>
   d64e8:	aa01      	add	r2, sp, #4
   d64ea:	4621      	mov	r1, r4
   d64ec:	4807      	ldr	r0, [pc, #28]	; (d650c <_Z19__fetch_global_Wirev+0x44>)
   d64ee:	f7ff fdf5 	bl	d60dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d64f2:	4628      	mov	r0, r5
   d64f4:	f7fd fde1 	bl	d40ba <__cxa_guard_release>
   d64f8:	4a05      	ldr	r2, [pc, #20]	; (d6510 <_Z19__fetch_global_Wirev+0x48>)
   d64fa:	4906      	ldr	r1, [pc, #24]	; (d6514 <_Z19__fetch_global_Wirev+0x4c>)
   d64fc:	4803      	ldr	r0, [pc, #12]	; (d650c <_Z19__fetch_global_Wirev+0x44>)
   d64fe:	f000 f80b 	bl	d6518 <__aeabi_atexit>
	return wire;
}
   d6502:	4802      	ldr	r0, [pc, #8]	; (d650c <_Z19__fetch_global_Wirev+0x44>)
   d6504:	b007      	add	sp, #28
   d6506:	bd30      	pop	{r4, r5, pc}
   d6508:	2003e7dc 	.word	0x2003e7dc
   d650c:	2003e7e0 	.word	0x2003e7e0
   d6510:	2003e5b8 	.word	0x2003e5b8
   d6514:	000d6085 	.word	0x000d6085

000d6518 <__aeabi_atexit>:
   d6518:	460b      	mov	r3, r1
   d651a:	4601      	mov	r1, r0
   d651c:	4618      	mov	r0, r3
   d651e:	f000 bc27 	b.w	d6d70 <__cxa_atexit>

000d6522 <_ZdlPvj>:
   d6522:	f7fd bdb8 	b.w	d4096 <_ZdlPv>

000d6526 <_ZnajRKSt9nothrow_t>:
   d6526:	f7fd bdb4 	b.w	d4092 <_Znaj>
	...

000d652c <__aeabi_drsub>:
   d652c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6530:	e002      	b.n	d6538 <__adddf3>
   d6532:	bf00      	nop

000d6534 <__aeabi_dsub>:
   d6534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6538 <__adddf3>:
   d6538:	b530      	push	{r4, r5, lr}
   d653a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d653e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6542:	ea94 0f05 	teq	r4, r5
   d6546:	bf08      	it	eq
   d6548:	ea90 0f02 	teqeq	r0, r2
   d654c:	bf1f      	itttt	ne
   d654e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6552:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d655a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d655e:	f000 80e2 	beq.w	d6726 <__adddf3+0x1ee>
   d6562:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d656a:	bfb8      	it	lt
   d656c:	426d      	neglt	r5, r5
   d656e:	dd0c      	ble.n	d658a <__adddf3+0x52>
   d6570:	442c      	add	r4, r5
   d6572:	ea80 0202 	eor.w	r2, r0, r2
   d6576:	ea81 0303 	eor.w	r3, r1, r3
   d657a:	ea82 0000 	eor.w	r0, r2, r0
   d657e:	ea83 0101 	eor.w	r1, r3, r1
   d6582:	ea80 0202 	eor.w	r2, r0, r2
   d6586:	ea81 0303 	eor.w	r3, r1, r3
   d658a:	2d36      	cmp	r5, #54	; 0x36
   d658c:	bf88      	it	hi
   d658e:	bd30      	pophi	{r4, r5, pc}
   d6590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6594:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d659c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d65a0:	d002      	beq.n	d65a8 <__adddf3+0x70>
   d65a2:	4240      	negs	r0, r0
   d65a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d65ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d65b4:	d002      	beq.n	d65bc <__adddf3+0x84>
   d65b6:	4252      	negs	r2, r2
   d65b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d65bc:	ea94 0f05 	teq	r4, r5
   d65c0:	f000 80a7 	beq.w	d6712 <__adddf3+0x1da>
   d65c4:	f1a4 0401 	sub.w	r4, r4, #1
   d65c8:	f1d5 0e20 	rsbs	lr, r5, #32
   d65cc:	db0d      	blt.n	d65ea <__adddf3+0xb2>
   d65ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65d2:	fa22 f205 	lsr.w	r2, r2, r5
   d65d6:	1880      	adds	r0, r0, r2
   d65d8:	f141 0100 	adc.w	r1, r1, #0
   d65dc:	fa03 f20e 	lsl.w	r2, r3, lr
   d65e0:	1880      	adds	r0, r0, r2
   d65e2:	fa43 f305 	asr.w	r3, r3, r5
   d65e6:	4159      	adcs	r1, r3
   d65e8:	e00e      	b.n	d6608 <__adddf3+0xd0>
   d65ea:	f1a5 0520 	sub.w	r5, r5, #32
   d65ee:	f10e 0e20 	add.w	lr, lr, #32
   d65f2:	2a01      	cmp	r2, #1
   d65f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65f8:	bf28      	it	cs
   d65fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65fe:	fa43 f305 	asr.w	r3, r3, r5
   d6602:	18c0      	adds	r0, r0, r3
   d6604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d660c:	d507      	bpl.n	d661e <__adddf3+0xe6>
   d660e:	f04f 0e00 	mov.w	lr, #0
   d6612:	f1dc 0c00 	rsbs	ip, ip, #0
   d6616:	eb7e 0000 	sbcs.w	r0, lr, r0
   d661a:	eb6e 0101 	sbc.w	r1, lr, r1
   d661e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6622:	d31b      	bcc.n	d665c <__adddf3+0x124>
   d6624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6628:	d30c      	bcc.n	d6644 <__adddf3+0x10c>
   d662a:	0849      	lsrs	r1, r1, #1
   d662c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6630:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6634:	f104 0401 	add.w	r4, r4, #1
   d6638:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d663c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6640:	f080 809a 	bcs.w	d6778 <__adddf3+0x240>
   d6644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6648:	bf08      	it	eq
   d664a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d664e:	f150 0000 	adcs.w	r0, r0, #0
   d6652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6656:	ea41 0105 	orr.w	r1, r1, r5
   d665a:	bd30      	pop	{r4, r5, pc}
   d665c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6660:	4140      	adcs	r0, r0
   d6662:	eb41 0101 	adc.w	r1, r1, r1
   d6666:	3c01      	subs	r4, #1
   d6668:	bf28      	it	cs
   d666a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d666e:	d2e9      	bcs.n	d6644 <__adddf3+0x10c>
   d6670:	f091 0f00 	teq	r1, #0
   d6674:	bf04      	itt	eq
   d6676:	4601      	moveq	r1, r0
   d6678:	2000      	moveq	r0, #0
   d667a:	fab1 f381 	clz	r3, r1
   d667e:	bf08      	it	eq
   d6680:	3320      	addeq	r3, #32
   d6682:	f1a3 030b 	sub.w	r3, r3, #11
   d6686:	f1b3 0220 	subs.w	r2, r3, #32
   d668a:	da0c      	bge.n	d66a6 <__adddf3+0x16e>
   d668c:	320c      	adds	r2, #12
   d668e:	dd08      	ble.n	d66a2 <__adddf3+0x16a>
   d6690:	f102 0c14 	add.w	ip, r2, #20
   d6694:	f1c2 020c 	rsb	r2, r2, #12
   d6698:	fa01 f00c 	lsl.w	r0, r1, ip
   d669c:	fa21 f102 	lsr.w	r1, r1, r2
   d66a0:	e00c      	b.n	d66bc <__adddf3+0x184>
   d66a2:	f102 0214 	add.w	r2, r2, #20
   d66a6:	bfd8      	it	le
   d66a8:	f1c2 0c20 	rsble	ip, r2, #32
   d66ac:	fa01 f102 	lsl.w	r1, r1, r2
   d66b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d66b4:	bfdc      	itt	le
   d66b6:	ea41 010c 	orrle.w	r1, r1, ip
   d66ba:	4090      	lslle	r0, r2
   d66bc:	1ae4      	subs	r4, r4, r3
   d66be:	bfa2      	ittt	ge
   d66c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66c4:	4329      	orrge	r1, r5
   d66c6:	bd30      	popge	{r4, r5, pc}
   d66c8:	ea6f 0404 	mvn.w	r4, r4
   d66cc:	3c1f      	subs	r4, #31
   d66ce:	da1c      	bge.n	d670a <__adddf3+0x1d2>
   d66d0:	340c      	adds	r4, #12
   d66d2:	dc0e      	bgt.n	d66f2 <__adddf3+0x1ba>
   d66d4:	f104 0414 	add.w	r4, r4, #20
   d66d8:	f1c4 0220 	rsb	r2, r4, #32
   d66dc:	fa20 f004 	lsr.w	r0, r0, r4
   d66e0:	fa01 f302 	lsl.w	r3, r1, r2
   d66e4:	ea40 0003 	orr.w	r0, r0, r3
   d66e8:	fa21 f304 	lsr.w	r3, r1, r4
   d66ec:	ea45 0103 	orr.w	r1, r5, r3
   d66f0:	bd30      	pop	{r4, r5, pc}
   d66f2:	f1c4 040c 	rsb	r4, r4, #12
   d66f6:	f1c4 0220 	rsb	r2, r4, #32
   d66fa:	fa20 f002 	lsr.w	r0, r0, r2
   d66fe:	fa01 f304 	lsl.w	r3, r1, r4
   d6702:	ea40 0003 	orr.w	r0, r0, r3
   d6706:	4629      	mov	r1, r5
   d6708:	bd30      	pop	{r4, r5, pc}
   d670a:	fa21 f004 	lsr.w	r0, r1, r4
   d670e:	4629      	mov	r1, r5
   d6710:	bd30      	pop	{r4, r5, pc}
   d6712:	f094 0f00 	teq	r4, #0
   d6716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d671a:	bf06      	itte	eq
   d671c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6720:	3401      	addeq	r4, #1
   d6722:	3d01      	subne	r5, #1
   d6724:	e74e      	b.n	d65c4 <__adddf3+0x8c>
   d6726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d672a:	bf18      	it	ne
   d672c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6730:	d029      	beq.n	d6786 <__adddf3+0x24e>
   d6732:	ea94 0f05 	teq	r4, r5
   d6736:	bf08      	it	eq
   d6738:	ea90 0f02 	teqeq	r0, r2
   d673c:	d005      	beq.n	d674a <__adddf3+0x212>
   d673e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6742:	bf04      	itt	eq
   d6744:	4619      	moveq	r1, r3
   d6746:	4610      	moveq	r0, r2
   d6748:	bd30      	pop	{r4, r5, pc}
   d674a:	ea91 0f03 	teq	r1, r3
   d674e:	bf1e      	ittt	ne
   d6750:	2100      	movne	r1, #0
   d6752:	2000      	movne	r0, #0
   d6754:	bd30      	popne	{r4, r5, pc}
   d6756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d675a:	d105      	bne.n	d6768 <__adddf3+0x230>
   d675c:	0040      	lsls	r0, r0, #1
   d675e:	4149      	adcs	r1, r1
   d6760:	bf28      	it	cs
   d6762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6766:	bd30      	pop	{r4, r5, pc}
   d6768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d676c:	bf3c      	itt	cc
   d676e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6772:	bd30      	popcc	{r4, r5, pc}
   d6774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d677c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6780:	f04f 0000 	mov.w	r0, #0
   d6784:	bd30      	pop	{r4, r5, pc}
   d6786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d678a:	bf1a      	itte	ne
   d678c:	4619      	movne	r1, r3
   d678e:	4610      	movne	r0, r2
   d6790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6794:	bf1c      	itt	ne
   d6796:	460b      	movne	r3, r1
   d6798:	4602      	movne	r2, r0
   d679a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d679e:	bf06      	itte	eq
   d67a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d67a4:	ea91 0f03 	teqeq	r1, r3
   d67a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d67ac:	bd30      	pop	{r4, r5, pc}
   d67ae:	bf00      	nop

000d67b0 <__aeabi_ui2d>:
   d67b0:	f090 0f00 	teq	r0, #0
   d67b4:	bf04      	itt	eq
   d67b6:	2100      	moveq	r1, #0
   d67b8:	4770      	bxeq	lr
   d67ba:	b530      	push	{r4, r5, lr}
   d67bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67c4:	f04f 0500 	mov.w	r5, #0
   d67c8:	f04f 0100 	mov.w	r1, #0
   d67cc:	e750      	b.n	d6670 <__adddf3+0x138>
   d67ce:	bf00      	nop

000d67d0 <__aeabi_i2d>:
   d67d0:	f090 0f00 	teq	r0, #0
   d67d4:	bf04      	itt	eq
   d67d6:	2100      	moveq	r1, #0
   d67d8:	4770      	bxeq	lr
   d67da:	b530      	push	{r4, r5, lr}
   d67dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d67e8:	bf48      	it	mi
   d67ea:	4240      	negmi	r0, r0
   d67ec:	f04f 0100 	mov.w	r1, #0
   d67f0:	e73e      	b.n	d6670 <__adddf3+0x138>
   d67f2:	bf00      	nop

000d67f4 <__aeabi_f2d>:
   d67f4:	0042      	lsls	r2, r0, #1
   d67f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67fa:	ea4f 0131 	mov.w	r1, r1, rrx
   d67fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6802:	bf1f      	itttt	ne
   d6804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d680c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6810:	4770      	bxne	lr
   d6812:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6816:	bf08      	it	eq
   d6818:	4770      	bxeq	lr
   d681a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d681e:	bf04      	itt	eq
   d6820:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6824:	4770      	bxeq	lr
   d6826:	b530      	push	{r4, r5, lr}
   d6828:	f44f 7460 	mov.w	r4, #896	; 0x380
   d682c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6834:	e71c      	b.n	d6670 <__adddf3+0x138>
   d6836:	bf00      	nop

000d6838 <__aeabi_ul2d>:
   d6838:	ea50 0201 	orrs.w	r2, r0, r1
   d683c:	bf08      	it	eq
   d683e:	4770      	bxeq	lr
   d6840:	b530      	push	{r4, r5, lr}
   d6842:	f04f 0500 	mov.w	r5, #0
   d6846:	e00a      	b.n	d685e <__aeabi_l2d+0x16>

000d6848 <__aeabi_l2d>:
   d6848:	ea50 0201 	orrs.w	r2, r0, r1
   d684c:	bf08      	it	eq
   d684e:	4770      	bxeq	lr
   d6850:	b530      	push	{r4, r5, lr}
   d6852:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6856:	d502      	bpl.n	d685e <__aeabi_l2d+0x16>
   d6858:	4240      	negs	r0, r0
   d685a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d685e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6862:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6866:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d686a:	f43f aed8 	beq.w	d661e <__adddf3+0xe6>
   d686e:	f04f 0203 	mov.w	r2, #3
   d6872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6876:	bf18      	it	ne
   d6878:	3203      	addne	r2, #3
   d687a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d687e:	bf18      	it	ne
   d6880:	3203      	addne	r2, #3
   d6882:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6886:	f1c2 0320 	rsb	r3, r2, #32
   d688a:	fa00 fc03 	lsl.w	ip, r0, r3
   d688e:	fa20 f002 	lsr.w	r0, r0, r2
   d6892:	fa01 fe03 	lsl.w	lr, r1, r3
   d6896:	ea40 000e 	orr.w	r0, r0, lr
   d689a:	fa21 f102 	lsr.w	r1, r1, r2
   d689e:	4414      	add	r4, r2
   d68a0:	e6bd      	b.n	d661e <__adddf3+0xe6>
   d68a2:	bf00      	nop

000d68a4 <__aeabi_dmul>:
   d68a4:	b570      	push	{r4, r5, r6, lr}
   d68a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68b2:	bf1d      	ittte	ne
   d68b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68b8:	ea94 0f0c 	teqne	r4, ip
   d68bc:	ea95 0f0c 	teqne	r5, ip
   d68c0:	f000 f8de 	bleq	d6a80 <__aeabi_dmul+0x1dc>
   d68c4:	442c      	add	r4, r5
   d68c6:	ea81 0603 	eor.w	r6, r1, r3
   d68ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68d6:	bf18      	it	ne
   d68d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d68e4:	d038      	beq.n	d6958 <__aeabi_dmul+0xb4>
   d68e6:	fba0 ce02 	umull	ip, lr, r0, r2
   d68ea:	f04f 0500 	mov.w	r5, #0
   d68ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d68f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d68f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d68fa:	f04f 0600 	mov.w	r6, #0
   d68fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6902:	f09c 0f00 	teq	ip, #0
   d6906:	bf18      	it	ne
   d6908:	f04e 0e01 	orrne.w	lr, lr, #1
   d690c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6910:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6914:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6918:	d204      	bcs.n	d6924 <__aeabi_dmul+0x80>
   d691a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d691e:	416d      	adcs	r5, r5
   d6920:	eb46 0606 	adc.w	r6, r6, r6
   d6924:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6928:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d692c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6930:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6934:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6938:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d693c:	bf88      	it	hi
   d693e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6942:	d81e      	bhi.n	d6982 <__aeabi_dmul+0xde>
   d6944:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6948:	bf08      	it	eq
   d694a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d694e:	f150 0000 	adcs.w	r0, r0, #0
   d6952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6956:	bd70      	pop	{r4, r5, r6, pc}
   d6958:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d695c:	ea46 0101 	orr.w	r1, r6, r1
   d6960:	ea40 0002 	orr.w	r0, r0, r2
   d6964:	ea81 0103 	eor.w	r1, r1, r3
   d6968:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d696c:	bfc2      	ittt	gt
   d696e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6976:	bd70      	popgt	{r4, r5, r6, pc}
   d6978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d697c:	f04f 0e00 	mov.w	lr, #0
   d6980:	3c01      	subs	r4, #1
   d6982:	f300 80ab 	bgt.w	d6adc <__aeabi_dmul+0x238>
   d6986:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d698a:	bfde      	ittt	le
   d698c:	2000      	movle	r0, #0
   d698e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6992:	bd70      	pople	{r4, r5, r6, pc}
   d6994:	f1c4 0400 	rsb	r4, r4, #0
   d6998:	3c20      	subs	r4, #32
   d699a:	da35      	bge.n	d6a08 <__aeabi_dmul+0x164>
   d699c:	340c      	adds	r4, #12
   d699e:	dc1b      	bgt.n	d69d8 <__aeabi_dmul+0x134>
   d69a0:	f104 0414 	add.w	r4, r4, #20
   d69a4:	f1c4 0520 	rsb	r5, r4, #32
   d69a8:	fa00 f305 	lsl.w	r3, r0, r5
   d69ac:	fa20 f004 	lsr.w	r0, r0, r4
   d69b0:	fa01 f205 	lsl.w	r2, r1, r5
   d69b4:	ea40 0002 	orr.w	r0, r0, r2
   d69b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d69bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69c4:	fa21 f604 	lsr.w	r6, r1, r4
   d69c8:	eb42 0106 	adc.w	r1, r2, r6
   d69cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69d0:	bf08      	it	eq
   d69d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69d6:	bd70      	pop	{r4, r5, r6, pc}
   d69d8:	f1c4 040c 	rsb	r4, r4, #12
   d69dc:	f1c4 0520 	rsb	r5, r4, #32
   d69e0:	fa00 f304 	lsl.w	r3, r0, r4
   d69e4:	fa20 f005 	lsr.w	r0, r0, r5
   d69e8:	fa01 f204 	lsl.w	r2, r1, r4
   d69ec:	ea40 0002 	orr.w	r0, r0, r2
   d69f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69f8:	f141 0100 	adc.w	r1, r1, #0
   d69fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a00:	bf08      	it	eq
   d6a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a06:	bd70      	pop	{r4, r5, r6, pc}
   d6a08:	f1c4 0520 	rsb	r5, r4, #32
   d6a0c:	fa00 f205 	lsl.w	r2, r0, r5
   d6a10:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a14:	fa20 f304 	lsr.w	r3, r0, r4
   d6a18:	fa01 f205 	lsl.w	r2, r1, r5
   d6a1c:	ea43 0302 	orr.w	r3, r3, r2
   d6a20:	fa21 f004 	lsr.w	r0, r1, r4
   d6a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a28:	fa21 f204 	lsr.w	r2, r1, r4
   d6a2c:	ea20 0002 	bic.w	r0, r0, r2
   d6a30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a38:	bf08      	it	eq
   d6a3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a3e:	bd70      	pop	{r4, r5, r6, pc}
   d6a40:	f094 0f00 	teq	r4, #0
   d6a44:	d10f      	bne.n	d6a66 <__aeabi_dmul+0x1c2>
   d6a46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a4a:	0040      	lsls	r0, r0, #1
   d6a4c:	eb41 0101 	adc.w	r1, r1, r1
   d6a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a54:	bf08      	it	eq
   d6a56:	3c01      	subeq	r4, #1
   d6a58:	d0f7      	beq.n	d6a4a <__aeabi_dmul+0x1a6>
   d6a5a:	ea41 0106 	orr.w	r1, r1, r6
   d6a5e:	f095 0f00 	teq	r5, #0
   d6a62:	bf18      	it	ne
   d6a64:	4770      	bxne	lr
   d6a66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a6a:	0052      	lsls	r2, r2, #1
   d6a6c:	eb43 0303 	adc.w	r3, r3, r3
   d6a70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a74:	bf08      	it	eq
   d6a76:	3d01      	subeq	r5, #1
   d6a78:	d0f7      	beq.n	d6a6a <__aeabi_dmul+0x1c6>
   d6a7a:	ea43 0306 	orr.w	r3, r3, r6
   d6a7e:	4770      	bx	lr
   d6a80:	ea94 0f0c 	teq	r4, ip
   d6a84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a88:	bf18      	it	ne
   d6a8a:	ea95 0f0c 	teqne	r5, ip
   d6a8e:	d00c      	beq.n	d6aaa <__aeabi_dmul+0x206>
   d6a90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a94:	bf18      	it	ne
   d6a96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a9a:	d1d1      	bne.n	d6a40 <__aeabi_dmul+0x19c>
   d6a9c:	ea81 0103 	eor.w	r1, r1, r3
   d6aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6aa4:	f04f 0000 	mov.w	r0, #0
   d6aa8:	bd70      	pop	{r4, r5, r6, pc}
   d6aaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6aae:	bf06      	itte	eq
   d6ab0:	4610      	moveq	r0, r2
   d6ab2:	4619      	moveq	r1, r3
   d6ab4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ab8:	d019      	beq.n	d6aee <__aeabi_dmul+0x24a>
   d6aba:	ea94 0f0c 	teq	r4, ip
   d6abe:	d102      	bne.n	d6ac6 <__aeabi_dmul+0x222>
   d6ac0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6ac4:	d113      	bne.n	d6aee <__aeabi_dmul+0x24a>
   d6ac6:	ea95 0f0c 	teq	r5, ip
   d6aca:	d105      	bne.n	d6ad8 <__aeabi_dmul+0x234>
   d6acc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ad0:	bf1c      	itt	ne
   d6ad2:	4610      	movne	r0, r2
   d6ad4:	4619      	movne	r1, r3
   d6ad6:	d10a      	bne.n	d6aee <__aeabi_dmul+0x24a>
   d6ad8:	ea81 0103 	eor.w	r1, r1, r3
   d6adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ae0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6ae4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ae8:	f04f 0000 	mov.w	r0, #0
   d6aec:	bd70      	pop	{r4, r5, r6, pc}
   d6aee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6af2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6af6:	bd70      	pop	{r4, r5, r6, pc}

000d6af8 <__aeabi_ddiv>:
   d6af8:	b570      	push	{r4, r5, r6, lr}
   d6afa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6afe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b06:	bf1d      	ittte	ne
   d6b08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b0c:	ea94 0f0c 	teqne	r4, ip
   d6b10:	ea95 0f0c 	teqne	r5, ip
   d6b14:	f000 f8a7 	bleq	d6c66 <__aeabi_ddiv+0x16e>
   d6b18:	eba4 0405 	sub.w	r4, r4, r5
   d6b1c:	ea81 0e03 	eor.w	lr, r1, r3
   d6b20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b28:	f000 8088 	beq.w	d6c3c <__aeabi_ddiv+0x144>
   d6b2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b50:	429d      	cmp	r5, r3
   d6b52:	bf08      	it	eq
   d6b54:	4296      	cmpeq	r6, r2
   d6b56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b5e:	d202      	bcs.n	d6b66 <__aeabi_ddiv+0x6e>
   d6b60:	085b      	lsrs	r3, r3, #1
   d6b62:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b66:	1ab6      	subs	r6, r6, r2
   d6b68:	eb65 0503 	sbc.w	r5, r5, r3
   d6b6c:	085b      	lsrs	r3, r3, #1
   d6b6e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b82:	bf22      	ittt	cs
   d6b84:	1ab6      	subcs	r6, r6, r2
   d6b86:	4675      	movcs	r5, lr
   d6b88:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b8c:	085b      	lsrs	r3, r3, #1
   d6b8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b92:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b9a:	bf22      	ittt	cs
   d6b9c:	1ab6      	subcs	r6, r6, r2
   d6b9e:	4675      	movcs	r5, lr
   d6ba0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6ba4:	085b      	lsrs	r3, r3, #1
   d6ba6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6baa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bb2:	bf22      	ittt	cs
   d6bb4:	1ab6      	subcs	r6, r6, r2
   d6bb6:	4675      	movcs	r5, lr
   d6bb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6bbc:	085b      	lsrs	r3, r3, #1
   d6bbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bca:	bf22      	ittt	cs
   d6bcc:	1ab6      	subcs	r6, r6, r2
   d6bce:	4675      	movcs	r5, lr
   d6bd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6bd4:	ea55 0e06 	orrs.w	lr, r5, r6
   d6bd8:	d018      	beq.n	d6c0c <__aeabi_ddiv+0x114>
   d6bda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6be2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6be6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6bea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6bee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6bf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6bf6:	d1c0      	bne.n	d6b7a <__aeabi_ddiv+0x82>
   d6bf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bfc:	d10b      	bne.n	d6c16 <__aeabi_ddiv+0x11e>
   d6bfe:	ea41 0100 	orr.w	r1, r1, r0
   d6c02:	f04f 0000 	mov.w	r0, #0
   d6c06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c0a:	e7b6      	b.n	d6b7a <__aeabi_ddiv+0x82>
   d6c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c10:	bf04      	itt	eq
   d6c12:	4301      	orreq	r1, r0
   d6c14:	2000      	moveq	r0, #0
   d6c16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c1a:	bf88      	it	hi
   d6c1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c20:	f63f aeaf 	bhi.w	d6982 <__aeabi_dmul+0xde>
   d6c24:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c28:	bf04      	itt	eq
   d6c2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c32:	f150 0000 	adcs.w	r0, r0, #0
   d6c36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c3a:	bd70      	pop	{r4, r5, r6, pc}
   d6c3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c48:	bfc2      	ittt	gt
   d6c4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c52:	bd70      	popgt	{r4, r5, r6, pc}
   d6c54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c58:	f04f 0e00 	mov.w	lr, #0
   d6c5c:	3c01      	subs	r4, #1
   d6c5e:	e690      	b.n	d6982 <__aeabi_dmul+0xde>
   d6c60:	ea45 0e06 	orr.w	lr, r5, r6
   d6c64:	e68d      	b.n	d6982 <__aeabi_dmul+0xde>
   d6c66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c6a:	ea94 0f0c 	teq	r4, ip
   d6c6e:	bf08      	it	eq
   d6c70:	ea95 0f0c 	teqeq	r5, ip
   d6c74:	f43f af3b 	beq.w	d6aee <__aeabi_dmul+0x24a>
   d6c78:	ea94 0f0c 	teq	r4, ip
   d6c7c:	d10a      	bne.n	d6c94 <__aeabi_ddiv+0x19c>
   d6c7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c82:	f47f af34 	bne.w	d6aee <__aeabi_dmul+0x24a>
   d6c86:	ea95 0f0c 	teq	r5, ip
   d6c8a:	f47f af25 	bne.w	d6ad8 <__aeabi_dmul+0x234>
   d6c8e:	4610      	mov	r0, r2
   d6c90:	4619      	mov	r1, r3
   d6c92:	e72c      	b.n	d6aee <__aeabi_dmul+0x24a>
   d6c94:	ea95 0f0c 	teq	r5, ip
   d6c98:	d106      	bne.n	d6ca8 <__aeabi_ddiv+0x1b0>
   d6c9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c9e:	f43f aefd 	beq.w	d6a9c <__aeabi_dmul+0x1f8>
   d6ca2:	4610      	mov	r0, r2
   d6ca4:	4619      	mov	r1, r3
   d6ca6:	e722      	b.n	d6aee <__aeabi_dmul+0x24a>
   d6ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cac:	bf18      	it	ne
   d6cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cb2:	f47f aec5 	bne.w	d6a40 <__aeabi_dmul+0x19c>
   d6cb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6cba:	f47f af0d 	bne.w	d6ad8 <__aeabi_dmul+0x234>
   d6cbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6cc2:	f47f aeeb 	bne.w	d6a9c <__aeabi_dmul+0x1f8>
   d6cc6:	e712      	b.n	d6aee <__aeabi_dmul+0x24a>

000d6cc8 <__aeabi_d2uiz>:
   d6cc8:	004a      	lsls	r2, r1, #1
   d6cca:	d211      	bcs.n	d6cf0 <__aeabi_d2uiz+0x28>
   d6ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6cd0:	d211      	bcs.n	d6cf6 <__aeabi_d2uiz+0x2e>
   d6cd2:	d50d      	bpl.n	d6cf0 <__aeabi_d2uiz+0x28>
   d6cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6cdc:	d40e      	bmi.n	d6cfc <__aeabi_d2uiz+0x34>
   d6cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6cea:	fa23 f002 	lsr.w	r0, r3, r2
   d6cee:	4770      	bx	lr
   d6cf0:	f04f 0000 	mov.w	r0, #0
   d6cf4:	4770      	bx	lr
   d6cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6cfa:	d102      	bne.n	d6d02 <__aeabi_d2uiz+0x3a>
   d6cfc:	f04f 30ff 	mov.w	r0, #4294967295
   d6d00:	4770      	bx	lr
   d6d02:	f04f 0000 	mov.w	r0, #0
   d6d06:	4770      	bx	lr

000d6d08 <__aeabi_f2lz>:
   d6d08:	ee07 0a90 	vmov	s15, r0
   d6d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d6d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d14:	d401      	bmi.n	d6d1a <__aeabi_f2lz+0x12>
   d6d16:	f000 b80b 	b.w	d6d30 <__aeabi_f2ulz>
   d6d1a:	eef1 7a67 	vneg.f32	s15, s15
   d6d1e:	b508      	push	{r3, lr}
   d6d20:	ee17 0a90 	vmov	r0, s15
   d6d24:	f000 f804 	bl	d6d30 <__aeabi_f2ulz>
   d6d28:	4240      	negs	r0, r0
   d6d2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6d2e:	bd08      	pop	{r3, pc}

000d6d30 <__aeabi_f2ulz>:
   d6d30:	b5d0      	push	{r4, r6, r7, lr}
   d6d32:	f7ff fd5f 	bl	d67f4 <__aeabi_f2d>
   d6d36:	4b0c      	ldr	r3, [pc, #48]	; (d6d68 <__aeabi_f2ulz+0x38>)
   d6d38:	2200      	movs	r2, #0
   d6d3a:	4606      	mov	r6, r0
   d6d3c:	460f      	mov	r7, r1
   d6d3e:	f7ff fdb1 	bl	d68a4 <__aeabi_dmul>
   d6d42:	f7ff ffc1 	bl	d6cc8 <__aeabi_d2uiz>
   d6d46:	4604      	mov	r4, r0
   d6d48:	f7ff fd32 	bl	d67b0 <__aeabi_ui2d>
   d6d4c:	4b07      	ldr	r3, [pc, #28]	; (d6d6c <__aeabi_f2ulz+0x3c>)
   d6d4e:	2200      	movs	r2, #0
   d6d50:	f7ff fda8 	bl	d68a4 <__aeabi_dmul>
   d6d54:	4602      	mov	r2, r0
   d6d56:	460b      	mov	r3, r1
   d6d58:	4630      	mov	r0, r6
   d6d5a:	4639      	mov	r1, r7
   d6d5c:	f7ff fbea 	bl	d6534 <__aeabi_dsub>
   d6d60:	f7ff ffb2 	bl	d6cc8 <__aeabi_d2uiz>
   d6d64:	4621      	mov	r1, r4
   d6d66:	bdd0      	pop	{r4, r6, r7, pc}
   d6d68:	3df00000 	.word	0x3df00000
   d6d6c:	41f00000 	.word	0x41f00000

000d6d70 <__cxa_atexit>:
   d6d70:	b510      	push	{r4, lr}
   d6d72:	4c05      	ldr	r4, [pc, #20]	; (d6d88 <__cxa_atexit+0x18>)
   d6d74:	4613      	mov	r3, r2
   d6d76:	b12c      	cbz	r4, d6d84 <__cxa_atexit+0x14>
   d6d78:	460a      	mov	r2, r1
   d6d7a:	4601      	mov	r1, r0
   d6d7c:	2002      	movs	r0, #2
   d6d7e:	f3af 8000 	nop.w
   d6d82:	bd10      	pop	{r4, pc}
   d6d84:	4620      	mov	r0, r4
   d6d86:	e7fc      	b.n	d6d82 <__cxa_atexit+0x12>
   d6d88:	00000000 	.word	0x00000000

000d6d8c <memcpy>:
   d6d8c:	440a      	add	r2, r1
   d6d8e:	4291      	cmp	r1, r2
   d6d90:	f100 33ff 	add.w	r3, r0, #4294967295
   d6d94:	d100      	bne.n	d6d98 <memcpy+0xc>
   d6d96:	4770      	bx	lr
   d6d98:	b510      	push	{r4, lr}
   d6d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6da2:	4291      	cmp	r1, r2
   d6da4:	d1f9      	bne.n	d6d9a <memcpy+0xe>
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <memset>:
   d6da8:	4402      	add	r2, r0
   d6daa:	4603      	mov	r3, r0
   d6dac:	4293      	cmp	r3, r2
   d6dae:	d100      	bne.n	d6db2 <memset+0xa>
   d6db0:	4770      	bx	lr
   d6db2:	f803 1b01 	strb.w	r1, [r3], #1
   d6db6:	e7f9      	b.n	d6dac <memset+0x4>

000d6db8 <srand>:
   d6db8:	b538      	push	{r3, r4, r5, lr}
   d6dba:	4b0d      	ldr	r3, [pc, #52]	; (d6df0 <srand+0x38>)
   d6dbc:	681d      	ldr	r5, [r3, #0]
   d6dbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6dc0:	4604      	mov	r4, r0
   d6dc2:	b97b      	cbnz	r3, d6de4 <srand+0x2c>
   d6dc4:	2018      	movs	r0, #24
   d6dc6:	f7fe fc95 	bl	d56f4 <malloc>
   d6dca:	4a0a      	ldr	r2, [pc, #40]	; (d6df4 <srand+0x3c>)
   d6dcc:	4b0a      	ldr	r3, [pc, #40]	; (d6df8 <srand+0x40>)
   d6dce:	63a8      	str	r0, [r5, #56]	; 0x38
   d6dd0:	e9c0 2300 	strd	r2, r3, [r0]
   d6dd4:	4b09      	ldr	r3, [pc, #36]	; (d6dfc <srand+0x44>)
   d6dd6:	6083      	str	r3, [r0, #8]
   d6dd8:	230b      	movs	r3, #11
   d6dda:	8183      	strh	r3, [r0, #12]
   d6ddc:	2201      	movs	r2, #1
   d6dde:	2300      	movs	r3, #0
   d6de0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6de4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6de6:	2200      	movs	r2, #0
   d6de8:	611c      	str	r4, [r3, #16]
   d6dea:	615a      	str	r2, [r3, #20]
   d6dec:	bd38      	pop	{r3, r4, r5, pc}
   d6dee:	bf00      	nop
   d6df0:	2003e550 	.word	0x2003e550
   d6df4:	abcd330e 	.word	0xabcd330e
   d6df8:	e66d1234 	.word	0xe66d1234
   d6dfc:	0005deec 	.word	0x0005deec

000d6e00 <strlen>:
   d6e00:	4603      	mov	r3, r0
   d6e02:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e06:	2a00      	cmp	r2, #0
   d6e08:	d1fb      	bne.n	d6e02 <strlen+0x2>
   d6e0a:	1a18      	subs	r0, r3, r0
   d6e0c:	3801      	subs	r0, #1
   d6e0e:	4770      	bx	lr

000d6e10 <dynalib_user>:
   d6e10:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6e20:	0000 0000 6f46 6e75 2064 6461 7264 7365     ....Found addres
   d6e30:	3a73 2520 3330 2069 3028 2578 3230 2958     s: %03i (0x%02X)
   d6e40:	0a20 4400 6e6f 3a65 4620 756f 646e 2520      ..Done: Found %
   d6e50:	2069 6564 6976 6563 7328 2e29 0a20 4300     i device(s). ..C
   d6e60:	4259 5245 4142 5353 4220 4f4f 4954 474e     YBERBASS BOOTING
   d6e70:	5520 2150 6400 6665 7561 746c 0020 534d      UP!.default .MS
   d6e80:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   d6e90:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   d6ea0:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
   d6eb0:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

000d6ebc <_ZTVN8particle11SPISettingsE>:
	...
   d6ec4:	42a1 000d 4291 000d 4293 000d               .B...B...B..

000d6ed0 <_ZTV16Adafruit_SSD1306>:
	...
   d6ed8:	40c1 000d 422b 000d 51f5 000d 5a91 000d     .@..+B...Q...Z..
   d6ee8:	4b0d 000d 4f0d 000d 499d 000d 4831 000d     .K...O...I..1H..
   d6ef8:	4fc9 000d 5067 000d 509d 000d 50b9 000d     .O..gP...P...P..

000d6f08 <_ZL4font>:
   d6f08:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6f18:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6f28:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6f38:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6f48:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6f58:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6f68:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6f78:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6f88:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6f98:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6fa8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6fb8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6fc8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6fd8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6fe8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6ff8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7008:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7018:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7028:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7038:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7048:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7058:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7068:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7078:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7088:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7098:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d70a8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d70b8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d70c8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d70d8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d70e8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d70f8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7108:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7118:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7128:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7138:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7148:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7158:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7168:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7178:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7188:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7198:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d71a8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d71b8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d71c8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d71d8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d71e8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d71f8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d7208:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d7218:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7228:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7238:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7248:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7258:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7268:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7278:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d7288:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d7298:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d72a8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d72b8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d72c8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d72d8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d72e8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d72f8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7308:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d7318:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d7328:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7338:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7348:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d7358:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d7368:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d7378:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d7388:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d7398:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d73a8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d73b8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d73c8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d73d8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d73e8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d73f8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d7404 <_ZTV12Adafruit_GFX>:
	...
   d7414:	51f5 000d 5a91 000d 409d 000d 4f0d 000d     .Q...Z...@...O..
   d7424:	5031 000d 504d 000d 4fc9 000d 5067 000d     1P..MP...O..gP..
   d7434:	509d 000d 50b9 000d                         .P...P..

000d743c <_ZTVN5spark13EthernetClassE>:
	...
   d7444:	5793 000d 5789 000d 577f 000d 5775 000d     .W...W...W..uW..
   d7454:	5769 000d 575d 000d 6231 000d 6239 000d     iW..]W..1b..9b..
   d7464:	5751 000d 5749 000d 573f 000d 5735 000d     QW..IW..?W..5W..
   d7474:	6269 000d                                   ib..

000d7478 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7478:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7488:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7498:	7361 7463 6d69 0065                         asctime.

000d74a0 <_ZTV9IPAddress>:
	...
   d74a8:	5d8d 000d 5d7d 000d 5d7f 000d               .]..}]...]..

000d74b4 <_ZTV9USBSerial>:
	...
   d74bc:	5e6d 000d 5ed5 000d 5eab 000d 5a91 000d     m^...^...^...Z..
   d74cc:	5e9d 000d 5e6f 000d 5e7f 000d 5ecf 000d     .^..o^...^...^..
   d74dc:	5e8f 000d 5e69 000d                         .^..i^..

000d74e4 <_ZTV11USARTSerial>:
	...
   d74ec:	5f79 000d 5fe5 000d 5fbd 000d 5a91 000d     y_..._..._...Z..
   d74fc:	5f8d 000d 5fa9 000d 5f9b 000d 5fb7 000d     ._..._..._..._..
   d750c:	5f7b 000d 5f7f 000d                         {_..._..

000d7514 <_ZTV7TwoWire>:
	...
   d751c:	6085 000d 60cf 000d 60a7 000d 6087 000d     .`...`...`...`..
   d752c:	60af 000d 60b7 000d 60bf 000d 60c7 000d     .`...`...`...`..

000d753c <_ZTVN5spark9WiFiClassE>:
	...
   d7544:	61d3 000d 61c9 000d 61bf 000d 6181 000d     .a...a...a...a..
   d7554:	5bb9 000d 61b3 000d 6231 000d 6239 000d     .[...a..1b..9b..
   d7564:	61a7 000d 619f 000d 6195 000d 618b 000d     .a...a...a...a..
   d7574:	6269 000d                                   ib..

000d7578 <_ZTVN5spark12NetworkClassE>:
	...
   d7580:	61f1 000d 61fb 000d 6205 000d 620f 000d     .a...a...b...b..
   d7590:	6219 000d 6225 000d 6231 000d 6239 000d     .b..%b..1b..9b..
   d75a0:	6241 000d 624d 000d 6255 000d 625f 000d     Ab..Mb..Ub.._b..
   d75b0:	6269 000d                                   ib..

000d75b4 <_ZSt7nothrow>:
	...

000d75b5 <link_const_variable_data_end>:
   d75b5:	00          	.byte	0x00
	...

000d75b8 <link_constructors_location>:
   d75b8:	000d4239 	.word	0x000d4239
   d75bc:	000d4821 	.word	0x000d4821
   d75c0:	000d579d 	.word	0x000d579d
   d75c4:	000d5a09 	.word	0x000d5a09
   d75c8:	000d5a69 	.word	0x000d5a69
   d75cc:	000d5bc5 	.word	0x000d5bc5
   d75d0:	000d5c15 	.word	0x000d5c15
   d75d4:	000d5c3d 	.word	0x000d5c3d
   d75d8:	000d61dd 	.word	0x000d61dd
   d75dc:	000d6349 	.word	0x000d6349

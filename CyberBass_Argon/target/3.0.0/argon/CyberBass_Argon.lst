
c:/Users/jake/Documents/IoT/CyberBass/CyberBass_Argon/target/3.0.0/argon/CyberBass_Argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007540  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db560  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000005f0  2003ddc4  000db564  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000043c  2003e3b8  2003e3b8  0002e3b8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dbb54  000dbb54  0002bb54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dbb7c  000dbb7c  0002bb7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00247d31  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00021d36  00000000  00000000  002738b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00048f65  00000000  00000000  002955e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003e40  00000000  00000000  002de54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000b2a8  00000000  00000000  002e238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004664b  00000000  00000000  002ed634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00059ec0  00000000  00000000  00333c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00135b3d  00000000  00000000  0038db3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb64  00000000  00000000  004c367c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd27 	bl	d8a84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd2f 	bl	d8aa0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddc4 	.word	0x2003ddc4
   d404c:	000db564 	.word	0x000db564
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e3b8 	.word	0x2003e3b8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 ff73 	bl	d6f4c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db534 	.word	0x000db534
   d4080:	000db55c 	.word	0x000db55c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b948 	b.w	d4318 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa69 	bl	d4560 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bf1d 	b.w	d6ed0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bb35 	b.w	d6704 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bb33 	b.w	d6704 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bb39 	b.w	d6714 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fa7e 	bl	d65ac <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d626d 	.word	0x000d626d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ca:	4770      	bx	lr

000d40cc <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40cc:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d2:	d90d      	bls.n	d40f0 <nrf_gpio_pin_read+0x24>
   d40d4:	4a09      	ldr	r2, [pc, #36]	; (d40fc <nrf_gpio_pin_read+0x30>)
   d40d6:	2100      	movs	r1, #0
   d40d8:	200a      	movs	r0, #10
   d40da:	f002 fa67 	bl	d65ac <panic_>
        return NRF_P1;
   d40de:	4b08      	ldr	r3, [pc, #32]	; (d4100 <nrf_gpio_pin_read+0x34>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e0:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d40e4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d40e8:	40e0      	lsrs	r0, r4
}
   d40ea:	f000 0001 	and.w	r0, r0, #1
   d40ee:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   d40f0:	281f      	cmp	r0, #31
   d40f2:	d8f4      	bhi.n	d40de <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   d40f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d40f8:	e7f4      	b.n	d40e4 <nrf_gpio_pin_read+0x18>
   d40fa:	bf00      	nop
   d40fc:	000d626d 	.word	0x000d626d
   d4100:	50000300 	.word	0x50000300

000d4104 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   d4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4108:	4e4c      	ldr	r6, [pc, #304]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   d410a:	6887      	ldr	r7, [r0, #8]
   d410c:	7833      	ldrb	r3, [r6, #0]
   d410e:	4d4c      	ldr	r5, [pc, #304]	; (d4240 <_ZN7Encoder16interruptHandlerEv+0x13c>)
   d4110:	f3bf 8f5b 	dmb	ish
   d4114:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   d4118:	4604      	mov	r4, r0
   d411a:	d109      	bne.n	d4130 <_ZN7Encoder16interruptHandlerEv+0x2c>
   d411c:	4630      	mov	r0, r6
   d411e:	f7ff ffcb 	bl	d40b8 <__cxa_guard_acquire>
   d4122:	b128      	cbz	r0, d4130 <_ZN7Encoder16interruptHandlerEv+0x2c>
   d4124:	f002 f85a 	bl	d61dc <HAL_Pin_Map>
   d4128:	6028      	str	r0, [r5, #0]
   d412a:	4630      	mov	r0, r6
   d412c:	f7ff ffc9 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4130:	fa1f f887 	uxth.w	r8, r7
   d4134:	682b      	ldr	r3, [r5, #0]
   d4136:	ea4f 1808 	mov.w	r8, r8, lsl #4
   d413a:	f813 7008 	ldrb.w	r7, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d413e:	7833      	ldrb	r3, [r6, #0]
   d4140:	f3bf 8f5b 	dmb	ish
   d4144:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4146:	ea4f 1947 	mov.w	r9, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d414a:	d409      	bmi.n	d4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   d414c:	483b      	ldr	r0, [pc, #236]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d414e:	f7ff ffb3 	bl	d40b8 <__cxa_guard_acquire>
   d4152:	b128      	cbz	r0, d4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   d4154:	f002 f842 	bl	d61dc <HAL_Pin_Map>
   d4158:	6028      	str	r0, [r5, #0]
   d415a:	4838      	ldr	r0, [pc, #224]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d415c:	f7ff ffb1 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4160:	682b      	ldr	r3, [r5, #0]
   d4162:	4443      	add	r3, r8
   d4164:	785f      	ldrb	r7, [r3, #1]
   d4166:	f007 071f 	and.w	r7, r7, #31
   d416a:	ea47 0709 	orr.w	r7, r7, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d416e:	4638      	mov	r0, r7
   d4170:	f7ff ffac 	bl	d40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4174:	4638      	mov	r0, r7
   d4176:	f7ff ffa9 	bl	d40cc <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d417a:	f8d4 800c 	ldr.w	r8, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d417e:	7833      	ldrb	r3, [r6, #0]
   d4180:	f3bf 8f5b 	dmb	ish
   d4184:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   d4186:	b2c7      	uxtb	r7, r0
   d4188:	d409      	bmi.n	d419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   d418a:	482c      	ldr	r0, [pc, #176]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d418c:	f7ff ff94 	bl	d40b8 <__cxa_guard_acquire>
   d4190:	b128      	cbz	r0, d419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   d4192:	f002 f823 	bl	d61dc <HAL_Pin_Map>
   d4196:	6028      	str	r0, [r5, #0]
   d4198:	4828      	ldr	r0, [pc, #160]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d419a:	f7ff ff92 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d419e:	fa1f f888 	uxth.w	r8, r8
   d41a2:	682b      	ldr	r3, [r5, #0]
   d41a4:	ea4f 1808 	mov.w	r8, r8, lsl #4
   d41a8:	f813 9008 	ldrb.w	r9, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41ac:	7833      	ldrb	r3, [r6, #0]
   d41ae:	f3bf 8f5b 	dmb	ish
   d41b2:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41b4:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41b8:	d409      	bmi.n	d41ce <_ZN7Encoder16interruptHandlerEv+0xca>
   d41ba:	4820      	ldr	r0, [pc, #128]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d41bc:	f7ff ff7c 	bl	d40b8 <__cxa_guard_acquire>
   d41c0:	b128      	cbz	r0, d41ce <_ZN7Encoder16interruptHandlerEv+0xca>
   d41c2:	f002 f80b 	bl	d61dc <HAL_Pin_Map>
   d41c6:	6028      	str	r0, [r5, #0]
   d41c8:	481c      	ldr	r0, [pc, #112]	; (d423c <_ZN7Encoder16interruptHandlerEv+0x138>)
   d41ca:	f7ff ff7a 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41ce:	682b      	ldr	r3, [r5, #0]
   d41d0:	4498      	add	r8, r3
   d41d2:	f898 5001 	ldrb.w	r5, [r8, #1]
   d41d6:	f005 051f 	and.w	r5, r5, #31
   d41da:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   d41de:	4628      	mov	r0, r5
   d41e0:	f7ff ff74 	bl	d40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d41e4:	4628      	mov	r0, r5
   d41e6:	f7ff ff71 	bl	d40cc <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   d41ea:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   d41ec:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   d41ee:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   d41f2:	b10f      	cbz	r7, d41f8 <_ZN7Encoder16interruptHandlerEv+0xf4>
   d41f4:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   d41f8:	b108      	cbz	r0, d41fe <_ZN7Encoder16interruptHandlerEv+0xfa>
   d41fa:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   d41fe:	109a      	asrs	r2, r3, #2
   d4200:	3b01      	subs	r3, #1
   d4202:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   d4204:	2b0d      	cmp	r3, #13
   d4206:	d80b      	bhi.n	d4220 <_ZN7Encoder16interruptHandlerEv+0x11c>
   d4208:	e8df f003 	tbb	[pc, r3]
   d420c:	0c100c07 	.word	0x0c100c07
   d4210:	0707140a 	.word	0x0707140a
   d4214:	100c0a14 	.word	0x100c0a14
   d4218:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   d421a:	6963      	ldr	r3, [r4, #20]
   d421c:	3301      	adds	r3, #1
   d421e:	6163      	str	r3, [r4, #20]
				return;
			case 6: case 9:
				position -= 2;
				return;
		}
	}
   d4220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   d4224:	6963      	ldr	r3, [r4, #20]
   d4226:	3b01      	subs	r3, #1
   d4228:	6163      	str	r3, [r4, #20]
				return;
   d422a:	e7f9      	b.n	d4220 <_ZN7Encoder16interruptHandlerEv+0x11c>
				position += 2;
   d422c:	6963      	ldr	r3, [r4, #20]
   d422e:	3302      	adds	r3, #2
   d4230:	6163      	str	r3, [r4, #20]
				return;
   d4232:	e7f5      	b.n	d4220 <_ZN7Encoder16interruptHandlerEv+0x11c>
				position -= 2;
   d4234:	6963      	ldr	r3, [r4, #20]
   d4236:	3b02      	subs	r3, #2
   d4238:	6163      	str	r3, [r4, #20]
				return;
   d423a:	e7f1      	b.n	d4220 <_ZN7Encoder16interruptHandlerEv+0x11c>
   d423c:	2003e3bc 	.word	0x2003e3bc
   d4240:	2003e3c0 	.word	0x2003e3c0

000d4244 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4244:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4246:	6984      	ldr	r4, [r0, #24]
   d4248:	4b0a      	ldr	r3, [pc, #40]	; (d4274 <_ZN9TCPClientD1Ev+0x30>)
   d424a:	6003      	str	r3, [r0, #0]
   d424c:	4605      	mov	r5, r0
   d424e:	b17c      	cbz	r4, d4270 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4250:	6863      	ldr	r3, [r4, #4]
   d4252:	3b01      	subs	r3, #1
   d4254:	6063      	str	r3, [r4, #4]
   d4256:	b95b      	cbnz	r3, d4270 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d4258:	6823      	ldr	r3, [r4, #0]
   d425a:	4620      	mov	r0, r4
   d425c:	689b      	ldr	r3, [r3, #8]
   d425e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4260:	68a3      	ldr	r3, [r4, #8]
   d4262:	3b01      	subs	r3, #1
   d4264:	60a3      	str	r3, [r4, #8]
   d4266:	b91b      	cbnz	r3, d4270 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4268:	6823      	ldr	r3, [r4, #0]
   d426a:	4620      	mov	r0, r4
   d426c:	68db      	ldr	r3, [r3, #12]
   d426e:	4798      	blx	r3
   d4270:	4628      	mov	r0, r5
   d4272:	bd38      	pop	{r3, r4, r5, pc}
   d4274:	000db110 	.word	0x000db110

000d4278 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4278:	b510      	push	{r4, lr}
   d427a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d427c:	6800      	ldr	r0, [r0, #0]
   d427e:	b108      	cbz	r0, d4284 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4280:	f002 fa48 	bl	d6714 <free>
class SystemClass {
   d4284:	4620      	mov	r0, r4
   d4286:	bd10      	pop	{r4, pc}

000d4288 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4288:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d428a:	b538      	push	{r3, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
	  switch (__op)
   d428e:	d007      	beq.n	d42a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d4290:	2a03      	cmp	r2, #3
   d4292:	d011      	beq.n	d42b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x30>
   d4294:	2a01      	cmp	r2, #1
   d4296:	d101      	bne.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4298:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d429a:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d429c:	2000      	movs	r0, #0
   d429e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d42a0:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d42a2:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d42a4:	f7ff fef7 	bl	d4096 <_Znwj>
   d42a8:	4603      	mov	r3, r0
   d42aa:	b118      	cbz	r0, d42b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2c>
   d42ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d42b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  __dest._M_access<_Functor*>() =
   d42b4:	6023      	str	r3, [r4, #0]
	}
   d42b6:	e7f1      	b.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d42b8:	6800      	ldr	r0, [r0, #0]
   d42ba:	2800      	cmp	r0, #0
   d42bc:	d0ee      	beq.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d42be:	210c      	movs	r1, #12
   d42c0:	f003 fd8d 	bl	d7dde <_ZdlPvj>
   d42c4:	e7ea      	b.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d42c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d42c6:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   d42c8:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d42ca:	685a      	ldr	r2, [r3, #4]
   d42cc:	6899      	ldr	r1, [r3, #8]
   d42ce:	681b      	ldr	r3, [r3, #0]
   d42d0:	1054      	asrs	r4, r2, #1
   d42d2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d42d6:	07d2      	lsls	r2, r2, #31
   d42d8:	bf48      	it	mi
   d42da:	590a      	ldrmi	r2, [r1, r4]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d42dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   d42e0:	bf48      	it	mi
   d42e2:	58d3      	ldrmi	r3, [r2, r3]
   d42e4:	4718      	bx	r3

000d42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42e6:	b40e      	push	{r1, r2, r3}
   d42e8:	b503      	push	{r0, r1, lr}
   d42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42f4:	f002 fd1b 	bl	d6d2e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d42f8:	b002      	add	sp, #8
   d42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   d42fe:	b003      	add	sp, #12
   d4300:	4770      	bx	lr

000d4302 <_ZN9TCPClientD0Ev>:
   d4302:	b510      	push	{r4, lr}
   d4304:	4604      	mov	r4, r0
   d4306:	f7ff ff9d 	bl	d4244 <_ZN9TCPClientD1Ev>
   d430a:	4620      	mov	r0, r4
   d430c:	211c      	movs	r1, #28
   d430e:	f003 fd66 	bl	d7dde <_ZdlPvj>
   d4312:	4620      	mov	r0, r4
   d4314:	bd10      	pop	{r4, pc}
	...

000d4318 <setup>:
int16_t ax, ay, az;
int16_t gx, gy, gz;


// setup() runs once, when the device is first turned on.
void setup() {
   d4318:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d431c:	f002 ff32 	bl	d7184 <_Z16_fetch_usbserialv>
   d4320:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4324:	f002 ff22 	bl	d716c <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d4328:	f003 f818 	bl	d735c <_Z22__fetch_global_Serial1v>
   d432c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4330:	f003 f810 	bl	d7354 <_ZN11USARTSerial5beginEm>

  pinMode(GREENPIN, OUTPUT);
   d4334:	2101      	movs	r1, #1
   d4336:	200b      	movs	r0, #11
   d4338:	f003 fcac 	bl	d7c94 <pinMode>
  pinMode(REDPIN, OUTPUT);
   d433c:	2101      	movs	r1, #1
   d433e:	200c      	movs	r0, #12
   d4340:	f003 fca8 	bl	d7c94 <pinMode>
  pinMode (ENCODERSWITCH, INPUT);
   d4344:	2100      	movs	r1, #0
   d4346:	200d      	movs	r0, #13
   d4348:	f003 fca4 	bl	d7c94 <pinMode>
  pinMode (PUMPBUTTON, INPUT_PULLDOWN);
   d434c:	2103      	movs	r1, #3
   d434e:	200e      	movs	r0, #14
   d4350:	f003 fca0 	bl	d7c94 <pinMode>
  pinMode(PUMPOUT, OUTPUT);

  for (i = 0; i <= 127; i++)
   d4354:	4c6b      	ldr	r4, [pc, #428]	; (d4504 <setup+0x1ec>)
  {
    Wire.beginTransmission (i);
    //Serial.printf("Wire transmission end returned: %i \n",Wire.endTransmission());
    if (Wire.endTransmission () == 0)
      {
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d4356:	4e6c      	ldr	r6, [pc, #432]	; (d4508 <setup+0x1f0>)
      count++;
   d4358:	4d6c      	ldr	r5, [pc, #432]	; (d450c <setup+0x1f4>)
  pinMode(PUMPOUT, OUTPUT);
   d435a:	2101      	movs	r1, #1
   d435c:	2011      	movs	r0, #17
   d435e:	f003 fc99 	bl	d7c94 <pinMode>
  for (i = 0; i <= 127; i++)
   d4362:	2300      	movs	r3, #0
   d4364:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission (i);
   d4366:	f003 fd0d 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d436a:	6821      	ldr	r1, [r4, #0]
   d436c:	f003 f894 	bl	d7498 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission () == 0)
   d4370:	f003 fd08 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d4374:	f003 f897 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
   d4378:	b960      	cbnz	r0, d4394 <setup+0x7c>
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d437a:	f002 ff03 	bl	d7184 <_Z16_fetch_usbserialv>
   d437e:	6823      	ldr	r3, [r4, #0]
   d4380:	4631      	mov	r1, r6
   d4382:	461a      	mov	r2, r3
   d4384:	f7ff ffaf 	bl	d42e6 <_ZN5Print6printfEPKcz>
      count++;
   d4388:	682b      	ldr	r3, [r5, #0]
      delay (1);
   d438a:	2001      	movs	r0, #1
      count++;
   d438c:	3301      	adds	r3, #1
   d438e:	602b      	str	r3, [r5, #0]
      delay (1);
   d4390:	f002 fd64 	bl	d6e5c <delay>
  for (i = 0; i <= 127; i++)
   d4394:	6823      	ldr	r3, [r4, #0]
   d4396:	3301      	adds	r3, #1
   d4398:	2b7f      	cmp	r3, #127	; 0x7f
   d439a:	6023      	str	r3, [r4, #0]
   d439c:	dde3      	ble.n	d4366 <setup+0x4e>
      } 
  }
  Serial.printf("Done: Found %i device(s). \n",count);
   d439e:	f002 fef1 	bl	d7184 <_Z16_fetch_usbserialv>
   d43a2:	4b5a      	ldr	r3, [pc, #360]	; (d450c <setup+0x1f4>)
   d43a4:	495a      	ldr	r1, [pc, #360]	; (d4510 <setup+0x1f8>)
   d43a6:	681a      	ldr	r2, [r3, #0]
  //   delay(100);
  // }
  pixel.begin();
    pixel.show();
    for (int i = 0; i < PIXELCOUNT; i++){
      pixel.clear();
   d43a8:	4c5a      	ldr	r4, [pc, #360]	; (d4514 <setup+0x1fc>)
      pixel.show();
      pixel.setPixelColor(i, random(255), random(255), random(255));
      pixel.setBrightness(pixelBrightness);
   d43aa:	f8df 8194 	ldr.w	r8, [pc, #404]	; d4540 <setup+0x228>
  Serial.printf("Done: Found %i device(s). \n",count);
   d43ae:	f7ff ff9a 	bl	d42e6 <_ZN5Print6printfEPKcz>
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
   d43b2:	223c      	movs	r2, #60	; 0x3c
   d43b4:	2102      	movs	r1, #2
   d43b6:	4858      	ldr	r0, [pc, #352]	; (d4518 <setup+0x200>)
   d43b8:	f001 fbc0 	bl	d5b3c <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d43bc:	4856      	ldr	r0, [pc, #344]	; (d4518 <setup+0x200>)
   d43be:	f001 fb4d 	bl	d5a5c <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
   d43c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43c6:	f002 fd49 	bl	d6e5c <delay>
  display.clearDisplay();
   d43ca:	4853      	ldr	r0, [pc, #332]	; (d4518 <setup+0x200>)
   d43cc:	f001 faea 	bl	d59a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(2);
   d43d0:	4851      	ldr	r0, [pc, #324]	; (d4518 <setup+0x200>)
   d43d2:	2102      	movs	r1, #2
   d43d4:	f001 fe3d 	bl	d6052 <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);             // Normal 1:1 pixel scale
   d43d8:	484f      	ldr	r0, [pc, #316]	; (d4518 <setup+0x200>)
   d43da:	2101      	movs	r1, #1
   d43dc:	f001 fe2f 	bl	d603e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   d43e0:	484d      	ldr	r0, [pc, #308]	; (d4518 <setup+0x200>)
   d43e2:	2101      	movs	r1, #1
   d43e4:	f001 fe30 	bl	d6048 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d43e8:	2200      	movs	r2, #0
   d43ea:	4611      	mov	r1, r2
   d43ec:	484a      	ldr	r0, [pc, #296]	; (d4518 <setup+0x200>)
   d43ee:	f001 fe23 	bl	d6038 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("CYBERBASS BOOTING UP!");
   d43f2:	494a      	ldr	r1, [pc, #296]	; (d451c <setup+0x204>)
   d43f4:	4848      	ldr	r0, [pc, #288]	; (d4518 <setup+0x200>)
   d43f6:	f002 fc72 	bl	d6cde <_ZN5Print7printlnEPKc>
  display.display();
   d43fa:	4847      	ldr	r0, [pc, #284]	; (d4518 <setup+0x200>)
   d43fc:	f001 fb2e 	bl	d5a5c <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d4400:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4404:	f002 fd2a 	bl	d6e5c <delay>
  Serial.printf("Connecting to Internet \n");
   d4408:	f002 febc 	bl	d7184 <_Z16_fetch_usbserialv>
   d440c:	4944      	ldr	r1, [pc, #272]	; (d4520 <setup+0x208>)
   d440e:	f7ff ff6a 	bl	d42e6 <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   d4412:	4841      	ldr	r0, [pc, #260]	; (d4518 <setup+0x200>)
   d4414:	f001 fac6 	bl	d59a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);
   d4418:	2200      	movs	r2, #0
   d441a:	4611      	mov	r1, r2
   d441c:	483e      	ldr	r0, [pc, #248]	; (d4518 <setup+0x200>)
   d441e:	f001 fe0b 	bl	d6038 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Connecting to Infonet\n");
   d4422:	4940      	ldr	r1, [pc, #256]	; (d4524 <setup+0x20c>)
   d4424:	483c      	ldr	r0, [pc, #240]	; (d4518 <setup+0x200>)
   d4426:	f7ff ff5e 	bl	d42e6 <_ZN5Print6printfEPKcz>
  display.display();
   d442a:	483b      	ldr	r0, [pc, #236]	; (d4518 <setup+0x200>)
   d442c:	f001 fb16 	bl	d5a5c <_ZN16Adafruit_SSD13067displayEv>
  pixel.begin();
   d4430:	4838      	ldr	r0, [pc, #224]	; (d4514 <setup+0x1fc>)
   d4432:	f000 fd54 	bl	d4ede <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   d4436:	4837      	ldr	r0, [pc, #220]	; (d4514 <setup+0x1fc>)
   d4438:	f000 fd8a 	bl	d4f50 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < PIXELCOUNT; i++){
   d443c:	2500      	movs	r5, #0
      pixel.clear();
   d443e:	4620      	mov	r0, r4
   d4440:	f000 ff80 	bl	d5344 <_ZN17Adafruit_NeoPixel5clearEv>
      pixel.show();
   d4444:	4620      	mov	r0, r4
   d4446:	f000 fd83 	bl	d4f50 <_ZN17Adafruit_NeoPixel4showEv>
      pixel.setPixelColor(i, random(255), random(255), random(255));
   d444a:	20ff      	movs	r0, #255	; 0xff
   d444c:	f003 f82e 	bl	d74ac <_Z6randomi>
   d4450:	4606      	mov	r6, r0
   d4452:	20ff      	movs	r0, #255	; 0xff
   d4454:	f003 f82a 	bl	d74ac <_Z6randomi>
   d4458:	4607      	mov	r7, r0
   d445a:	20ff      	movs	r0, #255	; 0xff
   d445c:	f003 f826 	bl	d74ac <_Z6randomi>
   d4460:	b2c0      	uxtb	r0, r0
   d4462:	b2fb      	uxtb	r3, r7
   d4464:	b2f2      	uxtb	r2, r6
   d4466:	b2a9      	uxth	r1, r5
   d4468:	9000      	str	r0, [sp, #0]
   d446a:	4620      	mov	r0, r4
   d446c:	f000 ff16 	bl	d529c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
      pixel.setBrightness(pixelBrightness);
   d4470:	f898 1000 	ldrb.w	r1, [r8]
   d4474:	4620      	mov	r0, r4
   d4476:	f000 ff3f 	bl	d52f8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
      pixel.show();
   d447a:	4620      	mov	r0, r4
   d447c:	f000 fd68 	bl	d4f50 <_ZN17Adafruit_NeoPixel4showEv>
      delay(25);
   d4480:	2019      	movs	r0, #25
   d4482:	f002 fceb 	bl	d6e5c <delay>
      pixel.clear();
   d4486:	4620      	mov	r0, r4
   d4488:	f000 ff5c 	bl	d5344 <_ZN17Adafruit_NeoPixel5clearEv>
    for (int i = 0; i < PIXELCOUNT; i++){
   d448c:	3501      	adds	r5, #1
      pixel.show();
   d448e:	4620      	mov	r0, r4
   d4490:	f000 fd5e 	bl	d4f50 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < PIXELCOUNT; i++){
   d4494:	2d40      	cmp	r5, #64	; 0x40
   d4496:	d1d2      	bne.n	d443e <setup+0x126>
  }
  Time.zone(-6);
   d4498:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d449c:	f002 fcb4 	bl	d6e08 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44a0:	f002 f918 	bl	d66d4 <spark_cloud_flag_connected>
        if (!connected()) {
   d44a4:	b110      	cbz	r0, d44ac <setup+0x194>
        return spark_sync_time(NULL);
   d44a6:	2000      	movs	r0, #0
   d44a8:	f002 f91c 	bl	d66e4 <spark_sync_time>
  Particle.syncTime();
  delay(100); //wait for Serial Monitor to startup
   d44ac:	2064      	movs	r0, #100	; 0x64
   d44ae:	f002 fcd5 	bl	d6e5c <delay>


  //Setup BME
  bme.begin(0x76);
   d44b2:	2176      	movs	r1, #118	; 0x76
   d44b4:	481c      	ldr	r0, [pc, #112]	; (d4528 <setup+0x210>)
   d44b6:	f000 fcdc 	bl	d4e72 <_ZN15Adafruit_BME2805beginEh>
  pixel.clear();
   d44ba:	4816      	ldr	r0, [pc, #88]	; (d4514 <setup+0x1fc>)
   d44bc:	f000 ff42 	bl	d5344 <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.show();
   d44c0:	4814      	ldr	r0, [pc, #80]	; (d4514 <setup+0x1fc>)
   d44c2:	f000 fd45 	bl	d4f50 <_ZN17Adafruit_NeoPixel4showEv>

  Serial.println("Initializing I2C devices...");
   d44c6:	f002 fe5d 	bl	d7184 <_Z16_fetch_usbserialv>
   d44ca:	4918      	ldr	r1, [pc, #96]	; (d452c <setup+0x214>)
   d44cc:	f002 fc07 	bl	d6cde <_ZN5Print7printlnEPKc>
  accelgyro.initialize();
   d44d0:	4817      	ldr	r0, [pc, #92]	; (d4530 <setup+0x218>)
   d44d2:	f000 ff6f 	bl	d53b4 <_ZN7MPU605010initializeEv>

    // Cerify the connection:
  Serial.println("Testing device connections...");
   d44d6:	f002 fe55 	bl	d7184 <_Z16_fetch_usbserialv>
   d44da:	4916      	ldr	r1, [pc, #88]	; (d4534 <setup+0x21c>)
   d44dc:	f002 fbff 	bl	d6cde <_ZN5Print7printlnEPKc>
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
   d44e0:	f002 fe50 	bl	d7184 <_Z16_fetch_usbserialv>
   d44e4:	4604      	mov	r4, r0
   d44e6:	4812      	ldr	r0, [pc, #72]	; (d4530 <setup+0x218>)
   d44e8:	f000 ff8c 	bl	d5404 <_ZN7MPU605014testConnectionEv>
   d44ec:	4a12      	ldr	r2, [pc, #72]	; (d4538 <setup+0x220>)
   d44ee:	4913      	ldr	r1, [pc, #76]	; (d453c <setup+0x224>)
   d44f0:	2800      	cmp	r0, #0
   d44f2:	bf18      	it	ne
   d44f4:	4611      	movne	r1, r2
   d44f6:	4620      	mov	r0, r4
    

}
   d44f8:	b002      	add	sp, #8
   d44fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
   d44fe:	f002 bbee 	b.w	d6cde <_ZN5Print7printlnEPKc>
   d4502:	bf00      	nop
   d4504:	2003e4a4 	.word	0x2003e4a4
   d4508:	000da830 	.word	0x000da830
   d450c:	2003e458 	.word	0x2003e458
   d4510:	000da84f 	.word	0x000da84f
   d4514:	2003e57c 	.word	0x2003e57c
   d4518:	2003e45c 	.word	0x2003e45c
   d451c:	000da86b 	.word	0x000da86b
   d4520:	000da881 	.word	0x000da881
   d4524:	000da89a 	.word	0x000da89a
   d4528:	2003e408 	.word	0x2003e408
   d452c:	000da8b1 	.word	0x000da8b1
   d4530:	2003e3f8 	.word	0x2003e3f8
   d4534:	000da8cd 	.word	0x000da8cd
   d4538:	000da7f8 	.word	0x000da7f8
   d453c:	000da816 	.word	0x000da816
   d4540:	2003ddc4 	.word	0x2003ddc4

000d4544 <_Z10handleCmds6String>:
float convertToInHg( float pascals){
  float mercury = pascals / 3386.389;
  return mercury;
}

bool handleCmds( String cmd ) {
   d4544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4546:	4601      	mov	r1, r0
    String p = cmd;
   d4548:	4668      	mov	r0, sp
   d454a:	f002 fb20 	bl	d6b8e <_ZN6StringC1ERKS_>
    
        p.trim();
   d454e:	4668      	mov	r0, sp
   d4550:	f002 fb28 	bl	d6ba4 <_ZN6String4trimEv>
        float freq = p.toFloat();
   d4554:	4668      	mov	r0, sp
   d4556:	f002 fb4f 	bl	d6bf8 <_ZNK6String7toFloatEv>
    String p = cmd;
   d455a:	4668      	mov	r0, sp
   d455c:	f002 faa9 	bl	d6ab2 <_ZN6StringD1Ev>

000d4560 <loop>:
void loop() {
   d4560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool bloody = digitalRead(PUMPBUTTON);
   d4562:	200e      	movs	r0, #14
   d4564:	f003 fbc0 	bl	d7ce8 <digitalRead>
  if(bloody){
   d4568:	4601      	mov	r1, r0
   d456a:	b1e0      	cbz	r0, d45a6 <loop+0x46>
    digitalWrite(PUMPOUT, HIGH);
   d456c:	2101      	movs	r1, #1
   d456e:	2011      	movs	r0, #17
   d4570:	f003 fba1 	bl	d7cb6 <digitalWrite>
    Serial.println("BUTTON PRESSED");
   d4574:	f002 fe06 	bl	d7184 <_Z16_fetch_usbserialv>
   d4578:	490e      	ldr	r1, [pc, #56]	; (d45b4 <loop+0x54>)
   d457a:	f002 fbb0 	bl	d6cde <_ZN5Print7printlnEPKc>
  if (Serial1.available()) {
   d457e:	f002 feed 	bl	d735c <_Z22__fetch_global_Serial1v>
   d4582:	6803      	ldr	r3, [r0, #0]
   d4584:	691b      	ldr	r3, [r3, #16]
   d4586:	4798      	blx	r3
   d4588:	b188      	cbz	r0, d45ae <loop+0x4e>
        Serial1.readBytesUntil('\n', buffer, 10);
   d458a:	f002 fee7 	bl	d735c <_Z22__fetch_global_Serial1v>
   d458e:	230a      	movs	r3, #10
   d4590:	4619      	mov	r1, r3
   d4592:	4a09      	ldr	r2, [pc, #36]	; (d45b8 <loop+0x58>)
   d4594:	f002 fc11 	bl	d6dba <_ZN6Stream14readBytesUntilEcPcj>
        handleCmds( buffer );
   d4598:	4907      	ldr	r1, [pc, #28]	; (d45b8 <loop+0x58>)
   d459a:	4668      	mov	r0, sp
   d459c:	f002 fad4 	bl	d6b48 <_ZN6StringC1EPKc>
   d45a0:	4668      	mov	r0, sp
   d45a2:	f7ff ffcf 	bl	d4544 <_Z10handleCmds6String>
    digitalWrite(PUMPOUT, LOW);
   d45a6:	2011      	movs	r0, #17
   d45a8:	f003 fb85 	bl	d7cb6 <digitalWrite>
   d45ac:	e7e7      	b.n	d457e <loop+0x1e>
}
   d45ae:	b005      	add	sp, #20
   d45b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d45b4:	000da8eb 	.word	0x000da8eb
   d45b8:	2003e44c 	.word	0x2003e44c

000d45bc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d45bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d45be:	b08d      	sub	sp, #52	; 0x34
   d45c0:	ad02      	add	r5, sp, #8
   d45c2:	e885 0006 	stmia.w	r5, {r1, r2}
   d45c6:	4606      	mov	r6, r0
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d45c8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d45cc:	ac05      	add	r4, sp, #20
   d45ce:	e884 0005 	stmia.w	r4, {r0, r2}
   d45d2:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d45d4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d45d6:	2300      	movs	r3, #0
   d45d8:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d45da:	f7ff fd5c 	bl	d4096 <_Znwj>
   d45de:	4602      	mov	r2, r0
   d45e0:	b120      	cbz	r0, d45ec <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x30>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d45e2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d45e6:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d45ea:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d45ec:	4b0c      	ldr	r3, [pc, #48]	; (d4620 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x64>)
   d45ee:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d45f0:	4b0c      	ldr	r3, [pc, #48]	; (d4624 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x68>)
   d45f2:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d45f4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d45f8:	9208      	str	r2, [sp, #32]
   d45fa:	9300      	str	r3, [sp, #0]
   d45fc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d4600:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   d4604:	a908      	add	r1, sp, #32
   d4606:	4630      	mov	r0, r6
   d4608:	f002 fe1a 	bl	d7240 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   d460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d460e:	4604      	mov	r4, r0
   d4610:	b11b      	cbz	r3, d461a <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah+0x5e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4612:	a908      	add	r1, sp, #32
   d4614:	2203      	movs	r2, #3
   d4616:	4608      	mov	r0, r1
   d4618:	4798      	blx	r3
}
   d461a:	4620      	mov	r0, r4
   d461c:	b00d      	add	sp, #52	; 0x34
   d461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4620:	000d42c7 	.word	0x000d42c7
   d4624:	000d4289 	.word	0x000d4289

000d4628 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   d4628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d462c:	4688      	mov	r8, r1
   d462e:	4604      	mov	r4, r0
   d4630:	4617      	mov	r7, r2
   d4632:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   d4634:	2102      	movs	r1, #2
   d4636:	4640      	mov	r0, r8
   d4638:	f003 fb2c 	bl	d7c94 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   d463c:	2102      	movs	r1, #2
   d463e:	4638      	mov	r0, r7
   d4640:	f003 fb28 	bl	d7c94 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4644:	4e52      	ldr	r6, [pc, #328]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   d4646:	60e7      	str	r7, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   d4648:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   d464a:	e9c4 3801 	strd	r3, r8, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   d464e:	6023      	str	r3, [r4, #0]
		position = 0;
   d4650:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4652:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4656:	f001 fe09 	bl	d626c <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   d465a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   d465e:	7833      	ldrb	r3, [r6, #0]
   d4660:	4d4c      	ldr	r5, [pc, #304]	; (d4794 <_ZN7EncoderC1Ett+0x16c>)
   d4662:	f3bf 8f5b 	dmb	ish
   d4666:	f013 0f01 	tst.w	r3, #1
   d466a:	d109      	bne.n	d4680 <_ZN7EncoderC1Ett+0x58>
   d466c:	4630      	mov	r0, r6
   d466e:	f7ff fd23 	bl	d40b8 <__cxa_guard_acquire>
   d4672:	b128      	cbz	r0, d4680 <_ZN7EncoderC1Ett+0x58>
   d4674:	f001 fdb2 	bl	d61dc <HAL_Pin_Map>
   d4678:	6028      	str	r0, [r5, #0]
   d467a:	4630      	mov	r0, r6
   d467c:	f7ff fd21 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4680:	fa1f fb8b 	uxth.w	fp, fp
   d4684:	682b      	ldr	r3, [r5, #0]
   d4686:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d468a:	f813 900b 	ldrb.w	r9, [r3, fp]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d468e:	7833      	ldrb	r3, [r6, #0]
   d4690:	f3bf 8f5b 	dmb	ish
   d4694:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4696:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d469a:	d409      	bmi.n	d46b0 <_ZN7EncoderC1Ett+0x88>
   d469c:	483c      	ldr	r0, [pc, #240]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d469e:	f7ff fd0b 	bl	d40b8 <__cxa_guard_acquire>
   d46a2:	b128      	cbz	r0, d46b0 <_ZN7EncoderC1Ett+0x88>
   d46a4:	f001 fd9a 	bl	d61dc <HAL_Pin_Map>
   d46a8:	6028      	str	r0, [r5, #0]
   d46aa:	4839      	ldr	r0, [pc, #228]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d46ac:	f7ff fd09 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46b0:	682b      	ldr	r3, [r5, #0]
   d46b2:	445b      	add	r3, fp
   d46b4:	f893 9001 	ldrb.w	r9, [r3, #1]
   d46b8:	f009 091f 	and.w	r9, r9, #31
   d46bc:	ea49 090a 	orr.w	r9, r9, sl
    (void)nrf_gpio_pin_read(nrf_pin);
   d46c0:	4648      	mov	r0, r9
   d46c2:	f7ff fd03 	bl	d40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d46c6:	4648      	mov	r0, r9
   d46c8:	f7ff fd00 	bl	d40cc <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d46cc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46d0:	7833      	ldrb	r3, [r6, #0]
   d46d2:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   d46d6:	f1b0 0900 	subs.w	r9, r0, #0
   d46da:	bf18      	it	ne
   d46dc:	f04f 0901 	movne.w	r9, #1
   d46e0:	07da      	lsls	r2, r3, #31
   d46e2:	d409      	bmi.n	d46f8 <_ZN7EncoderC1Ett+0xd0>
   d46e4:	482a      	ldr	r0, [pc, #168]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d46e6:	f7ff fce7 	bl	d40b8 <__cxa_guard_acquire>
   d46ea:	b128      	cbz	r0, d46f8 <_ZN7EncoderC1Ett+0xd0>
   d46ec:	f001 fd76 	bl	d61dc <HAL_Pin_Map>
   d46f0:	6028      	str	r0, [r5, #0]
   d46f2:	4827      	ldr	r0, [pc, #156]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d46f4:	f7ff fce5 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46f8:	fa1f fb8b 	uxth.w	fp, fp
   d46fc:	682b      	ldr	r3, [r5, #0]
   d46fe:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4702:	f813 a00b 	ldrb.w	sl, [r3, fp]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4706:	7833      	ldrb	r3, [r6, #0]
   d4708:	f3bf 8f5b 	dmb	ish
   d470c:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d470e:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4712:	d409      	bmi.n	d4728 <_ZN7EncoderC1Ett+0x100>
   d4714:	481e      	ldr	r0, [pc, #120]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d4716:	f7ff fccf 	bl	d40b8 <__cxa_guard_acquire>
   d471a:	b128      	cbz	r0, d4728 <_ZN7EncoderC1Ett+0x100>
   d471c:	f001 fd5e 	bl	d61dc <HAL_Pin_Map>
   d4720:	6028      	str	r0, [r5, #0]
   d4722:	481b      	ldr	r0, [pc, #108]	; (d4790 <_ZN7EncoderC1Ett+0x168>)
   d4724:	f7ff fccd 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4728:	682b      	ldr	r3, [r5, #0]
   d472a:	449b      	add	fp, r3
   d472c:	f89b 5001 	ldrb.w	r5, [fp, #1]
   d4730:	f005 051f 	and.w	r5, r5, #31
   d4734:	ea45 050a 	orr.w	r5, r5, sl
    (void)nrf_gpio_pin_read(nrf_pin);
   d4738:	4628      	mov	r0, r5
   d473a:	f7ff fcc7 	bl	d40cc <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d473e:	4628      	mov	r0, r5
   d4740:	f7ff fcc4 	bl	d40cc <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   d4744:	b108      	cbz	r0, d474a <_ZN7EncoderC1Ett+0x122>
   d4746:	f049 0902 	orr.w	r9, r9, #2
		state = s;
   d474a:	f884 9010 	strb.w	r9, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   d474e:	f8df 9048 	ldr.w	r9, [pc, #72]	; d4798 <_ZN7EncoderC1Ett+0x170>
   d4752:	f8cd 9010 	str.w	r9, [sp, #16]
   d4756:	2500      	movs	r5, #0
   d4758:	f04f 36ff 	mov.w	r6, #4294967295
   d475c:	4623      	mov	r3, r4
   d475e:	462a      	mov	r2, r5
   d4760:	4649      	mov	r1, r9
   d4762:	e9cd 5600 	strd	r5, r6, [sp]
   d4766:	9502      	str	r5, [sp, #8]
   d4768:	4640      	mov	r0, r8
   d476a:	9505      	str	r5, [sp, #20]
   d476c:	f7ff ff26 	bl	d45bc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   d4770:	e9cd 9506 	strd	r9, r5, [sp, #24]
   d4774:	e9cd 6501 	strd	r6, r5, [sp, #4]
   d4778:	9500      	str	r5, [sp, #0]
   d477a:	aa08      	add	r2, sp, #32
   d477c:	e912 0006 	ldmdb	r2, {r1, r2}
   d4780:	4623      	mov	r3, r4
   d4782:	4638      	mov	r0, r7
   d4784:	f7ff ff1a 	bl	d45bc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah>
	}
   d4788:	4620      	mov	r0, r4
   d478a:	b009      	add	sp, #36	; 0x24
   d478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4790:	2003e3bc 	.word	0x2003e3bc
   d4794:	2003e3c0 	.word	0x2003e3c0
   d4798:	000d4105 	.word	0x000d4105

000d479c <_ZN16Adafruit_SSD1306D0Ev>:
   d479c:	b510      	push	{r4, lr}
   d479e:	2124      	movs	r1, #36	; 0x24
   d47a0:	4604      	mov	r4, r0
   d47a2:	f003 fb1c 	bl	d7dde <_ZdlPvj>
   d47a6:	4620      	mov	r0, r4
   d47a8:	bd10      	pop	{r4, pc}

000d47aa <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d47aa:	b510      	push	{r4, lr}
   d47ac:	21d4      	movs	r1, #212	; 0xd4
   d47ae:	4604      	mov	r4, r0
   d47b0:	f003 fb15 	bl	d7dde <_ZdlPvj>
   d47b4:	4620      	mov	r0, r4
   d47b6:	bd10      	pop	{r4, pc}

000d47b8 <_GLOBAL__sub_I_SystemMode>:

   d47b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   d47ba:	4c34      	ldr	r4, [pc, #208]	; (d488c <_GLOBAL__sub_I_SystemMode+0xd4>)
    SleepResult() {}
   d47bc:	4b34      	ldr	r3, [pc, #208]	; (d4890 <_GLOBAL__sub_I_SystemMode+0xd8>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d47be:	4e35      	ldr	r6, [pc, #212]	; (d4894 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d47c0:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d47c2:	2500      	movs	r5, #0
   d47c4:	6025      	str	r5, [r4, #0]
   d47c6:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d47c8:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47ca:	2002      	movs	r0, #2
   d47cc:	f001 fefe 	bl	d65cc <set_system_mode>
   d47d0:	4620      	mov	r0, r4
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, PIXEL_TYPE);
   d47d2:	4c31      	ldr	r4, [pc, #196]	; (d4898 <_GLOBAL__sub_I_SystemMode+0xe0>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d47d4:	4931      	ldr	r1, [pc, #196]	; (d489c <_GLOBAL__sub_I_SystemMode+0xe4>)
TCPClient TheClient; 
   d47d6:	4f32      	ldr	r7, [pc, #200]	; (d48a0 <_GLOBAL__sub_I_SystemMode+0xe8>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d47d8:	4632      	mov	r2, r6
   d47da:	f003 fafb 	bl	d7dd4 <__aeabi_atexit>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, PIXEL_TYPE);
   d47de:	2302      	movs	r3, #2
   d47e0:	2212      	movs	r2, #18
   d47e2:	2140      	movs	r1, #64	; 0x40
   d47e4:	4620      	mov	r0, r4
   d47e6:	f000 fba1 	bl	d4f2c <_ZN17Adafruit_NeoPixelC1Ethh>
   d47ea:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   d47ec:	4c2d      	ldr	r4, [pc, #180]	; (d48a4 <_GLOBAL__sub_I_SystemMode+0xec>)
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, PIXEL_TYPE);
   d47ee:	492e      	ldr	r1, [pc, #184]	; (d48a8 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d47f0:	4632      	mov	r2, r6
   d47f2:	f003 faef 	bl	d7dd4 <__aeabi_atexit>
Adafruit_SSD1306 display(OLED_RESET);
   d47f6:	2104      	movs	r1, #4
   d47f8:	4620      	mov	r0, r4
   d47fa:	f001 f8bd 	bl	d5978 <_ZN16Adafruit_SSD1306C1Ea>
   d47fe:	4632      	mov	r2, r6
   d4800:	492a      	ldr	r1, [pc, #168]	; (d48ac <_GLOBAL__sub_I_SystemMode+0xf4>)
   d4802:	4620      	mov	r0, r4
   d4804:	f003 fae6 	bl	d7dd4 <__aeabi_atexit>
Adafruit_BME280 bme;
   d4808:	4829      	ldr	r0, [pc, #164]	; (d48b0 <_GLOBAL__sub_I_SystemMode+0xf8>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d480a:	4c2a      	ldr	r4, [pc, #168]	; (d48b4 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d480c:	f000 f8a6 	bl	d495c <_ZN15Adafruit_BME280C1Ev>
Encoder encoder(ENCODER_A, ENCODER_B);
   d4810:	2207      	movs	r2, #7
   d4812:	2105      	movs	r1, #5
   d4814:	4828      	ldr	r0, [pc, #160]	; (d48b8 <_GLOBAL__sub_I_SystemMode+0x100>)
   d4816:	f7ff ff07 	bl	d4628 <_ZN7EncoderC1Ett>
TCPClient TheClient; 
   d481a:	4638      	mov	r0, r7
   d481c:	f003 f87c 	bl	d7918 <_ZN9TCPClientC1Ev>
   d4820:	4632      	mov	r2, r6
   d4822:	4926      	ldr	r1, [pc, #152]	; (d48bc <_GLOBAL__sub_I_SystemMode+0x104>)
   d4824:	4638      	mov	r0, r7
   d4826:	f003 fad5 	bl	d7dd4 <__aeabi_atexit>
   d482a:	4b25      	ldr	r3, [pc, #148]	; (d48c0 <_GLOBAL__sub_I_SystemMode+0x108>)
   d482c:	9300      	str	r3, [sp, #0]
   d482e:	4925      	ldr	r1, [pc, #148]	; (d48c4 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4830:	4b25      	ldr	r3, [pc, #148]	; (d48c8 <_GLOBAL__sub_I_SystemMode+0x110>)
   d4832:	f240 725b 	movw	r2, #1883	; 0x75b
   d4836:	4620      	mov	r0, r4
   d4838:	f001 fc9e 	bl	d6178 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d483c:	4b23      	ldr	r3, [pc, #140]	; (d48cc <_GLOBAL__sub_I_SystemMode+0x114>)
   d483e:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4840:	4632      	mov	r2, r6
   d4842:	4923      	ldr	r1, [pc, #140]	; (d48d0 <_GLOBAL__sub_I_SystemMode+0x118>)
   d4844:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
   d4848:	4620      	mov	r0, r4
   d484a:	f003 fac3 	bl	d7dd4 <__aeabi_atexit>
Adafruit_MQTT_Publish humidityPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Humidity");
   d484e:	462b      	mov	r3, r5
   d4850:	4621      	mov	r1, r4
   d4852:	4a20      	ldr	r2, [pc, #128]	; (d48d4 <_GLOBAL__sub_I_SystemMode+0x11c>)
   d4854:	4820      	ldr	r0, [pc, #128]	; (d48d8 <_GLOBAL__sub_I_SystemMode+0x120>)
   d4856:	f001 fcab 	bl	d61b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pressurePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Pressure");
   d485a:	462b      	mov	r3, r5
   d485c:	4621      	mov	r1, r4
   d485e:	4a1f      	ldr	r2, [pc, #124]	; (d48dc <_GLOBAL__sub_I_SystemMode+0x124>)
   d4860:	481f      	ldr	r0, [pc, #124]	; (d48e0 <_GLOBAL__sub_I_SystemMode+0x128>)
   d4862:	f001 fca5 	bl	d61b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish temperaturePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Temperature");
   d4866:	462b      	mov	r3, r5
   d4868:	4621      	mov	r1, r4
   d486a:	4a1e      	ldr	r2, [pc, #120]	; (d48e4 <_GLOBAL__sub_I_SystemMode+0x12c>)
   d486c:	481e      	ldr	r0, [pc, #120]	; (d48e8 <_GLOBAL__sub_I_SystemMode+0x130>)
   d486e:	f001 fc9f 	bl	d61b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish NotePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Note");
   d4872:	4a1e      	ldr	r2, [pc, #120]	; (d48ec <_GLOBAL__sub_I_SystemMode+0x134>)
   d4874:	481e      	ldr	r0, [pc, #120]	; (d48f0 <_GLOBAL__sub_I_SystemMode+0x138>)
   d4876:	462b      	mov	r3, r5
   d4878:	4621      	mov	r1, r4
   d487a:	f001 fc99 	bl	d61b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
MPU6050 accelgyro;
   d487e:	481d      	ldr	r0, [pc, #116]	; (d48f4 <_GLOBAL__sub_I_SystemMode+0x13c>)
   d4880:	b003      	add	sp, #12
   d4882:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
MPU6050 accelgyro;
   d4886:	f000 bd6b 	b.w	d5360 <_ZN7MPU6050C1Ev>
   d488a:	bf00      	nop
   d488c:	2003e3d0 	.word	0x2003e3d0
   d4890:	ffff0000 	.word	0xffff0000
   d4894:	2003e3b8 	.word	0x2003e3b8
   d4898:	2003e57c 	.word	0x2003e57c
   d489c:	000d4279 	.word	0x000d4279
   d48a0:	2003e3dc 	.word	0x2003e3dc
   d48a4:	2003e45c 	.word	0x2003e45c
   d48a8:	000d4e89 	.word	0x000d4e89
   d48ac:	000d40c9 	.word	0x000d40c9
   d48b0:	2003e408 	.word	0x2003e408
   d48b4:	2003e4a8 	.word	0x2003e4a8
   d48b8:	2003e480 	.word	0x2003e480
   d48bc:	000d4245 	.word	0x000d4245
   d48c0:	000da915 	.word	0x000da915
   d48c4:	000da905 	.word	0x000da905
   d48c8:	000da8fa 	.word	0x000da8fa
   d48cc:	000daf8c 	.word	0x000daf8c
   d48d0:	000d40cb 	.word	0x000d40cb
   d48d4:	000da936 	.word	0x000da936
   d48d8:	2003e498 	.word	0x2003e498
   d48dc:	000da950 	.word	0x000da950
   d48e0:	2003e590 	.word	0x2003e590
   d48e4:	000da96a 	.word	0x000da96a
   d48e8:	2003e59c 	.word	0x2003e59c
   d48ec:	000da987 	.word	0x000da987
   d48f0:	2003e3c4 	.word	0x2003e3c4
   d48f4:	2003e3f8 	.word	0x2003e3f8

000d48f8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d48f8:	4770      	bx	lr

000d48fa <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d48fa:	b510      	push	{r4, lr}
  }
   d48fc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d48fe:	4604      	mov	r4, r0
  }
   d4900:	f003 fa6d 	bl	d7dde <_ZdlPvj>
   d4904:	4620      	mov	r0, r4
   d4906:	bd10      	pop	{r4, pc}

000d4908 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4908:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d490a:	4604      	mov	r4, r0
   d490c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d490e:	7922      	ldrb	r2, [r4, #4]
   d4910:	68a3      	ldr	r3, [r4, #8]
   d4912:	b132      	cbz	r2, d4922 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4914:	b9a3      	cbnz	r3, d4940 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4916:	490b      	ldr	r1, [pc, #44]	; (d4944 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4918:	b002      	add	sp, #8
   d491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d491e:	f002 b9cb 	b.w	d6cb8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4922:	4a09      	ldr	r2, [pc, #36]	; (d4948 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4924:	7b26      	ldrb	r6, [r4, #12]
   d4926:	4d09      	ldr	r5, [pc, #36]	; (d494c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4928:	4909      	ldr	r1, [pc, #36]	; (d4950 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d492a:	7b64      	ldrb	r4, [r4, #13]
   d492c:	2e01      	cmp	r6, #1
   d492e:	bf18      	it	ne
   d4930:	4629      	movne	r1, r5
   d4932:	e9cd 1400 	strd	r1, r4, [sp]
   d4936:	4907      	ldr	r1, [pc, #28]	; (d4954 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4938:	f7ff fcd5 	bl	d42e6 <_ZN5Print6printfEPKcz>
  }
   d493c:	b002      	add	sp, #8
   d493e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4940:	4a05      	ldr	r2, [pc, #20]	; (d4958 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4942:	e7ef      	b.n	d4924 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4944:	000da9ae 	.word	0x000da9ae
   d4948:	000da84e 	.word	0x000da84e
   d494c:	000da9aa 	.word	0x000da9aa
   d4950:	000da9a6 	.word	0x000da9a6
   d4954:	000da9c4 	.word	0x000da9c4
   d4958:	000da99d 	.word	0x000da99d

000d495c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d495c:	f04f 33ff 	mov.w	r3, #4294967295
   d4960:	6103      	str	r3, [r0, #16]
{ }
   d4962:	4770      	bx	lr

000d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4964:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4966:	4c0b      	ldr	r4, [pc, #44]	; (d4994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4968:	7821      	ldrb	r1, [r4, #0]
   d496a:	f3bf 8f5b 	dmb	ish
   d496e:	f011 0101 	ands.w	r1, r1, #1
   d4972:	d10b      	bne.n	d498c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4974:	4620      	mov	r0, r4
   d4976:	9101      	str	r1, [sp, #4]
   d4978:	f7ff fb9e 	bl	d40b8 <__cxa_guard_acquire>
   d497c:	9901      	ldr	r1, [sp, #4]
   d497e:	b128      	cbz	r0, d498c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4980:	4805      	ldr	r0, [pc, #20]	; (d4998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4982:	f001 ff43 	bl	d680c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4986:	4620      	mov	r0, r4
   d4988:	f7ff fb9b 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d498c:	4802      	ldr	r0, [pc, #8]	; (d4998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d498e:	b002      	add	sp, #8
   d4990:	bd10      	pop	{r4, pc}
   d4992:	bf00      	nop
   d4994:	2003e5a8 	.word	0x2003e5a8
   d4998:	2003e5ac 	.word	0x2003e5ac

000d499c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d49a0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d49a4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d49a6:	4605      	mov	r5, r0
   d49a8:	460f      	mov	r7, r1
    if (_sck == -1)
   d49aa:	d106      	bne.n	d49ba <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d49ac:	f7ff ffda 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d49b0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d49b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d49b6:	f002 b849 	b.w	d6a4c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d49ba:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d49bc:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d49be:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d49c2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d49c6:	2100      	movs	r1, #0
   d49c8:	b280      	uxth	r0, r0
   d49ca:	f003 f974 	bl	d7cb6 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d49ce:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d49d2:	fa08 f106 	lsl.w	r1, r8, r6
   d49d6:	4039      	ands	r1, r7
   d49d8:	b280      	uxth	r0, r0
   d49da:	f003 f96c 	bl	d7cb6 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d49de:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d49e2:	2101      	movs	r1, #1
   d49e4:	b280      	uxth	r0, r0
   d49e6:	f003 f966 	bl	d7cb6 <digitalWrite>
        if (digitalRead(_miso))
   d49ea:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d49ee:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d49f0:	b280      	uxth	r0, r0
        reply <<= 1;
   d49f2:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d49f4:	f003 f978 	bl	d7ce8 <digitalRead>
   d49f8:	b108      	cbz	r0, d49fe <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d49fa:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d49fe:	3e01      	subs	r6, #1
   d4a00:	d2df      	bcs.n	d49c2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4a02:	4620      	mov	r0, r4
   d4a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4a08:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4a0a:	f7ff ffab 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4a12:	f001 bf3c 	b.w	d688e <_ZN8SPIClass14endTransactionEv>

000d4a16 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4a16:	b507      	push	{r0, r1, r2, lr}
   d4a18:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4a1a:	f7ff ffa3 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4a1e:	9901      	ldr	r1, [sp, #4]
    }
   d4a20:	b003      	add	sp, #12
   d4a22:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4a26:	f001 bf4b 	b.w	d68c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4a2c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a2c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4a2e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a32:	3301      	adds	r3, #1
{
   d4a34:	b085      	sub	sp, #20
   d4a36:	4604      	mov	r4, r0
   d4a38:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4a3a:	d11f      	bne.n	d4a7c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a3c:	7901      	ldrb	r1, [r0, #4]
   d4a3e:	6800      	ldr	r0, [r0, #0]
   d4a40:	f002 fd26 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a44:	6820      	ldr	r0, [r4, #0]
   d4a46:	6803      	ldr	r3, [r0, #0]
   d4a48:	4629      	mov	r1, r5
   d4a4a:	689b      	ldr	r3, [r3, #8]
   d4a4c:	4798      	blx	r3
        _wire -> endTransmission();
   d4a4e:	6820      	ldr	r0, [r4, #0]
   d4a50:	f002 fd29 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4a54:	7921      	ldrb	r1, [r4, #4]
   d4a56:	6820      	ldr	r0, [r4, #0]
   d4a58:	2202      	movs	r2, #2
   d4a5a:	f002 fd16 	bl	d748a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4a5e:	6820      	ldr	r0, [r4, #0]
   d4a60:	6803      	ldr	r3, [r0, #0]
   d4a62:	695b      	ldr	r3, [r3, #20]
   d4a64:	4798      	blx	r3
   d4a66:	4605      	mov	r5, r0
   d4a68:	6820      	ldr	r0, [r4, #0]
   d4a6a:	6803      	ldr	r3, [r0, #0]
   d4a6c:	695b      	ldr	r3, [r3, #20]
   d4a6e:	4798      	blx	r3
   d4a70:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4a74:	b285      	uxth	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4a76:	4628      	mov	r0, r5
   d4a78:	b005      	add	sp, #20
   d4a7a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4a7c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a80:	3301      	adds	r3, #1
   d4a82:	d10c      	bne.n	d4a9e <_ZN15Adafruit_BME2806read16Eh+0x72>
      dataMode_{dataMode}
   d4a84:	4b18      	ldr	r3, [pc, #96]	; (d4ae8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d4a86:	9300      	str	r3, [sp, #0]
   d4a88:	2300      	movs	r3, #0
   d4a8a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a8e:	4b17      	ldr	r3, [pc, #92]	; (d4aec <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4a90:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a92:	4668      	mov	r0, sp
   d4a94:	2301      	movs	r3, #1
   d4a96:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4a9a:	f7ff ffbc 	bl	d4a16 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4a9e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4aa2:	2100      	movs	r1, #0
   d4aa4:	b280      	uxth	r0, r0
   d4aa6:	f003 f906 	bl	d7cb6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4aaa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f7ff ff74 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4ab4:	2100      	movs	r1, #0
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	f7ff ff70 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
   d4abc:	2100      	movs	r1, #0
   d4abe:	4605      	mov	r5, r0
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f7ff ff6b 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
   d4ac6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4aca:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4acc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ad0:	2101      	movs	r1, #1
   d4ad2:	b280      	uxth	r0, r0
   d4ad4:	f003 f8ef 	bl	d7cb6 <digitalWrite>
        if (_sck == -1)
   d4ad8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4adc:	3301      	adds	r3, #1
   d4ade:	d1ca      	bne.n	d4a76 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d4ae0:	f7ff ff92 	bl	d4a08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4ae4:	e7c7      	b.n	d4a76 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d4ae6:	bf00      	nop
   d4ae8:	000da9ec 	.word	0x000da9ec
   d4aec:	0007a120 	.word	0x0007a120

000d4af0 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4af0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4af2:	f7ff ff9b 	bl	d4a2c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4af6:	ba40      	rev16	r0, r0
}
   d4af8:	b280      	uxth	r0, r0
   d4afa:	bd08      	pop	{r3, pc}

000d4afc <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d4afc:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4afe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b02:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d4b04:	b085      	sub	sp, #20
   d4b06:	4604      	mov	r4, r0
   d4b08:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4b0a:	d118      	bne.n	d4b3e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b0c:	7901      	ldrb	r1, [r0, #4]
   d4b0e:	6800      	ldr	r0, [r0, #0]
   d4b10:	f002 fcbe 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b14:	6820      	ldr	r0, [r4, #0]
   d4b16:	6803      	ldr	r3, [r0, #0]
   d4b18:	4629      	mov	r1, r5
   d4b1a:	689b      	ldr	r3, [r3, #8]
   d4b1c:	4798      	blx	r3
        _wire -> endTransmission();
   d4b1e:	6820      	ldr	r0, [r4, #0]
   d4b20:	f002 fcc1 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4b24:	7921      	ldrb	r1, [r4, #4]
   d4b26:	6820      	ldr	r0, [r4, #0]
   d4b28:	2201      	movs	r2, #1
   d4b2a:	f002 fcae 	bl	d748a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4b2e:	6820      	ldr	r0, [r4, #0]
   d4b30:	6803      	ldr	r3, [r0, #0]
   d4b32:	695b      	ldr	r3, [r3, #20]
   d4b34:	4798      	blx	r3
   d4b36:	b2c5      	uxtb	r5, r0
}
   d4b38:	4628      	mov	r0, r5
   d4b3a:	b005      	add	sp, #20
   d4b3c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4b3e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b42:	3301      	adds	r3, #1
   d4b44:	d10c      	bne.n	d4b60 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4b46:	4b15      	ldr	r3, [pc, #84]	; (d4b9c <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d4b48:	9300      	str	r3, [sp, #0]
   d4b4a:	2300      	movs	r3, #0
   d4b4c:	f88d 3004 	strb.w	r3, [sp, #4]
   d4b50:	4b13      	ldr	r3, [pc, #76]	; (d4ba0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4b52:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4b54:	4668      	mov	r0, sp
   d4b56:	2301      	movs	r3, #1
   d4b58:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4b5c:	f7ff ff5b 	bl	d4a16 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4b60:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b64:	2100      	movs	r1, #0
   d4b66:	b280      	uxth	r0, r0
   d4b68:	f003 f8a5 	bl	d7cb6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4b6c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4b70:	4620      	mov	r0, r4
   d4b72:	f7ff ff13 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4b76:	2100      	movs	r1, #0
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f7ff ff0f 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
   d4b7e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4b80:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b84:	2101      	movs	r1, #1
   d4b86:	b280      	uxth	r0, r0
   d4b88:	f003 f895 	bl	d7cb6 <digitalWrite>
        if (_sck == -1)
   d4b8c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4b90:	3301      	adds	r3, #1
   d4b92:	d1d1      	bne.n	d4b38 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d4b94:	f7ff ff38 	bl	d4a08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4b98:	e7ce      	b.n	d4b38 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d4b9a:	bf00      	nop
   d4b9c:	000da9ec 	.word	0x000da9ec
   d4ba0:	0007a120 	.word	0x0007a120

000d4ba4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4ba4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4ba6:	21f3      	movs	r1, #243	; 0xf3
   d4ba8:	f7ff ffa8 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4bac:	f000 0001 	and.w	r0, r0, #1
   d4bb0:	bd08      	pop	{r3, pc}

000d4bb2 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d4bb2:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4bb4:	2188      	movs	r1, #136	; 0x88
{
   d4bb6:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4bb8:	f7ff ff9a 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d4bbc:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4bbe:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	f7ff ff95 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4bc6:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4bc8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d4bca:	4620      	mov	r0, r4
   d4bcc:	f7ff ff90 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4bd0:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4bd2:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f7ff ff8b 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d4bda:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4bdc:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d4bde:	4620      	mov	r0, r4
   d4be0:	f7ff ff86 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4be4:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4be6:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d4be8:	4620      	mov	r0, r4
   d4bea:	f7ff ff81 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4bee:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4bf0:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d4bf2:	4620      	mov	r0, r4
   d4bf4:	f7ff ff7c 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4bf8:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4bfa:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	f7ff ff77 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c02:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4c04:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d4c06:	4620      	mov	r0, r4
   d4c08:	f7ff ff72 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c0c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4c0e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d4c10:	4620      	mov	r0, r4
   d4c12:	f7ff ff6d 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c16:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4c18:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	f7ff ff68 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c20:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4c22:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d4c24:	4620      	mov	r0, r4
   d4c26:	f7ff ff63 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4c2a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4c2c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4c2e:	4620      	mov	r0, r4
   d4c30:	f7ff ff64 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d4c34:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4c36:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	f7ff ff58 	bl	d4af0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4c40:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4c42:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4c44:	4620      	mov	r0, r4
   d4c46:	f7ff ff59 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4c4a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4c4c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4c50:	4620      	mov	r0, r4
   d4c52:	f7ff ff53 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
   d4c56:	21e5      	movs	r1, #229	; 0xe5
   d4c58:	4605      	mov	r5, r0
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f7ff ff4e 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
   d4c60:	f000 030f 	and.w	r3, r0, #15
   d4c64:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d4c68:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4c6a:	21e6      	movs	r1, #230	; 0xe6
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f7ff ff45 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
   d4c72:	21e5      	movs	r1, #229	; 0xe5
   d4c74:	4605      	mov	r5, r0
   d4c76:	4620      	mov	r0, r4
   d4c78:	f7ff ff40 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
   d4c7c:	1103      	asrs	r3, r0, #4
   d4c7e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d4c82:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4c84:	21e7      	movs	r1, #231	; 0xe7
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff ff38 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
   d4c8c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d4c90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c94 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d4c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4c96:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4c9a:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d4c9c:	4604      	mov	r4, r0
   d4c9e:	460e      	mov	r6, r1
   d4ca0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4ca2:	d112      	bne.n	d4cca <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4ca4:	7901      	ldrb	r1, [r0, #4]
   d4ca6:	6800      	ldr	r0, [r0, #0]
   d4ca8:	f002 fbf2 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4cac:	6820      	ldr	r0, [r4, #0]
   d4cae:	6803      	ldr	r3, [r0, #0]
   d4cb0:	4631      	mov	r1, r6
   d4cb2:	689b      	ldr	r3, [r3, #8]
   d4cb4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4cb6:	6820      	ldr	r0, [r4, #0]
   d4cb8:	6803      	ldr	r3, [r0, #0]
   d4cba:	4629      	mov	r1, r5
   d4cbc:	689b      	ldr	r3, [r3, #8]
   d4cbe:	4798      	blx	r3
        _wire -> endTransmission();
   d4cc0:	6820      	ldr	r0, [r4, #0]
   d4cc2:	f002 fbf0 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
}
   d4cc6:	b004      	add	sp, #16
   d4cc8:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d4cca:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4cce:	3301      	adds	r3, #1
   d4cd0:	d10c      	bne.n	d4cec <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d4cd2:	4b14      	ldr	r3, [pc, #80]	; (d4d24 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d4cd4:	9300      	str	r3, [sp, #0]
   d4cd6:	2300      	movs	r3, #0
   d4cd8:	f88d 3004 	strb.w	r3, [sp, #4]
   d4cdc:	4b12      	ldr	r3, [pc, #72]	; (d4d28 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4cde:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4ce0:	4668      	mov	r0, sp
   d4ce2:	2301      	movs	r3, #1
   d4ce4:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4ce8:	f7ff fe95 	bl	d4a16 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4cec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4cf0:	2100      	movs	r1, #0
   d4cf2:	b280      	uxth	r0, r0
   d4cf4:	f002 ffdf 	bl	d7cb6 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4cf8:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	f7ff fe4d 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4d02:	4629      	mov	r1, r5
   d4d04:	4620      	mov	r0, r4
   d4d06:	f7ff fe49 	bl	d499c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4d0a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d0e:	2101      	movs	r1, #1
   d4d10:	b280      	uxth	r0, r0
   d4d12:	f002 ffd0 	bl	d7cb6 <digitalWrite>
    if (_sck == -1)
   d4d16:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4d1a:	3301      	adds	r3, #1
   d4d1c:	d1d3      	bne.n	d4cc6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d4d1e:	f7ff fe73 	bl	d4a08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d4d22:	e7d0      	b.n	d4cc6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d4d24:	000da9ec 	.word	0x000da9ec
   d4d28:	0007a120 	.word	0x0007a120

000d4d2c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d4d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d4d2e:	00db      	lsls	r3, r3, #3
   d4d30:	f002 0207 	and.w	r2, r2, #7
   d4d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d4d38:	4313      	orrs	r3, r2
   d4d3a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d4d3e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d4d42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d4d46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d4d4a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d4d4e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d4d52:	f366 1347 	bfi	r3, r6, #5, #3
   d4d56:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d4d5a:	00ed      	lsls	r5, r5, #3
   d4d5c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4d60:	f007 0707 	and.w	r7, r7, #7
   d4d64:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d4d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d4d6c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d4d6e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d4d70:	431d      	orrs	r5, r3
   d4d72:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4d76:	f006 0207 	and.w	r2, r6, #7
   d4d7a:	21f2      	movs	r1, #242	; 0xf2
   d4d7c:	f7ff ff8a 	bl	d4c94 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4d80:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d4d84:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4d88:	f002 0107 	and.w	r1, r2, #7
   d4d8c:	009b      	lsls	r3, r3, #2
   d4d8e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4d92:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4d96:	4620      	mov	r0, r4
   d4d98:	21f5      	movs	r1, #245	; 0xf5
   d4d9a:	f7ff ff7b 	bl	d4c94 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4d9e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d4da2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4da6:	f002 0107 	and.w	r1, r2, #7
   d4daa:	009b      	lsls	r3, r3, #2
   d4dac:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4db0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4db4:	4620      	mov	r0, r4
   d4db6:	21f4      	movs	r1, #244	; 0xf4
}
   d4db8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4dbc:	f7ff bf6a 	b.w	d4c94 <_ZN15Adafruit_BME2806write8Ehh>

000d4dc0 <_ZN15Adafruit_BME2804initEv>:
{
   d4dc0:	b530      	push	{r4, r5, lr}
   d4dc2:	4604      	mov	r4, r0
    if (_cs == -1) {
   d4dc4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4dc8:	1c42      	adds	r2, r0, #1
{
   d4dca:	b085      	sub	sp, #20
    if (_cs == -1) {
   d4dcc:	d119      	bne.n	d4e02 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d4dce:	6820      	ldr	r0, [r4, #0]
   d4dd0:	f002 fb2c 	bl	d742c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4dd4:	21d0      	movs	r1, #208	; 0xd0
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	f7ff fe90 	bl	d4afc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4ddc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4dde:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4de0:	d145      	bne.n	d4e6e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4de2:	4620      	mov	r0, r4
   d4de4:	22b6      	movs	r2, #182	; 0xb6
   d4de6:	21e0      	movs	r1, #224	; 0xe0
   d4de8:	f7ff ff54 	bl	d4c94 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d4dec:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4df0:	f002 f834 	bl	d6e5c <delay>
    while (isReadingCalibration())
   d4df4:	4620      	mov	r0, r4
   d4df6:	f7ff fed5 	bl	d4ba4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4dfa:	4605      	mov	r5, r0
   d4dfc:	b328      	cbz	r0, d4e4a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4dfe:	2064      	movs	r0, #100	; 0x64
   d4e00:	e7f6      	b.n	d4df0 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d4e02:	2101      	movs	r1, #1
   d4e04:	b280      	uxth	r0, r0
   d4e06:	f002 ff56 	bl	d7cb6 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4e0a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e0e:	2101      	movs	r1, #1
   d4e10:	b280      	uxth	r0, r0
   d4e12:	f002 ff3f 	bl	d7c94 <pinMode>
        if (_sck == -1) {
   d4e16:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4e1a:	1c43      	adds	r3, r0, #1
   d4e1c:	d104      	bne.n	d4e28 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d4e1e:	f7ff fda1 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4e22:	f001 fcfd 	bl	d6820 <_ZN8SPIClass5beginEv>
    }
   d4e26:	e7d5      	b.n	d4dd4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d4e28:	2101      	movs	r1, #1
   d4e2a:	b280      	uxth	r0, r0
   d4e2c:	f002 ff32 	bl	d7c94 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4e30:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4e34:	2101      	movs	r1, #1
   d4e36:	b280      	uxth	r0, r0
   d4e38:	f002 ff2c 	bl	d7c94 <pinMode>
            pinMode(_miso, INPUT);
   d4e3c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4e40:	2100      	movs	r1, #0
   d4e42:	b280      	uxth	r0, r0
   d4e44:	f002 ff26 	bl	d7c94 <pinMode>
   d4e48:	e7c4      	b.n	d4dd4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f7ff feb1 	bl	d4bb2 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d4e50:	2305      	movs	r3, #5
   d4e52:	9300      	str	r3, [sp, #0]
   d4e54:	461a      	mov	r2, r3
   d4e56:	2103      	movs	r1, #3
   d4e58:	4620      	mov	r0, r4
   d4e5a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4e5e:	f7ff ff65 	bl	d4d2c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d4e62:	2064      	movs	r0, #100	; 0x64
   d4e64:	f001 fffa 	bl	d6e5c <delay>
   d4e68:	2001      	movs	r0, #1
}
   d4e6a:	b005      	add	sp, #20
   d4e6c:	bd30      	pop	{r4, r5, pc}
        return false;
   d4e6e:	2000      	movs	r0, #0
   d4e70:	e7fb      	b.n	d4e6a <_ZN15Adafruit_BME2804initEv+0xaa>

000d4e72 <_ZN15Adafruit_BME2805beginEh>:
{
   d4e72:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4e74:	7101      	strb	r1, [r0, #4]
{
   d4e76:	4604      	mov	r4, r0
	_wire = &Wire;
   d4e78:	f002 ff84 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d4e7c:	6020      	str	r0, [r4, #0]
	return init();
   d4e7e:	4620      	mov	r0, r4
}
   d4e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   d4e84:	f7ff bf9c 	b.w	d4dc0 <_ZN15Adafruit_BME2804initEv>

000d4e88 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4e8c:	68c0      	ldr	r0, [r0, #12]
   d4e8e:	b108      	cbz	r0, d4e94 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4e90:	f001 fc40 	bl	d6714 <free>
  if (begun) pinMode(pin, INPUT);
   d4e94:	7823      	ldrb	r3, [r4, #0]
   d4e96:	b11b      	cbz	r3, d4ea0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4e98:	79e0      	ldrb	r0, [r4, #7]
   d4e9a:	2100      	movs	r1, #0
   d4e9c:	f002 fefa 	bl	d7c94 <pinMode>
}
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	bd10      	pop	{r4, pc}

000d4ea4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4ea4:	b538      	push	{r3, r4, r5, lr}
   d4ea6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4ea8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4eaa:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4eac:	b108      	cbz	r0, d4eb2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4eae:	f001 fc31 	bl	d6714 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4eb2:	79a3      	ldrb	r3, [r4, #6]
   d4eb4:	2b06      	cmp	r3, #6
   d4eb6:	bf0c      	ite	eq
   d4eb8:	2004      	moveq	r0, #4
   d4eba:	2003      	movne	r0, #3
   d4ebc:	fb10 f005 	smulbb	r0, r0, r5
   d4ec0:	b280      	uxth	r0, r0
   d4ec2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4ec4:	f001 fc1e 	bl	d6704 <malloc>
   d4ec8:	60e0      	str	r0, [r4, #12]
   d4eca:	b128      	cbz	r0, d4ed8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4ecc:	88a2      	ldrh	r2, [r4, #4]
   d4ece:	2100      	movs	r1, #0
   d4ed0:	f003 fde6 	bl	d8aa0 <memset>
    numLEDs = n;
   d4ed4:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d4ed6:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d4ed8:	80a0      	strh	r0, [r4, #4]
   d4eda:	8060      	strh	r0, [r4, #2]
}
   d4edc:	e7fb      	b.n	d4ed6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d4ede <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   d4ede:	b510      	push	{r4, lr}
   d4ee0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4ee2:	2101      	movs	r1, #1
   d4ee4:	79c0      	ldrb	r0, [r0, #7]
   d4ee6:	f002 fed5 	bl	d7c94 <pinMode>
  digitalWrite(pin, LOW);
   d4eea:	79e0      	ldrb	r0, [r4, #7]
   d4eec:	2100      	movs	r1, #0
   d4eee:	f002 fee2 	bl	d7cb6 <digitalWrite>
  begun = true;
   d4ef2:	2301      	movs	r3, #1
   d4ef4:	7023      	strb	r3, [r4, #0]
}
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d4efa:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4efc:	4605      	mov	r5, r0
   d4efe:	460c      	mov	r4, r1
    if (begun) {
   d4f00:	b11b      	cbz	r3, d4f0a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4f02:	79c0      	ldrb	r0, [r0, #7]
   d4f04:	2100      	movs	r1, #0
   d4f06:	f002 fec5 	bl	d7c94 <pinMode>
    }
    pin = p;
    if (begun) {
   d4f0a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4f0c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4f0e:	b15b      	cbz	r3, d4f28 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4f10:	b2a0      	uxth	r0, r4
   d4f12:	2101      	movs	r1, #1
   d4f14:	9001      	str	r0, [sp, #4]
   d4f16:	f002 febd 	bl	d7c94 <pinMode>
        digitalWrite(p, LOW);
   d4f1a:	9801      	ldr	r0, [sp, #4]
   d4f1c:	2100      	movs	r1, #0
    }
}
   d4f1e:	b003      	add	sp, #12
   d4f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d4f24:	f002 bec7 	b.w	d7cb6 <digitalWrite>
}
   d4f28:	b003      	add	sp, #12
   d4f2a:	bd30      	pop	{r4, r5, pc}

000d4f2c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4f2c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4f2e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4f30:	4604      	mov	r4, r0
   d4f32:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4f34:	7183      	strb	r3, [r0, #6]
   d4f36:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d4f3a:	7005      	strb	r5, [r0, #0]
   d4f3c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d4f3e:	f7ff ffb1 	bl	d4ea4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4f42:	4620      	mov	r0, r4
   d4f44:	4631      	mov	r1, r6
   d4f46:	f7ff ffd7 	bl	d4ef8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f50 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4f50:	68c3      	ldr	r3, [r0, #12]
   d4f52:	2b00      	cmp	r3, #0
   d4f54:	f000 818d 	beq.w	d5272 <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d4f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f5c:	7983      	ldrb	r3, [r0, #6]
   d4f5e:	3b02      	subs	r3, #2
   d4f60:	b2db      	uxtb	r3, r3
   d4f62:	2b04      	cmp	r3, #4
   d4f64:	bf9c      	itt	ls
   d4f66:	4ac8      	ldrls	r2, [pc, #800]	; (d5288 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d4f68:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4f6c:	b087      	sub	sp, #28
   d4f6e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4f70:	bf88      	it	hi
   d4f72:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4f74:	f001 f982 	bl	d627c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4f78:	692b      	ldr	r3, [r5, #16]
   d4f7a:	1ac0      	subs	r0, r0, r3
   d4f7c:	42a0      	cmp	r0, r4
   d4f7e:	d3f9      	bcc.n	d4f74 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4f80:	4ac2      	ldr	r2, [pc, #776]	; (d528c <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4f82:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4f84:	ca07      	ldmia	r2, {r0, r1, r2}
   d4f86:	ac06      	add	r4, sp, #24
   d4f88:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4f8c:	9c03      	ldr	r4, [sp, #12]
   d4f8e:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f92:	b91a      	cbnz	r2, d4f9c <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f94:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4f98:	2a00      	cmp	r2, #0
   d4f9a:	db7c      	blt.n	d5096 <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d4f9c:	9c04      	ldr	r4, [sp, #16]
   d4f9e:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fa2:	b922      	cbnz	r2, d4fae <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fa4:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4fa8:	2a00      	cmp	r2, #0
   d4faa:	f2c0 8152 	blt.w	d5252 <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d4fae:	9c05      	ldr	r4, [sp, #20]
   d4fb0:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fb4:	2a00      	cmp	r2, #0
   d4fb6:	f000 8137 	beq.w	d5228 <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fba:	4bb5      	ldr	r3, [pc, #724]	; (d5290 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4fbc:	48b5      	ldr	r0, [pc, #724]	; (d5294 <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fbe:	681c      	ldr	r4, [r3, #0]
   d4fc0:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4fc2:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fc4:	011a      	lsls	r2, r3, #4
   d4fc6:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d4fca:	5ca7      	ldrb	r7, [r4, r2]
   d4fcc:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4fce:	4cb2      	ldr	r4, [pc, #712]	; (d5298 <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4fd0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d4fd4:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4fd6:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fd8:	f003 031f 	and.w	r3, r3, #31
   d4fdc:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4fe0:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4fe2:	433a      	orrs	r2, r7
   d4fe4:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4fe6:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4fe8:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d4fec:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ff0:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d4ff2:	2900      	cmp	r1, #0
   d4ff4:	d044      	beq.n	d5080 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d4ff6:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d4ffa:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4ffc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d5000:	f818 cb01 	ldrb.w	ip, [r8], #1
   d5004:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5006:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d5008:	6863      	ldr	r3, [r4, #4]
   d500a:	1a9b      	subs	r3, r3, r2
   d500c:	2b46      	cmp	r3, #70	; 0x46
   d500e:	d9fb      	bls.n	d5008 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d5010:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d5012:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d5016:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d501a:	ea43 0307 	orr.w	r3, r3, r7
   d501e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d5022:	d02f      	beq.n	d5084 <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d5024:	6863      	ldr	r3, [r4, #4]
   d5026:	1a9b      	subs	r3, r3, r2
   d5028:	2b28      	cmp	r3, #40	; 0x28
   d502a:	d9fb      	bls.n	d5024 <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d502c:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5030:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d5032:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5036:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d503a:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d503e:	d1e3      	bne.n	d5008 <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d5040:	88ab      	ldrh	r3, [r5, #4]
   d5042:	f10e 0e01 	add.w	lr, lr, #1
   d5046:	fa1f fe8e 	uxth.w	lr, lr
   d504a:	4573      	cmp	r3, lr
   d504c:	d8d8      	bhi.n	d5000 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d504e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d5052:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d5056:	6863      	ldr	r3, [r4, #4]
   d5058:	1a9b      	subs	r3, r3, r2
   d505a:	2b46      	cmp	r3, #70	; 0x46
   d505c:	d9fb      	bls.n	d5056 <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d505e:	6863      	ldr	r3, [r4, #4]
   d5060:	eba3 0909 	sub.w	r9, r3, r9
   d5064:	4589      	cmp	r9, r1
   d5066:	f0c0 80d9 	bcc.w	d521c <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d506a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d506e:	f001 f8fd 	bl	d626c <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d5072:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d5074:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d5078:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d507c:	2900      	cmp	r1, #0
   d507e:	d1ba      	bne.n	d4ff6 <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d5080:	460a      	mov	r2, r1
   d5082:	e7e8      	b.n	d5056 <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d5084:	6863      	ldr	r3, [r4, #4]
   d5086:	1a9b      	subs	r3, r3, r2
   d5088:	2b11      	cmp	r3, #17
   d508a:	d8cf      	bhi.n	d502c <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d508c:	6863      	ldr	r3, [r4, #4]
   d508e:	1a9b      	subs	r3, r3, r2
   d5090:	2b11      	cmp	r3, #17
   d5092:	d9f7      	bls.n	d5084 <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d5094:	e7ca      	b.n	d502c <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5096:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d509a:	2a00      	cmp	r2, #0
   d509c:	f6bf af7e 	bge.w	d4f9c <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50a0:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50a4:	2a00      	cmp	r2, #0
   d50a6:	f6bf af79 	bge.w	d4f9c <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d50aa:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50ae:	2a00      	cmp	r2, #0
   d50b0:	f6bf af74 	bge.w	d4f9c <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d50b4:	011b      	lsls	r3, r3, #4
   d50b6:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d50b8:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d50ba:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d50bc:	f001 fb22 	bl	d6704 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d50c0:	2800      	cmp	r0, #0
   d50c2:	f43f af7a 	beq.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d50c6:	88ab      	ldrh	r3, [r5, #4]
   d50c8:	2b00      	cmp	r3, #0
   d50ca:	f000 80da 	beq.w	d5282 <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d50ce:	68ea      	ldr	r2, [r5, #12]
   d50d0:	3b01      	subs	r3, #1
   d50d2:	fa12 fe83 	uxtah	lr, r2, r3
   d50d6:	f102 3cff 	add.w	ip, r2, #4294967295
    uint16_t pos = 0; // bit position
   d50da:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d50dc:	f248 0206 	movw	r2, #32774	; 0x8006
   d50e0:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d50e4:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d50e8:	f017 0f80 	tst.w	r7, #128	; 0x80
   d50ec:	bf0c      	ite	eq
   d50ee:	4690      	moveq	r8, r2
   d50f0:	4688      	movne	r8, r1
   d50f2:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d50f6:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d50fa:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d50fe:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5102:	bf0c      	ite	eq
   d5104:	4693      	moveq	fp, r2
   d5106:	468b      	movne	fp, r1
   d5108:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d510c:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5110:	f017 0f20 	tst.w	r7, #32
        pos++;
   d5114:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5118:	bf0c      	ite	eq
   d511a:	4692      	moveq	sl, r2
   d511c:	468a      	movne	sl, r1
   d511e:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d5122:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5126:	f017 0f10 	tst.w	r7, #16
        pos++;
   d512a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d512e:	bf0c      	ite	eq
   d5130:	4691      	moveq	r9, r2
   d5132:	4689      	movne	r9, r1
   d5134:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d5138:	f103 0904 	add.w	r9, r3, #4
   d513c:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5140:	f017 0f08 	tst.w	r7, #8
        pos++;
   d5144:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5148:	bf0c      	ite	eq
   d514a:	4692      	moveq	sl, r2
   d514c:	468a      	movne	sl, r1
        pos++;
   d514e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5152:	f017 0f04 	tst.w	r7, #4
   d5156:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d515a:	bf0c      	ite	eq
   d515c:	4691      	moveq	r9, r2
   d515e:	4689      	movne	r9, r1
   d5160:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d5164:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5168:	f017 0f02 	tst.w	r7, #2
        pos++;
   d516c:	fa1f f888 	uxth.w	r8, r8
   d5170:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5174:	bf0c      	ite	eq
   d5176:	4691      	moveq	r9, r2
   d5178:	4689      	movne	r9, r1
        pos++;
   d517a:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d517c:	07ff      	lsls	r7, r7, #31
   d517e:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d5182:	9601      	str	r6, [sp, #4]
   d5184:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5186:	d575      	bpl.n	d5274 <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d5188:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d518a:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d518e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d5192:	d1a7      	bne.n	d50e4 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d5194:	1c59      	adds	r1, r3, #1
   d5196:	3302      	adds	r3, #2
   d5198:	b289      	uxth	r1, r1
   d519a:	b29b      	uxth	r3, r3
   d519c:	0049      	lsls	r1, r1, #1
   d519e:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d51a0:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d51a2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d51a6:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d51a8:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d51aa:	4939      	ldr	r1, [pc, #228]	; (d5290 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d51ac:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d51ae:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d51b0:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d51b4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d51b8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d51bc:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d51c0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d51c4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d51c8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d51cc:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d51d0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d51d4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d51d8:	79eb      	ldrb	r3, [r5, #7]
   d51da:	680e      	ldr	r6, [r1, #0]
   d51dc:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d51e0:	0119      	lsls	r1, r3, #4
   d51e2:	787b      	ldrb	r3, [r7, #1]
   d51e4:	5c71      	ldrb	r1, [r6, r1]
   d51e6:	f003 031f 	and.w	r3, r3, #31
   d51ea:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d51ee:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d51f0:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d51f4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d51f8:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d51fc:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d51fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5202:	2b00      	cmp	r3, #0
   d5204:	d0fb      	beq.n	d51fe <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d5206:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5208:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   d520c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d5210:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5214:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d5218:	f001 fa7c 	bl	d6714 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d521c:	f001 f82e 	bl	d627c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d5220:	6128      	str	r0, [r5, #16]
}
   d5222:	b007      	add	sp, #28
   d5224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5228:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d522c:	2a00      	cmp	r2, #0
   d522e:	f6bf aec4 	bge.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5232:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5236:	2a00      	cmp	r2, #0
   d5238:	f6bf aebf 	bge.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d523c:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5240:	2a00      	cmp	r2, #0
   d5242:	f6bf aeba 	bge.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5246:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d524a:	2a00      	cmp	r2, #0
   d524c:	f6bf aeb5 	bge.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d5250:	e730      	b.n	d50b4 <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5252:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5256:	2a00      	cmp	r2, #0
   d5258:	f6bf aea9 	bge.w	d4fae <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d525c:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5260:	2a00      	cmp	r2, #0
   d5262:	f6bf aea4 	bge.w	d4fae <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5266:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d526a:	2a00      	cmp	r2, #0
   d526c:	f6bf ae9f 	bge.w	d4fae <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d5270:	e720      	b.n	d50b4 <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d5272:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d5274:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5276:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d527a:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d527c:	f47f af32 	bne.w	d50e4 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d5280:	e788      	b.n	d5194 <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d5282:	2304      	movs	r3, #4
   d5284:	2102      	movs	r1, #2
   d5286:	e78b      	b.n	d51a0 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d5288:	000daa04 	.word	0x000daa04
   d528c:	000da9f8 	.word	0x000da9f8
   d5290:	2003e5b4 	.word	0x2003e5b4
   d5294:	e000edf0 	.word	0xe000edf0
   d5298:	e0001000 	.word	0xe0001000

000d529c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d529c:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
   d529e:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d52a0:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
   d52a4:	428c      	cmp	r4, r1
   d52a6:	d91b      	bls.n	d52e0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>
    if(brightness) { // See notes in setBrightness()
   d52a8:	7a04      	ldrb	r4, [r0, #8]
   d52aa:	b144      	cbz	r4, d52be <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d52ac:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d52b0:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d52b4:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
   d52b8:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d52ba:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d52bc:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
   d52be:	68c6      	ldr	r6, [r0, #12]
   d52c0:	7980      	ldrb	r0, [r0, #6]
   d52c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d52c6:	3802      	subs	r0, #2
   d52c8:	1874      	adds	r4, r6, r1
    switch(type) {
   d52ca:	2806      	cmp	r0, #6
   d52cc:	d810      	bhi.n	d52f0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
   d52ce:	e8df f000 	tbb	[pc, r0]
   d52d2:	0f04      	.short	0x0f04
   d52d4:	040f0408 	.word	0x040f0408
   d52d8:	04          	.byte	0x04
   d52d9:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d52da:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d52dc:	7062      	strb	r2, [r4, #1]
          *p = b;
   d52de:	70a5      	strb	r5, [r4, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d52e0:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
   d52e2:	2afe      	cmp	r2, #254	; 0xfe
   d52e4:	bf28      	it	cs
   d52e6:	22fe      	movcs	r2, #254	; 0xfe
   d52e8:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d52ea:	7065      	strb	r5, [r4, #1]
          *p = g;
   d52ec:	70a3      	strb	r3, [r4, #2]
        } break;
   d52ee:	e7f7      	b.n	d52e0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>
          *p++ = r;
   d52f0:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d52f2:	7063      	strb	r3, [r4, #1]
          *p = b;
   d52f4:	70a5      	strb	r5, [r4, #2]
}
   d52f6:	e7f3      	b.n	d52e0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x44>

000d52f8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d52f8:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   d52fa:	1c4a      	adds	r2, r1, #1
   d52fc:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d52fe:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d5300:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   d5302:	d01e      	beq.n	d5342 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d5304:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d5306:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   d530a:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d530c:	d00c      	beq.n	d5328 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d530e:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d5310:	bf1f      	itttt	ne
   d5312:	0211      	lslne	r1, r2, #8
   d5314:	f101 31ff 	addne.w	r1, r1, #4294967295
   d5318:	fbb1 f3f3 	udivne	r3, r1, r3
   d531c:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   d531e:	bf04      	itt	eq
   d5320:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d5324:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   d5328:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   d532a:	8886      	ldrh	r6, [r0, #4]
   d532c:	1b29      	subs	r1, r5, r4
   d532e:	b289      	uxth	r1, r1
   d5330:	428e      	cmp	r6, r1
   d5332:	d905      	bls.n	d5340 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   d5334:	7829      	ldrb	r1, [r5, #0]
   d5336:	4359      	muls	r1, r3
   d5338:	1209      	asrs	r1, r1, #8
   d533a:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   d533e:	e7f4      	b.n	d532a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   d5340:	7202      	strb	r2, [r0, #8]
  }
}
   d5342:	bd70      	pop	{r4, r5, r6, pc}

000d5344 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d5344:	8882      	ldrh	r2, [r0, #4]
   d5346:	68c0      	ldr	r0, [r0, #12]
   d5348:	2100      	movs	r1, #0
   d534a:	f003 bba9 	b.w	d8aa0 <memset>
	...

000d5350 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d5350:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d5352:	f000 ff43 	bl	d61dc <HAL_Pin_Map>
   d5356:	4b01      	ldr	r3, [pc, #4]	; (d535c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d5358:	6018      	str	r0, [r3, #0]
}
   d535a:	bd08      	pop	{r3, pc}
   d535c:	2003e5b4 	.word	0x2003e5b4

000d5360 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
   d5360:	2368      	movs	r3, #104	; 0x68
   d5362:	7003      	strb	r3, [r0, #0]
}
   d5364:	4770      	bx	lr

000d5366 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
   d5366:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
   d5368:	2302      	movs	r3, #2
   d536a:	7800      	ldrb	r0, [r0, #0]
   d536c:	9100      	str	r1, [sp, #0]
   d536e:	2204      	movs	r2, #4
   d5370:	211b      	movs	r1, #27
   d5372:	f000 f925 	bl	d55c0 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d5376:	b003      	add	sp, #12
   d5378:	f85d fb04 	ldr.w	pc, [sp], #4

000d537c <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
   d537c:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
   d537e:	2302      	movs	r3, #2
   d5380:	7800      	ldrb	r0, [r0, #0]
   d5382:	9100      	str	r1, [sp, #0]
   d5384:	2204      	movs	r2, #4
   d5386:	211c      	movs	r1, #28
   d5388:	f000 f91a 	bl	d55c0 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d538c:	b003      	add	sp, #12
   d538e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5392 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
   d5392:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
   d5394:	7800      	ldrb	r0, [r0, #0]
   d5396:	2206      	movs	r2, #6
   d5398:	216b      	movs	r1, #107	; 0x6b
   d539a:	f000 b8ed 	b.w	d5578 <_ZN6I2Cdev8writeBitEhhhh>

000d539e <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
   d539e:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
   d53a0:	2303      	movs	r3, #3
   d53a2:	7800      	ldrb	r0, [r0, #0]
   d53a4:	9100      	str	r1, [sp, #0]
   d53a6:	2202      	movs	r2, #2
   d53a8:	216b      	movs	r1, #107	; 0x6b
   d53aa:	f000 f909 	bl	d55c0 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d53ae:	b003      	add	sp, #12
   d53b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d53b4 <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
   d53b4:	b510      	push	{r4, lr}
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d53b6:	2101      	movs	r1, #1
void MPU6050::initialize() {
   d53b8:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d53ba:	f7ff fff0 	bl	d539e <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
   d53be:	4620      	mov	r0, r4
   d53c0:	2100      	movs	r1, #0
   d53c2:	f7ff ffd0 	bl	d5366 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
   d53c6:	4620      	mov	r0, r4
   d53c8:	2100      	movs	r1, #0
   d53ca:	f7ff ffd7 	bl	d537c <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d53ce:	4620      	mov	r0, r4
   d53d0:	2100      	movs	r1, #0
}
   d53d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d53d6:	f7ff bfdc 	b.w	d5392 <_ZN7MPU605015setSleepEnabledEb>
	...

000d53dc <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
   d53dc:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d53de:	4603      	mov	r3, r0
   d53e0:	4a07      	ldr	r2, [pc, #28]	; (d5400 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
   d53e2:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d53e4:	8812      	ldrh	r2, [r2, #0]
   d53e6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d53ea:	e9cd 3200 	strd	r3, r2, [sp]
   d53ee:	2306      	movs	r3, #6
   d53f0:	461a      	mov	r2, r3
   d53f2:	2175      	movs	r1, #117	; 0x75
   d53f4:	f000 f878 	bl	d54e8 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
   d53f8:	7860      	ldrb	r0, [r4, #1]
   d53fa:	b002      	add	sp, #8
   d53fc:	bd10      	pop	{r4, pc}
   d53fe:	bf00      	nop
   d5400:	2003ddc8 	.word	0x2003ddc8

000d5404 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
   d5404:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
   d5406:	f7ff ffe9 	bl	d53dc <_ZN7MPU605011getDeviceIDEv>
}
   d540a:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
   d540e:	4258      	negs	r0, r3
   d5410:	4158      	adcs	r0, r3
   d5412:	bd08      	pop	{r3, pc}

000d5414 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
   d5414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5418:	4616      	mov	r6, r2
   d541a:	469b      	mov	fp, r3
   d541c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   d5420:	4607      	mov	r7, r0
   d5422:	468a      	mov	sl, r1
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5424:	f000 ff32 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5428:	2e20      	cmp	r6, #32
   d542a:	4633      	mov	r3, r6
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d542c:	f04f 0500 	mov.w	r5, #0
   d5430:	bfa8      	it	ge
   d5432:	2320      	movge	r3, #32
   d5434:	4681      	mov	r9, r0
    int8_t count = 0;
   d5436:	462c      	mov	r4, r5
   d5438:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d543a:	42b5      	cmp	r5, r6
   d543c:	d23a      	bcs.n	d54b4 <_ZN6I2Cdev9readBytesEhhhPht+0xa0>
                Wire.beginTransmission(devAddr);
   d543e:	f002 fca1 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5442:	4639      	mov	r1, r7
   d5444:	f002 f824 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
   d5448:	f002 fc9c 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d544c:	6803      	ldr	r3, [r0, #0]
   d544e:	4651      	mov	r1, sl
   d5450:	689b      	ldr	r3, [r3, #8]
   d5452:	4798      	blx	r3
                Wire.endTransmission();
   d5454:	f002 fc96 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5458:	f002 f825 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
   d545c:	f002 fc92 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5460:	4639      	mov	r1, r7
   d5462:	f002 f815 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
   d5466:	f002 fc8d 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d546a:	1b72      	subs	r2, r6, r5
   d546c:	2a20      	cmp	r2, #32
   d546e:	bfa8      	it	ge
   d5470:	2220      	movge	r2, #32
   d5472:	b2d2      	uxtb	r2, r2
   d5474:	4639      	mov	r1, r7
   d5476:	f002 f808 	bl	d748a <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d547a:	f002 fc83 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d547e:	6803      	ldr	r3, [r0, #0]
   d5480:	691b      	ldr	r3, [r3, #16]
   d5482:	4798      	blx	r3
   d5484:	b190      	cbz	r0, d54ac <_ZN6I2Cdev9readBytesEhhhPht+0x98>
   d5486:	f1b8 0f00 	cmp.w	r8, #0
   d548a:	d109      	bne.n	d54a0 <_ZN6I2Cdev9readBytesEhhhPht+0x8c>
                    data[count] = Wire.read();
   d548c:	f002 fc7a 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5490:	6803      	ldr	r3, [r0, #0]
   d5492:	695b      	ldr	r3, [r3, #20]
   d5494:	4798      	blx	r3
   d5496:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d549a:	3401      	adds	r4, #1
   d549c:	b264      	sxtb	r4, r4
   d549e:	e7ec      	b.n	d547a <_ZN6I2Cdev9readBytesEhhhPht+0x66>
   d54a0:	f000 fef4 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
   d54a4:	eba0 0009 	sub.w	r0, r0, r9
   d54a8:	4540      	cmp	r0, r8
   d54aa:	d3ef      	bcc.n	d548c <_ZN6I2Cdev9readBytesEhhhPht+0x78>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d54ac:	9b01      	ldr	r3, [sp, #4]
   d54ae:	441d      	add	r5, r3
   d54b0:	b2ed      	uxtb	r5, r5
   d54b2:	e7c2      	b.n	d543a <_ZN6I2Cdev9readBytesEhhhPht+0x26>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
   d54b4:	f1b8 0f00 	cmp.w	r8, #0
   d54b8:	d009      	beq.n	d54ce <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d54ba:	f000 fee7 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
   d54be:	eba0 0009 	sub.w	r0, r0, r9
   d54c2:	4540      	cmp	r0, r8
   d54c4:	d303      	bcc.n	d54ce <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d54c6:	42b4      	cmp	r4, r6
   d54c8:	bfb8      	it	lt
   d54ca:	f04f 34ff 	movlt.w	r4, #4294967295
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
   d54ce:	4620      	mov	r0, r4
   d54d0:	b003      	add	sp, #12
   d54d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d54d6 <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
   d54d6:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
   d54d8:	9300      	str	r3, [sp, #0]
   d54da:	4613      	mov	r3, r2
   d54dc:	2201      	movs	r2, #1
   d54de:	f7ff ff99 	bl	d5414 <_ZN6I2Cdev9readBytesEhhhPht>
}
   d54e2:	b003      	add	sp, #12
   d54e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d54e8 <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
   d54e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54ea:	4614      	mov	r4, r2
   d54ec:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
   d54ee:	f10d 0207 	add.w	r2, sp, #7
   d54f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d54f6:	f7ff ffee 	bl	d54d6 <_ZN6I2Cdev8readByteEhhPht>
   d54fa:	b160      	cbz	r0, d5516 <_ZN6I2Cdev8readBitsEhhhhPht+0x2e>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d54fc:	2201      	movs	r2, #1
   d54fe:	fa02 f305 	lsl.w	r3, r2, r5
   d5502:	1b61      	subs	r1, r4, r5
        b &= mask;
   d5504:	f89d 2007 	ldrb.w	r2, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d5508:	3101      	adds	r1, #1
   d550a:	3b01      	subs	r3, #1
   d550c:	408b      	lsls	r3, r1
        b >>= (bitStart - length + 1);
   d550e:	4013      	ands	r3, r2
   d5510:	9a06      	ldr	r2, [sp, #24]
   d5512:	410b      	asrs	r3, r1
   d5514:	7013      	strb	r3, [r2, #0]
}
   d5516:	b003      	add	sp, #12
   d5518:	bd30      	pop	{r4, r5, pc}

000d551a <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
   d551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d551c:	4607      	mov	r7, r0
   d551e:	4615      	mov	r5, r2
   d5520:	461c      	mov	r4, r3
   d5522:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
   d5524:	f002 fc2e 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5528:	4639      	mov	r1, r7
   d552a:	f001 ffb1 	bl	d7490 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
   d552e:	f002 fc29 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5532:	6803      	ldr	r3, [r0, #0]
   d5534:	4631      	mov	r1, r6
   d5536:	689b      	ldr	r3, [r3, #8]
   d5538:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
   d553a:	4425      	add	r5, r4
   d553c:	42ac      	cmp	r4, r5
   d553e:	d007      	beq.n	d5550 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
   d5540:	f002 fc20 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5544:	6803      	ldr	r3, [r0, #0]
   d5546:	f814 1b01 	ldrb.w	r1, [r4], #1
   d554a:	689b      	ldr	r3, [r3, #8]
   d554c:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
   d554e:	e7f5      	b.n	d553c <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
   d5550:	f002 fc18 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5554:	f001 ffa7 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
   d5558:	fab0 f080 	clz	r0, r0
   d555c:	0940      	lsrs	r0, r0, #5
   d555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5560 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
   d5560:	b507      	push	{r0, r1, r2, lr}
   d5562:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
   d5566:	f10d 0307 	add.w	r3, sp, #7
   d556a:	2201      	movs	r2, #1
   d556c:	f7ff ffd5 	bl	d551a <_ZN6I2Cdev10writeBytesEhhhPh>
}
   d5570:	b003      	add	sp, #12
   d5572:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5578 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d5578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d557c:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
   d557e:	4b0f      	ldr	r3, [pc, #60]	; (d55bc <_ZN6I2Cdev8writeBitEhhhh+0x44>)
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d5580:	4690      	mov	r8, r2
   d5582:	2401      	movs	r4, #1
    readByte(devAddr, regAddr, &b);
   d5584:	f10d 0207 	add.w	r2, sp, #7
   d5588:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d558a:	4605      	mov	r5, r0
   d558c:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
   d558e:	f7ff ffa2 	bl	d54d6 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d5592:	fa04 f208 	lsl.w	r2, r4, r8
   d5596:	b252      	sxtb	r2, r2
   d5598:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d559c:	b157      	cbz	r7, d55b4 <_ZN6I2Cdev8writeBitEhhhh+0x3c>
   d559e:	4322      	orrs	r2, r4
   d55a0:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
   d55a2:	4631      	mov	r1, r6
   d55a4:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d55a6:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
   d55aa:	f7ff ffd9 	bl	d5560 <_ZN6I2Cdev9writeByteEhhh>
}
   d55ae:	b002      	add	sp, #8
   d55b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d55b4:	ea24 0202 	bic.w	r2, r4, r2
   d55b8:	e7f3      	b.n	d55a2 <_ZN6I2Cdev8writeBitEhhhh+0x2a>
   d55ba:	bf00      	nop
   d55bc:	2003ddc8 	.word	0x2003ddc8

000d55c0 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d55c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d55c2:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
   d55c4:	4b11      	ldr	r3, [pc, #68]	; (d560c <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d55c6:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
   d55c8:	881b      	ldrh	r3, [r3, #0]
   d55ca:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d55ce:	4604      	mov	r4, r0
   d55d0:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
   d55d2:	f7ff ff80 	bl	d54d6 <_ZN6I2Cdev8readByteEhhPht>
   d55d6:	b1b8      	cbz	r0, d5608 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d55d8:	2201      	movs	r2, #1
   d55da:	fa02 f307 	lsl.w	r3, r2, r7
   d55de:	1bf1      	subs	r1, r6, r7
        data <<= (bitStart - length + 1); // shift data into correct position
   d55e0:	f89d 2020 	ldrb.w	r2, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d55e4:	3101      	adds	r1, #1
   d55e6:	3b01      	subs	r3, #1
   d55e8:	408b      	lsls	r3, r1
        data <<= (bitStart - length + 1); // shift data into correct position
   d55ea:	fa02 f101 	lsl.w	r1, r2, r1
        b &= ~(mask); // zero all important bits in existing byte
   d55ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
   d55f2:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
   d55f4:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
   d55f8:	400b      	ands	r3, r1
        b |= data; // combine data with existing byte
   d55fa:	431a      	orrs	r2, r3
        return writeByte(devAddr, regAddr, b);
   d55fc:	4629      	mov	r1, r5
   d55fe:	4620      	mov	r0, r4
        b |= data; // combine data with existing byte
   d5600:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
   d5604:	f7ff ffac 	bl	d5560 <_ZN6I2Cdev9writeByteEhhh>
}
   d5608:	b003      	add	sp, #12
   d560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d560c:	2003ddc8 	.word	0x2003ddc8

000d5610 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5610:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d5612:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5614:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d5618:	2d02      	cmp	r5, #2
   d561a:	d067      	beq.n	d56ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d561c:	2d03      	cmp	r5, #3
   d561e:	f000 8097 	beq.w	d5750 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d5622:	2d01      	cmp	r5, #1
   d5624:	d16a      	bne.n	d56fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d5626:	8905      	ldrh	r5, [r0, #8]
   d5628:	43d2      	mvns	r2, r2
   d562a:	442a      	add	r2, r5
   d562c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d562e:	2a00      	cmp	r2, #0
   d5630:	db5b      	blt.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5632:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5636:	4295      	cmp	r5, r2
   d5638:	dd57      	ble.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d563a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d563c:	bfbe      	ittt	lt
   d563e:	185b      	addlt	r3, r3, r1
   d5640:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5642:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5644:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d5648:	18cd      	adds	r5, r1, r3
   d564a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d564c:	bfc4      	itt	gt
   d564e:	1a43      	subgt	r3, r0, r1
   d5650:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d5652:	2b00      	cmp	r3, #0
   d5654:	dd49      	ble.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5656:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d565a:	f8df c11c 	ldr.w	ip, [pc, #284]	; d5778 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d565e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5662:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d5666:	b2db      	uxtb	r3, r3
  pBuf += x;
   d5668:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d566c:	d01a      	beq.n	d56a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d566e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5672:	4e3f      	ldr	r6, [pc, #252]	; (d5770 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d5674:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d5676:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d5678:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d567a:	bf3f      	itttt	cc
   d567c:	eba5 0e03 	subcc.w	lr, r5, r3
   d5680:	26ff      	movcc	r6, #255	; 0xff
   d5682:	fa46 f60e 	asrcc.w	r6, r6, lr
   d5686:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d5688:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d568c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d568e:	bf0c      	ite	eq
   d5690:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d5692:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5694:	42ab      	cmp	r3, r5
   d5696:	f80c 6002 	strb.w	r6, [ip, r2]
   d569a:	d326      	bcc.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d569c:	3908      	subs	r1, #8
   d569e:	440b      	add	r3, r1
   d56a0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d56a2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d56a4:	2b07      	cmp	r3, #7
   d56a6:	d917      	bls.n	d56d8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d56a8:	2c01      	cmp	r4, #1
   d56aa:	bf0c      	ite	eq
   d56ac:	25ff      	moveq	r5, #255	; 0xff
   d56ae:	2500      	movne	r5, #0
   d56b0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d56b4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d56b6:	3a08      	subs	r2, #8
   d56b8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d56ba:	2a07      	cmp	r2, #7
      *pBuf = val;
   d56bc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d56c0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d56c4:	d8f7      	bhi.n	d56b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d56c6:	f1a3 0208 	sub.w	r2, r3, #8
   d56ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d56ce:	3201      	adds	r2, #1
   d56d0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d56d4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d56d8:	b13b      	cbz	r3, d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d56da:	4a26      	ldr	r2, [pc, #152]	; (d5774 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d56dc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d56de:	7803      	ldrb	r3, [r0, #0]
   d56e0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d56e2:	bf0c      	ite	eq
   d56e4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d56e6:	4393      	bicne	r3, r2
   d56e8:	7003      	strb	r3, [r0, #0]
}
   d56ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d56ec:	8945      	ldrh	r5, [r0, #10]
   d56ee:	43d2      	mvns	r2, r2
   d56f0:	442a      	add	r2, r5
      x -= (w-1);
   d56f2:	18cd      	adds	r5, r1, r3
   d56f4:	8901      	ldrh	r1, [r0, #8]
   d56f6:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d56f8:	b212      	sxth	r2, r2
      x -= (w-1);
   d56fa:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d56fc:	2a00      	cmp	r2, #0
   d56fe:	dbf4      	blt.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5700:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d5704:	4295      	cmp	r5, r2
   d5706:	ddf0      	ble.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d5708:	2900      	cmp	r1, #0
    w += x;
   d570a:	bfbe      	ittt	lt
   d570c:	185b      	addlt	r3, r3, r1
   d570e:	b21b      	sxthlt	r3, r3
    x = 0;
   d5710:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d5712:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d5716:	18ce      	adds	r6, r1, r3
   d5718:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d571a:	bfc4      	itt	gt
   d571c:	1a6b      	subgt	r3, r5, r1
   d571e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d5720:	2b00      	cmp	r3, #0
   d5722:	dde2      	ble.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5724:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d5726:	2580      	movs	r5, #128	; 0x80
   d5728:	fb10 1105 	smlabb	r1, r0, r5, r1
   d572c:	4812      	ldr	r0, [pc, #72]	; (d5778 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d572e:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d5730:	f002 0107 	and.w	r1, r2, #7
   d5734:	2201      	movs	r2, #1
   d5736:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d5738:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d573a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d573c:	4403      	add	r3, r0
   d573e:	d10c      	bne.n	d575a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d5740:	4283      	cmp	r3, r0
   d5742:	d0d2      	beq.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5744:	f810 4b01 	ldrb.w	r4, [r0], #1
   d5748:	4314      	orrs	r4, r2
   d574a:	f800 4c01 	strb.w	r4, [r0, #-1]
   d574e:	e7f7      	b.n	d5740 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d5750:	18cd      	adds	r5, r1, r3
   d5752:	8941      	ldrh	r1, [r0, #10]
   d5754:	1b49      	subs	r1, r1, r5
   d5756:	b209      	sxth	r1, r1
      break;
   d5758:	e769      	b.n	d562e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d575a:	43d2      	mvns	r2, r2
   d575c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d575e:	4283      	cmp	r3, r0
   d5760:	d0c3      	beq.n	d56ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d5762:	f810 4b01 	ldrb.w	r4, [r0], #1
   d5766:	4014      	ands	r4, r2
   d5768:	f800 4c01 	strb.w	r4, [r0, #-1]
   d576c:	e7f7      	b.n	d575e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d576e:	bf00      	nop
   d5770:	2003ddd2 	.word	0x2003ddd2
   d5774:	2003ddca 	.word	0x2003ddca
   d5778:	2003ddda 	.word	0x2003ddda

000d577c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d577c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d577e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5780:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d5784:	2d02      	cmp	r5, #2
   d5786:	d034      	beq.n	d57f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d5788:	2d03      	cmp	r5, #3
   d578a:	f000 8099 	beq.w	d58c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d578e:	2d01      	cmp	r5, #1
   d5790:	d137      	bne.n	d5802 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d5792:	18d5      	adds	r5, r2, r3
   d5794:	8902      	ldrh	r2, [r0, #8]
   d5796:	1b52      	subs	r2, r2, r5
   d5798:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d579a:	2900      	cmp	r1, #0
   d579c:	f2c0 808f 	blt.w	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d57a0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d57a4:	428d      	cmp	r5, r1
   d57a6:	f340 808a 	ble.w	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d57aa:	2a00      	cmp	r2, #0
    w += x;
   d57ac:	bfbe      	ittt	lt
   d57ae:	189b      	addlt	r3, r3, r2
   d57b0:	b21b      	sxthlt	r3, r3
    x = 0;
   d57b2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d57b4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d57b8:	18d6      	adds	r6, r2, r3
   d57ba:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d57bc:	bfc4      	itt	gt
   d57be:	1aab      	subgt	r3, r5, r2
   d57c0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d57c2:	2b00      	cmp	r3, #0
   d57c4:	dd7b      	ble.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d57c6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d57c8:	2580      	movs	r5, #128	; 0x80
   d57ca:	fb10 2205 	smlabb	r2, r0, r5, r2
   d57ce:	4844      	ldr	r0, [pc, #272]	; (d58e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d57d0:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d57d2:	f001 0207 	and.w	r2, r1, #7
   d57d6:	2101      	movs	r1, #1
   d57d8:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d57da:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d57dc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d57de:	4403      	add	r3, r0
   d57e0:	d173      	bne.n	d58ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d57e2:	4298      	cmp	r0, r3
   d57e4:	d06b      	beq.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d57e6:	f810 4b01 	ldrb.w	r4, [r0], #1
   d57ea:	430c      	orrs	r4, r1
   d57ec:	f800 4c01 	strb.w	r4, [r0, #-1]
   d57f0:	e7f7      	b.n	d57e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d57f2:	8905      	ldrh	r5, [r0, #8]
   d57f4:	43c9      	mvns	r1, r1
   d57f6:	4429      	add	r1, r5
      y -= (h-1);
   d57f8:	18d5      	adds	r5, r2, r3
   d57fa:	8942      	ldrh	r2, [r0, #10]
   d57fc:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d57fe:	b209      	sxth	r1, r1
      y -= (h-1);
   d5800:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d5802:	2900      	cmp	r1, #0
   d5804:	db5b      	blt.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d5806:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d580a:	428d      	cmp	r5, r1
   d580c:	dd57      	ble.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d580e:	2a00      	cmp	r2, #0
    __h += __y;
   d5810:	bfbe      	ittt	lt
   d5812:	189b      	addlt	r3, r3, r2
   d5814:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5816:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d5818:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d581c:	18d5      	adds	r5, r2, r3
   d581e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d5820:	bfc4      	itt	gt
   d5822:	1a83      	subgt	r3, r0, r2
   d5824:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d5826:	2b00      	cmp	r3, #0
   d5828:	dd49      	ble.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d582a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d582e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d58e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d5832:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d5836:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d583a:	b2db      	uxtb	r3, r3
  pBuf += x;
   d583c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d5840:	d01a      	beq.n	d5878 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d5842:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d5846:	4e27      	ldr	r6, [pc, #156]	; (d58e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d5848:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d584a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d584c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d584e:	bf3f      	itttt	cc
   d5850:	eba5 0e03 	subcc.w	lr, r5, r3
   d5854:	26ff      	movcc	r6, #255	; 0xff
   d5856:	fa46 f60e 	asrcc.w	r6, r6, lr
   d585a:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d585c:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d5860:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d5862:	bf0c      	ite	eq
   d5864:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d5866:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d5868:	42ab      	cmp	r3, r5
   d586a:	f80c 6001 	strb.w	r6, [ip, r1]
   d586e:	d326      	bcc.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d5870:	3a08      	subs	r2, #8
   d5872:	4413      	add	r3, r2
   d5874:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d5876:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d5878:	2b07      	cmp	r3, #7
   d587a:	d917      	bls.n	d58ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d587c:	2c01      	cmp	r4, #1
   d587e:	bf0c      	ite	eq
   d5880:	25ff      	moveq	r5, #255	; 0xff
   d5882:	2500      	movne	r5, #0
   d5884:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d5888:	461a      	mov	r2, r3
      h -= 8;
   d588a:	3a08      	subs	r2, #8
   d588c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d588e:	2a07      	cmp	r2, #7
      *pBuf = val;
   d5890:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d5894:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d5898:	d8f7      	bhi.n	d588a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d589a:	f1a3 0208 	sub.w	r2, r3, #8
   d589e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d58a2:	3201      	adds	r2, #1
   d58a4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d58a8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d58ac:	b13b      	cbz	r3, d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d58ae:	4a0e      	ldr	r2, [pc, #56]	; (d58e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d58b0:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d58b2:	7803      	ldrb	r3, [r0, #0]
   d58b4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d58b6:	bf0c      	ite	eq
   d58b8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d58ba:	4393      	bicne	r3, r2
   d58bc:	7003      	strb	r3, [r0, #0]
}
   d58be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d58c0:	8945      	ldrh	r5, [r0, #10]
   d58c2:	43c9      	mvns	r1, r1
   d58c4:	4429      	add	r1, r5
   d58c6:	b209      	sxth	r1, r1
      break;
   d58c8:	e767      	b.n	d579a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d58ca:	43c9      	mvns	r1, r1
   d58cc:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d58ce:	4298      	cmp	r0, r3
   d58d0:	d0f5      	beq.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d58d2:	f810 4b01 	ldrb.w	r4, [r0], #1
   d58d6:	400c      	ands	r4, r1
   d58d8:	f800 4c01 	strb.w	r4, [r0, #-1]
   d58dc:	e7f7      	b.n	d58ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d58de:	bf00      	nop
   d58e0:	2003ddda 	.word	0x2003ddda
   d58e4:	2003ddd2 	.word	0x2003ddd2
   d58e8:	2003ddca 	.word	0x2003ddca

000d58ec <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d58ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d58ee:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d58f0:	4606      	mov	r6, r0
   d58f2:	4614      	mov	r4, r2
   d58f4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d58f6:	db2d      	blt.n	d5954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d58f8:	f000 fbb9 	bl	d606e <_ZN12Adafruit_GFX5widthEv>
   d58fc:	42a8      	cmp	r0, r5
   d58fe:	dd29      	ble.n	d5954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d5900:	2c00      	cmp	r4, #0
   d5902:	db27      	blt.n	d5954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d5904:	4630      	mov	r0, r6
   d5906:	f000 fbb5 	bl	d6074 <_ZN12Adafruit_GFX6heightEv>
   d590a:	42a0      	cmp	r0, r4
   d590c:	dd22      	ble.n	d5954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d590e:	4630      	mov	r0, r6
   d5910:	f000 fb9d 	bl	d604e <_ZN12Adafruit_GFX11getRotationEv>
   d5914:	2802      	cmp	r0, #2
   d5916:	d01e      	beq.n	d5956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d5918:	2803      	cmp	r0, #3
   d591a:	d025      	beq.n	d5968 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d591c:	2801      	cmp	r0, #1
   d591e:	d104      	bne.n	d592a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d5920:	8932      	ldrh	r2, [r6, #8]
   d5922:	43e4      	mvns	r4, r4
   d5924:	4422      	add	r2, r4
    break;
   d5926:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d5928:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d592a:	2c00      	cmp	r4, #0
   d592c:	4621      	mov	r1, r4
   d592e:	bfb8      	it	lt
   d5930:	1de1      	addlt	r1, r4, #7
   d5932:	10c9      	asrs	r1, r1, #3
   d5934:	2380      	movs	r3, #128	; 0x80
   d5936:	fb11 5503 	smlabb	r5, r1, r3, r5
   d593a:	490e      	ldr	r1, [pc, #56]	; (d5974 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d593c:	2201      	movs	r2, #1
   d593e:	f004 0407 	and.w	r4, r4, #7
   d5942:	574b      	ldrsb	r3, [r1, r5]
   d5944:	fa02 f404 	lsl.w	r4, r2, r4
   d5948:	b264      	sxtb	r4, r4
   d594a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d594c:	bf0c      	ite	eq
   d594e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d5950:	43a3      	bicne	r3, r4
   d5952:	554b      	strb	r3, [r1, r5]
}
   d5954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d5956:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d5958:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d595a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d595c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d595e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d5960:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d5962:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d5964:	b224      	sxth	r4, r4
    break;
   d5966:	e7e0      	b.n	d592a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d5968:	8973      	ldrh	r3, [r6, #10]
   d596a:	3b01      	subs	r3, #1
   d596c:	1b5b      	subs	r3, r3, r5
    break;
   d596e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d5970:	b21c      	sxth	r4, r3
    break;
   d5972:	e7da      	b.n	d592a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d5974:	2003ddda 	.word	0x2003ddda

000d5978 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5978:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d597a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d597c:	4604      	mov	r4, r0
   d597e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5980:	2180      	movs	r1, #128	; 0x80
   d5982:	f000 fa8b 	bl	d5e9c <_ZN12Adafruit_GFXC1Ess>
   d5986:	4b06      	ldr	r3, [pc, #24]	; (d59a0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5988:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d598a:	23ff      	movs	r3, #255	; 0xff
   d598c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d5990:	7763      	strb	r3, [r4, #29]
   d5992:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5996:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d5998:	f884 5020 	strb.w	r5, [r4, #32]
}
   d599c:	4620      	mov	r0, r4
   d599e:	bd38      	pop	{r3, r4, r5, pc}
   d59a0:	000daa20 	.word	0x000daa20

000d59a4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d59a4:	4802      	ldr	r0, [pc, #8]	; (d59b0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d59a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d59aa:	2100      	movs	r1, #0
   d59ac:	f003 b878 	b.w	d8aa0 <memset>
   d59b0:	2003ddda 	.word	0x2003ddda

000d59b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d59b4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d59b6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d59ba:	b143      	cbz	r3, d59ce <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d59bc:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   d59be:	f7fe ffd1 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d59c2:	9901      	ldr	r1, [sp, #4]
}
   d59c4:	b003      	add	sp, #12
   d59c6:	f85d eb04 	ldr.w	lr, [sp], #4
   d59ca:	f001 b83f 	b.w	d6a4c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d59ce:	460b      	mov	r3, r1
   d59d0:	7f81      	ldrb	r1, [r0, #30]
   d59d2:	7f40      	ldrb	r0, [r0, #29]
   d59d4:	2201      	movs	r2, #1
}
   d59d6:	b003      	add	sp, #12
   d59d8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d59dc:	f002 b997 	b.w	d7d0e <shiftOut>

000d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d59e0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d59e2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d59e6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d59e8:	4604      	mov	r4, r0
   d59ea:	460d      	mov	r5, r1
  if (sid != -1)
   d59ec:	d01d      	beq.n	d5a2a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d59ee:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d59f2:	2101      	movs	r1, #1
   d59f4:	b280      	uxth	r0, r0
   d59f6:	f002 f95e 	bl	d7cb6 <digitalWrite>
    digitalWrite(dc, LOW);
   d59fa:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d59fe:	2100      	movs	r1, #0
   d5a00:	b280      	uxth	r0, r0
   d5a02:	f002 f958 	bl	d7cb6 <digitalWrite>
    digitalWrite(cs, LOW);
   d5a06:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a0a:	2100      	movs	r1, #0
   d5a0c:	b280      	uxth	r0, r0
   d5a0e:	f002 f952 	bl	d7cb6 <digitalWrite>
    fastSPIwrite(c);
   d5a12:	4629      	mov	r1, r5
   d5a14:	4620      	mov	r0, r4
   d5a16:	f7ff ffcd 	bl	d59b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d5a1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a1e:	2101      	movs	r1, #1
}
   d5a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d5a24:	b280      	uxth	r0, r0
   d5a26:	f002 b946 	b.w	d7cb6 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d5a2a:	f002 f9ab 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5a2e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5a32:	f001 fd31 	bl	d7498 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5a36:	f002 f9a5 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5a3a:	6803      	ldr	r3, [r0, #0]
   d5a3c:	2100      	movs	r1, #0
   d5a3e:	689b      	ldr	r3, [r3, #8]
   d5a40:	4798      	blx	r3
    Wire.write(c);
   d5a42:	f002 f99f 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5a46:	6803      	ldr	r3, [r0, #0]
   d5a48:	4629      	mov	r1, r5
   d5a4a:	689b      	ldr	r3, [r3, #8]
   d5a4c:	4798      	blx	r3
    Wire.endTransmission();
   d5a4e:	f002 f999 	bl	d7d84 <_Z19__fetch_global_Wirev>
}
   d5a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d5a56:	f001 bd26 	b.w	d74a6 <_ZN7TwoWire15endTransmissionEv>
	...

000d5a5c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5a5e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d5a60:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5a62:	f7ff ffbd 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5a66:	2100      	movs	r1, #0
   d5a68:	4620      	mov	r0, r4
   d5a6a:	f7ff ffb9 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5a6e:	217f      	movs	r1, #127	; 0x7f
   d5a70:	4620      	mov	r0, r4
   d5a72:	f7ff ffb5 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d5a76:	2122      	movs	r1, #34	; 0x22
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f7ff ffb1 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5a7e:	2100      	movs	r1, #0
   d5a80:	4620      	mov	r0, r4
   d5a82:	f7ff ffad 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5a86:	2107      	movs	r1, #7
   d5a88:	4620      	mov	r0, r4
   d5a8a:	f7ff ffa9 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d5a8e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5a92:	4f29      	ldr	r7, [pc, #164]	; (d5b38 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d5a94:	3301      	adds	r3, #1
   d5a96:	d02a      	beq.n	d5aee <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d5a98:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5a9c:	2101      	movs	r1, #1
   d5a9e:	b280      	uxth	r0, r0
   d5aa0:	f002 f909 	bl	d7cb6 <digitalWrite>
    digitalWrite(dc, HIGH);
   d5aa4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5aa8:	2101      	movs	r1, #1
   d5aaa:	b280      	uxth	r0, r0
   d5aac:	f002 f903 	bl	d7cb6 <digitalWrite>
    digitalWrite(cs, LOW);
   d5ab0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5ab4:	2100      	movs	r1, #0
   d5ab6:	b280      	uxth	r0, r0
   d5ab8:	f002 f8fd 	bl	d7cb6 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5abc:	2001      	movs	r0, #1
   d5abe:	f000 fbd5 	bl	d626c <HAL_Delay_Microseconds>
   d5ac2:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d5ac6:	3d01      	subs	r5, #1
   d5ac8:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5acc:	4620      	mov	r0, r4
   d5ace:	b2ad      	uxth	r5, r5
   d5ad0:	f7ff ff70 	bl	d59b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5ad4:	2d00      	cmp	r5, #0
   d5ad6:	d1f6      	bne.n	d5ac6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d5ad8:	2001      	movs	r0, #1
   d5ada:	f000 fbc7 	bl	d626c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d5ade:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5ae2:	2101      	movs	r1, #1
}
   d5ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d5ae8:	b280      	uxth	r0, r0
   d5aea:	f002 b8e4 	b.w	d7cb6 <digitalWrite>
   d5aee:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d5af0:	f002 f948 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5af4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5af8:	f001 fcce 	bl	d7498 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d5afc:	f002 f942 	bl	d7d84 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5b00:	6803      	ldr	r3, [r0, #0]
   d5b02:	f1a6 0510 	sub.w	r5, r6, #16
   d5b06:	689b      	ldr	r3, [r3, #8]
   d5b08:	2140      	movs	r1, #64	; 0x40
   d5b0a:	b2ad      	uxth	r5, r5
   d5b0c:	4798      	blx	r3
		Wire.write(buffer[i]);
   d5b0e:	f002 f939 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5b12:	6803      	ldr	r3, [r0, #0]
   d5b14:	5d79      	ldrb	r1, [r7, r5]
   d5b16:	689b      	ldr	r3, [r3, #8]
		i++;
   d5b18:	3501      	adds	r5, #1
   d5b1a:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d5b1c:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d5b1e:	42ae      	cmp	r6, r5
   d5b20:	d1f5      	bne.n	d5b0e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d5b22:	f002 f92f 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5b26:	f001 fcbe 	bl	d74a6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5b2a:	f106 0310 	add.w	r3, r6, #16
   d5b2e:	b29e      	uxth	r6, r3
   d5b30:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d5b34:	d1dc      	bne.n	d5af0 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d5b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5b38:	2003ddda 	.word	0x2003ddda

000d5b3c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5b3c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d5b3e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d5b42:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d5b44:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5b46:	4604      	mov	r4, r0
   d5b48:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d5b4a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d5b4c:	f000 80c9 	beq.w	d5ce2 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d5b50:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5b54:	2101      	movs	r1, #1
   d5b56:	b280      	uxth	r0, r0
   d5b58:	f002 f89c 	bl	d7c94 <pinMode>
    pinMode(cs, OUTPUT);
   d5b5c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5b60:	2101      	movs	r1, #1
   d5b62:	b280      	uxth	r0, r0
   d5b64:	f002 f896 	bl	d7c94 <pinMode>
    if (!hwSPI){
   d5b68:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5b6c:	2b00      	cmp	r3, #0
   d5b6e:	f000 80a6 	beq.w	d5cbe <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d5b72:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5b76:	2101      	movs	r1, #1
   d5b78:	b280      	uxth	r0, r0
   d5b7a:	f002 f89c 	bl	d7cb6 <digitalWrite>
        instance().setBitOrder(order);
   d5b7e:	f7fe fef1 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b82:	2101      	movs	r1, #1
   d5b84:	f000 fe5d 	bl	d6842 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d5b88:	f7fe feec 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b8c:	2110      	movs	r1, #16
   d5b8e:	f000 ff37 	bl	d6a00 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d5b92:	f7fe fee7 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5b96:	2100      	movs	r1, #0
   d5b98:	f000 fe66 	bl	d6868 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d5b9c:	f7fe fee2 	bl	d4964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5ba0:	f000 fe3e 	bl	d6820 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d5ba4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5ba8:	2101      	movs	r1, #1
   d5baa:	b280      	uxth	r0, r0
   d5bac:	f002 f872 	bl	d7c94 <pinMode>
  digitalWrite(rst, HIGH);
   d5bb0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5bb4:	2101      	movs	r1, #1
   d5bb6:	b280      	uxth	r0, r0
   d5bb8:	f002 f87d 	bl	d7cb6 <digitalWrite>
  delay(1);
   d5bbc:	2001      	movs	r0, #1
   d5bbe:	f001 f94d 	bl	d6e5c <delay>
  digitalWrite(rst, LOW);
   d5bc2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5bc6:	2100      	movs	r1, #0
   d5bc8:	b280      	uxth	r0, r0
   d5bca:	f002 f874 	bl	d7cb6 <digitalWrite>
  delay(10);
   d5bce:	200a      	movs	r0, #10
   d5bd0:	f001 f944 	bl	d6e5c <delay>
  digitalWrite(rst, HIGH);
   d5bd4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5bd8:	2101      	movs	r1, #1
   d5bda:	b280      	uxth	r0, r0
   d5bdc:	f002 f86b 	bl	d7cb6 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5be0:	4620      	mov	r0, r4
   d5be2:	21ae      	movs	r1, #174	; 0xae
   d5be4:	f7ff fefc 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5be8:	4620      	mov	r0, r4
   d5bea:	21d5      	movs	r1, #213	; 0xd5
   d5bec:	f7ff fef8 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	2180      	movs	r1, #128	; 0x80
   d5bf4:	f7ff fef4 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	21a8      	movs	r1, #168	; 0xa8
   d5bfc:	f7ff fef0 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d5c00:	4620      	mov	r0, r4
   d5c02:	213f      	movs	r1, #63	; 0x3f
   d5c04:	f7ff feec 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5c08:	4620      	mov	r0, r4
   d5c0a:	21d3      	movs	r1, #211	; 0xd3
   d5c0c:	f7ff fee8 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d5c10:	4620      	mov	r0, r4
   d5c12:	2100      	movs	r1, #0
   d5c14:	f7ff fee4 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5c18:	4620      	mov	r0, r4
   d5c1a:	2140      	movs	r1, #64	; 0x40
   d5c1c:	f7ff fee0 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5c20:	218d      	movs	r1, #141	; 0x8d
   d5c22:	4620      	mov	r0, r4
   d5c24:	f7ff fedc 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5c28:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d5c2a:	bf0c      	ite	eq
   d5c2c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d5c2e:	2114      	movne	r1, #20
   d5c30:	4620      	mov	r0, r4
   d5c32:	f7ff fed5 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5c36:	4620      	mov	r0, r4
   d5c38:	2120      	movs	r1, #32
   d5c3a:	f7ff fed1 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5c3e:	4620      	mov	r0, r4
   d5c40:	2100      	movs	r1, #0
   d5c42:	f7ff fecd 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5c46:	4620      	mov	r0, r4
   d5c48:	21a1      	movs	r1, #161	; 0xa1
   d5c4a:	f7ff fec9 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5c4e:	4620      	mov	r0, r4
   d5c50:	21c8      	movs	r1, #200	; 0xc8
   d5c52:	f7ff fec5 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5c56:	4620      	mov	r0, r4
   d5c58:	21da      	movs	r1, #218	; 0xda
   d5c5a:	f7ff fec1 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5c5e:	4620      	mov	r0, r4
   d5c60:	2112      	movs	r1, #18
   d5c62:	f7ff febd 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5c66:	2181      	movs	r1, #129	; 0x81
   d5c68:	4620      	mov	r0, r4
   d5c6a:	f7ff feb9 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5c6e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5c70:	bf0c      	ite	eq
   d5c72:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d5c74:	21cf      	movne	r1, #207	; 0xcf
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff feb2 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5c7c:	21d9      	movs	r1, #217	; 0xd9
   d5c7e:	4620      	mov	r0, r4
   d5c80:	f7ff feae 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5c84:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5c86:	bf0c      	ite	eq
   d5c88:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d5c8a:	21f1      	movne	r1, #241	; 0xf1
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	f7ff fea7 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5c92:	4620      	mov	r0, r4
   d5c94:	21db      	movs	r1, #219	; 0xdb
   d5c96:	f7ff fea3 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	2140      	movs	r1, #64	; 0x40
   d5c9e:	f7ff fe9f 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	21a4      	movs	r1, #164	; 0xa4
   d5ca6:	f7ff fe9b 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5caa:	4620      	mov	r0, r4
   d5cac:	21a6      	movs	r1, #166	; 0xa6
   d5cae:	f7ff fe97 	bl	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	21af      	movs	r1, #175	; 0xaf
}
   d5cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5cba:	f7ff be91 	b.w	d59e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d5cbe:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5cc2:	2101      	movs	r1, #1
   d5cc4:	b280      	uxth	r0, r0
   d5cc6:	f001 ffe5 	bl	d7c94 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5cca:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d5cce:	2101      	movs	r1, #1
   d5cd0:	b280      	uxth	r0, r0
   d5cd2:	f001 ffdf 	bl	d7c94 <pinMode>
    if (hwSPI){
   d5cd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5cda:	2b00      	cmp	r3, #0
   d5cdc:	f43f af62 	beq.w	d5ba4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d5ce0:	e747      	b.n	d5b72 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d5ce2:	f002 f84f 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d5ce6:	f001 fba1 	bl	d742c <_ZN7TwoWire5beginEv>
   d5cea:	e75b      	b.n	d5ba4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d5cec <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cf0:	b085      	sub	sp, #20
   d5cf2:	461f      	mov	r7, r3
   d5cf4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5cf8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5cfc:	eba8 0902 	sub.w	r9, r8, r2
   d5d00:	eba7 0a01 	sub.w	sl, r7, r1
   d5d04:	f1b9 0f00 	cmp.w	r9, #0
   d5d08:	bfb8      	it	lt
   d5d0a:	f1c9 0900 	rsblt	r9, r9, #0
   d5d0e:	f1ba 0f00 	cmp.w	sl, #0
   d5d12:	bfb8      	it	lt
   d5d14:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d5d18:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d5d1a:	4683      	mov	fp, r0
   d5d1c:	460c      	mov	r4, r1
   d5d1e:	4615      	mov	r5, r2
  if (steep) {
   d5d20:	dd04      	ble.n	d5d2c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d5d22:	463a      	mov	r2, r7
    swap(x0, y0);
   d5d24:	462c      	mov	r4, r5
    swap(x1, y1);
   d5d26:	4647      	mov	r7, r8
    swap(x0, y0);
   d5d28:	460d      	mov	r5, r1
    swap(x1, y1);
   d5d2a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d5d2c:	42bc      	cmp	r4, r7
   d5d2e:	dd05      	ble.n	d5d3c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d5d30:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5d32:	4645      	mov	r5, r8
   d5d34:	4690      	mov	r8, r2
  if (x0 > x1) {
   d5d36:	4622      	mov	r2, r4
   d5d38:	463c      	mov	r4, r7
   d5d3a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5d3c:	1b3e      	subs	r6, r7, r4
   d5d3e:	b2b2      	uxth	r2, r6
   d5d40:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d5d42:	eba8 0205 	sub.w	r2, r8, r5
   d5d46:	2a00      	cmp	r2, #0
   d5d48:	bfb8      	it	lt
   d5d4a:	4252      	neglt	r2, r2
   d5d4c:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d5d4e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5d52:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5d56:	4545      	cmp	r5, r8
   d5d58:	bfb4      	ite	lt
   d5d5a:	2201      	movlt	r2, #1
   d5d5c:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d5d60:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d5d62:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d5d64:	42bc      	cmp	r4, r7
   d5d66:	dc1c      	bgt.n	d5da2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d5d68:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d5d6c:	9303      	str	r3, [sp, #12]
    if (steep) {
   d5d6e:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d5d70:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d5d74:	bfc7      	ittee	gt
   d5d76:	4629      	movgt	r1, r5
   d5d78:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d5d7a:	462a      	movle	r2, r5
   d5d7c:	4621      	movle	r1, r4
   d5d7e:	4658      	mov	r0, fp
   d5d80:	47c0      	blx	r8
    }
    err -= dy;
   d5d82:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d5d84:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d5d86:	1ab6      	subs	r6, r6, r2
   d5d88:	b2b1      	uxth	r1, r6
   d5d8a:	b236      	sxth	r6, r6
    if (err < 0) {
   d5d8c:	2e00      	cmp	r6, #0
   d5d8e:	da05      	bge.n	d5d9c <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d5d90:	9a02      	ldr	r2, [sp, #8]
   d5d92:	4415      	add	r5, r2
      err += dx;
   d5d94:	9a00      	ldr	r2, [sp, #0]
   d5d96:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d5d98:	b22d      	sxth	r5, r5
      err += dx;
   d5d9a:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d5d9c:	3401      	adds	r4, #1
   d5d9e:	b224      	sxth	r4, r4
   d5da0:	e7e0      	b.n	d5d64 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d5da2:	b005      	add	sp, #20
   d5da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5da8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5da8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5dac:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5db0:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d5db2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5db6:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d5dba:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5dbc:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d5dbe:	4616      	mov	r6, r2
   d5dc0:	468a      	mov	sl, r1
   d5dc2:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d5dc4:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5dc6:	6823      	ldr	r3, [r4, #0]
   d5dc8:	f8cd 8000 	str.w	r8, [sp]
   d5dcc:	f109 32ff 	add.w	r2, r9, #4294967295
   d5dd0:	4432      	add	r2, r6
   d5dd2:	69df      	ldr	r7, [r3, #28]
   d5dd4:	4651      	mov	r1, sl
   d5dd6:	462b      	mov	r3, r5
   d5dd8:	4620      	mov	r0, r4
   d5dda:	b212      	sxth	r2, r2
   d5ddc:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5dde:	6823      	ldr	r3, [r4, #0]
   d5de0:	f8cd 8000 	str.w	r8, [sp]
   d5de4:	699f      	ldr	r7, [r3, #24]
   d5de6:	4632      	mov	r2, r6
   d5de8:	464b      	mov	r3, r9
   d5dea:	4651      	mov	r1, sl
   d5dec:	4620      	mov	r0, r4
   d5dee:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5df0:	1e6b      	subs	r3, r5, #1
   d5df2:	eb03 010a 	add.w	r1, r3, sl
   d5df6:	6823      	ldr	r3, [r4, #0]
   d5df8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5dfc:	699d      	ldr	r5, [r3, #24]
   d5dfe:	4632      	mov	r2, r6
   d5e00:	464b      	mov	r3, r9
   d5e02:	b209      	sxth	r1, r1
   d5e04:	4620      	mov	r0, r4
   d5e06:	46ac      	mov	ip, r5
}
   d5e08:	b002      	add	sp, #8
   d5e0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d5e0e:	4760      	bx	ip

000d5e10 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5e12:	3b01      	subs	r3, #1
   d5e14:	4413      	add	r3, r2
   d5e16:	6804      	ldr	r4, [r0, #0]
   d5e18:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5e1c:	9501      	str	r5, [sp, #4]
   d5e1e:	b21b      	sxth	r3, r3
   d5e20:	9300      	str	r3, [sp, #0]
   d5e22:	6964      	ldr	r4, [r4, #20]
   d5e24:	460b      	mov	r3, r1
   d5e26:	47a0      	blx	r4
}
   d5e28:	b003      	add	sp, #12
   d5e2a:	bd30      	pop	{r4, r5, pc}

000d5e2c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d5e2e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5e32:	6804      	ldr	r4, [r0, #0]
   d5e34:	e9cd 2500 	strd	r2, r5, [sp]
   d5e38:	3b01      	subs	r3, #1
   d5e3a:	440b      	add	r3, r1
   d5e3c:	6964      	ldr	r4, [r4, #20]
   d5e3e:	b21b      	sxth	r3, r3
   d5e40:	47a0      	blx	r4
}
   d5e42:	b003      	add	sp, #12
   d5e44:	bd30      	pop	{r4, r5, pc}

000d5e46 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5e46:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5e4a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5e4e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5e52:	4605      	mov	r5, r0
   d5e54:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5e56:	460c      	mov	r4, r1
   d5e58:	18ce      	adds	r6, r1, r3
   d5e5a:	42b4      	cmp	r4, r6
   d5e5c:	da0b      	bge.n	d5e76 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d5e5e:	682b      	ldr	r3, [r5, #0]
   d5e60:	f8cd 8000 	str.w	r8, [sp]
   d5e64:	699f      	ldr	r7, [r3, #24]
   d5e66:	4621      	mov	r1, r4
   d5e68:	464b      	mov	r3, r9
   d5e6a:	4652      	mov	r2, sl
   d5e6c:	4628      	mov	r0, r5
   d5e6e:	3401      	adds	r4, #1
   d5e70:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d5e72:	b224      	sxth	r4, r4
   d5e74:	e7f1      	b.n	d5e5a <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d5e76:	b002      	add	sp, #8
   d5e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5e7c <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5e7c:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5e7e:	6802      	ldr	r2, [r0, #0]
   d5e80:	9101      	str	r1, [sp, #4]
   d5e82:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5e86:	9100      	str	r1, [sp, #0]
   d5e88:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d5e8a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5e8e:	2200      	movs	r2, #0
   d5e90:	4611      	mov	r1, r2
   d5e92:	47a0      	blx	r4
}
   d5e94:	b002      	add	sp, #8
   d5e96:	bd10      	pop	{r4, pc}

000d5e98 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d5e98:	4770      	bx	lr
	...

000d5e9c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5e9c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5e9e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d5ea0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d5ea2:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d5ea6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d5ea8:	4d05      	ldr	r5, [pc, #20]	; (d5ec0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d5eaa:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d5eac:	2201      	movs	r2, #1
   d5eae:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d5eb0:	6005      	str	r5, [r0, #0]
   d5eb2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d5eb4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d5eb6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d5eb8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d5eba:	7682      	strb	r2, [r0, #26]
}
   d5ebc:	bd30      	pop	{r4, r5, pc}
   d5ebe:	bf00      	nop
   d5ec0:	000daf54 	.word	0x000daf54

000d5ec4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ec8:	ed2d 8b02 	vpush	{d8}
   d5ecc:	b08b      	sub	sp, #44	; 0x2c
   d5ece:	4606      	mov	r6, r0
   d5ed0:	9103      	str	r1, [sp, #12]
   d5ed2:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d5ed6:	9105      	str	r1, [sp, #20]
   d5ed8:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d5edc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d5ede:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5ee2:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5ee4:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5ee8:	4281      	cmp	r1, r0
   d5eea:	dd51      	ble.n	d5f90 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d5eec:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d5ef0:	4291      	cmp	r1, r2
   d5ef2:	dd4d      	ble.n	d5f90 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5ef4:	2106      	movs	r1, #6
   d5ef6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d5efa:	2c00      	cmp	r4, #0
   d5efc:	dd48      	ble.n	d5f90 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d5efe:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d5f02:	2c00      	cmp	r4, #0
   d5f04:	dd44      	ble.n	d5f90 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d5f06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5f0a:	9309      	str	r3, [sp, #36]	; 0x24
   d5f0c:	b293      	uxth	r3, r2
   d5f0e:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d5f10:	2400      	movs	r4, #0
   d5f12:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d5f14:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d5f16:	bf1c      	itt	ne
   d5f18:	4b2d      	ldrne	r3, [pc, #180]	; (d5fd0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d5f1a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f1c:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d5f1e:	bf16      	itet	ne
   d5f20:	191b      	addne	r3, r3, r4
      line = 0x0;
   d5f22:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d5f24:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d5f26:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f28:	9a03      	ldr	r2, [sp, #12]
   d5f2a:	b2ab      	uxth	r3, r5
   d5f2c:	9308      	str	r3, [sp, #32]
   d5f2e:	fb04 f305 	mul.w	r3, r4, r5
   d5f32:	fa13 f382 	uxtah	r3, r3, r2
   d5f36:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d5f38:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f3c:	ee08 3a10 	vmov	s16, r3
   d5f40:	f04f 0800 	mov.w	r8, #0
   d5f44:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d5f48:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d5f4c:	9b02      	ldr	r3, [sp, #8]
   d5f4e:	07db      	lsls	r3, r3, #31
   d5f50:	d52f      	bpl.n	d5fb2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5f52:	2d01      	cmp	r5, #1
   d5f54:	6833      	ldr	r3, [r6, #0]
   d5f56:	d120      	bne.n	d5f9a <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d5f58:	9a04      	ldr	r2, [sp, #16]
   d5f5a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5f5e:	9b05      	ldr	r3, [sp, #20]
   d5f60:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d5f62:	b212      	sxth	r2, r2
   d5f64:	4651      	mov	r1, sl
   d5f66:	4630      	mov	r0, r6
   d5f68:	47d8      	blx	fp
      line >>= 1;
   d5f6a:	9b02      	ldr	r3, [sp, #8]
   d5f6c:	085b      	lsrs	r3, r3, #1
   d5f6e:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d5f70:	9b08      	ldr	r3, [sp, #32]
   d5f72:	f108 0801 	add.w	r8, r8, #1
   d5f76:	441f      	add	r7, r3
   d5f78:	f1b8 0f08 	cmp.w	r8, #8
   d5f7c:	b2bf      	uxth	r7, r7
   d5f7e:	d1e5      	bne.n	d5f4c <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d5f80:	9b07      	ldr	r3, [sp, #28]
   d5f82:	3b01      	subs	r3, #1
   d5f84:	3401      	adds	r4, #1
   d5f86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5f8a:	b264      	sxtb	r4, r4
   d5f8c:	9307      	str	r3, [sp, #28]
   d5f8e:	d1c1      	bne.n	d5f14 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d5f90:	b00b      	add	sp, #44	; 0x2c
   d5f92:	ecbd 8b02 	vpop	{d8}
   d5f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5f9a:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5f9c:	e9cd 9200 	strd	r9, r2, [sp]
   d5fa0:	ee18 1a10 	vmov	r1, s16
   d5fa4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5fa8:	b23a      	sxth	r2, r7
   d5faa:	464b      	mov	r3, r9
   d5fac:	4630      	mov	r0, r6
   d5fae:	47d8      	blx	fp
   d5fb0:	e7db      	b.n	d5f6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d5fb2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d5fb6:	4293      	cmp	r3, r2
   d5fb8:	d0d7      	beq.n	d5f6a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d5fba:	2d01      	cmp	r5, #1
   d5fbc:	6833      	ldr	r3, [r6, #0]
   d5fbe:	d105      	bne.n	d5fcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d5fc0:	9a04      	ldr	r2, [sp, #16]
   d5fc2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5fc6:	9b06      	ldr	r3, [sp, #24]
   d5fc8:	4442      	add	r2, r8
   d5fca:	e7ca      	b.n	d5f62 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5fcc:	9a06      	ldr	r2, [sp, #24]
   d5fce:	e7e5      	b.n	d5f9c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d5fd0:	000daa50 	.word	0x000daa50

000d5fd4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5fd4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d5fd6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d5fd8:	b085      	sub	sp, #20
   d5fda:	4604      	mov	r4, r0
  if (c == '\n') {
   d5fdc:	d107      	bne.n	d5fee <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d5fde:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d5fe0:	8a63      	ldrh	r3, [r4, #18]
   d5fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5fe6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5fe8:	2300      	movs	r3, #0
   d5fea:	8223      	strh	r3, [r4, #16]
   d5fec:	e021      	b.n	d6032 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d5fee:	290d      	cmp	r1, #13
   d5ff0:	d01f      	beq.n	d6032 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5ff2:	7e03      	ldrb	r3, [r0, #24]
   d5ff4:	9302      	str	r3, [sp, #8]
   d5ff6:	8ac3      	ldrh	r3, [r0, #22]
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	8a83      	ldrh	r3, [r0, #20]
   d5ffc:	9300      	str	r3, [sp, #0]
   d5ffe:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d6002:	460b      	mov	r3, r1
   d6004:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d6008:	f7ff ff5c 	bl	d5ec4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d600c:	7e21      	ldrb	r1, [r4, #24]
   d600e:	8a23      	ldrh	r3, [r4, #16]
   d6010:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d6014:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6018:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d601a:	b21b      	sxth	r3, r3
   d601c:	460a      	mov	r2, r1
   d601e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6020:	b138      	cbz	r0, d6032 <_ZN12Adafruit_GFX5writeEh+0x5e>
   d6022:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d6026:	f06f 0505 	mvn.w	r5, #5
   d602a:	fb05 0101 	mla	r1, r5, r1, r0
   d602e:	428b      	cmp	r3, r1
   d6030:	dcd6      	bgt.n	d5fe0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d6032:	2001      	movs	r0, #1
   d6034:	b005      	add	sp, #20
   d6036:	bd30      	pop	{r4, r5, pc}

000d6038 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d6038:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d603a:	8242      	strh	r2, [r0, #18]
}
   d603c:	4770      	bx	lr

000d603e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d603e:	2901      	cmp	r1, #1
   d6040:	bf38      	it	cc
   d6042:	2101      	movcc	r1, #1
   d6044:	7601      	strb	r1, [r0, #24]
}
   d6046:	4770      	bx	lr

000d6048 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d6048:	82c1      	strh	r1, [r0, #22]
   d604a:	8281      	strh	r1, [r0, #20]
}
   d604c:	4770      	bx	lr

000d604e <_ZN12Adafruit_GFX11getRotationEv>:
}
   d604e:	7e40      	ldrb	r0, [r0, #25]
   d6050:	4770      	bx	lr

000d6052 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d6052:	f001 0303 	and.w	r3, r1, #3
   d6056:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d605a:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   d605c:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   d605e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d6062:	bf59      	ittee	pl
   d6064:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d6066:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   d6068:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d606a:	81c3      	strhmi	r3, [r0, #14]
}
   d606c:	4770      	bx	lr

000d606e <_ZN12Adafruit_GFX5widthEv>:
}
   d606e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d6072:	4770      	bx	lr

000d6074 <_ZN12Adafruit_GFX6heightEv>:
}
   d6074:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d6078:	4770      	bx	lr

000d607a <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d607a:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d607c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d6080:	6803      	ldr	r3, [r0, #0]
   d6082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6084:	4798      	blx	r3
}
   d6086:	3800      	subs	r0, #0
   d6088:	bf18      	it	ne
   d608a:	2001      	movne	r0, #1
   d608c:	bd08      	pop	{r3, pc}

000d608e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d608e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6090:	4606      	mov	r6, r0
   d6092:	460f      	mov	r7, r1
   d6094:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d6096:	b1c4      	cbz	r4, d60ca <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d6098:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d609c:	6803      	ldr	r3, [r0, #0]
   d609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60a0:	4798      	blx	r3
   d60a2:	b908      	cbnz	r0, d60a8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d60a4:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d60a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d60a8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d60ac:	2cfa      	cmp	r4, #250	; 0xfa
   d60ae:	6803      	ldr	r3, [r0, #0]
   d60b0:	4625      	mov	r5, r4
   d60b2:	bfa8      	it	ge
   d60b4:	25fa      	movge	r5, #250	; 0xfa
   d60b6:	68db      	ldr	r3, [r3, #12]
   d60b8:	462a      	mov	r2, r5
   d60ba:	4639      	mov	r1, r7
   d60bc:	4798      	blx	r3
   d60be:	b283      	uxth	r3, r0
      len -= ret;
   d60c0:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d60c2:	429d      	cmp	r5, r3
      len -= ret;
   d60c4:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d60c6:	d0e6      	beq.n	d6096 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d60c8:	e7ec      	b.n	d60a4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d60ca:	2001      	movs	r0, #1
   d60cc:	e7eb      	b.n	d60a6 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d60ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d60ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d60d2:	4606      	mov	r6, r0
   d60d4:	4688      	mov	r8, r1
   d60d6:	4691      	mov	r9, r2
   d60d8:	461f      	mov	r7, r3
   d60da:	461d      	mov	r5, r3
  uint16_t len = 0;
   d60dc:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d60de:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d60e2:	6803      	ldr	r3, [r0, #0]
   d60e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60e6:	4798      	blx	r3
   d60e8:	b1d0      	cbz	r0, d6120 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d60ea:	2d00      	cmp	r5, #0
   d60ec:	db18      	blt.n	d6120 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d60ee:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d60f2:	6803      	ldr	r3, [r0, #0]
   d60f4:	691b      	ldr	r3, [r3, #16]
   d60f6:	4798      	blx	r3
   d60f8:	b160      	cbz	r0, d6114 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d60fa:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d60fe:	6803      	ldr	r3, [r0, #0]
   d6100:	695b      	ldr	r3, [r3, #20]
   d6102:	4798      	blx	r3
   d6104:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d6108:	3401      	adds	r4, #1
   d610a:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d610c:	454c      	cmp	r4, r9
   d610e:	d007      	beq.n	d6120 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d6110:	463d      	mov	r5, r7
   d6112:	e7ec      	b.n	d60ee <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d6114:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d6116:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d6118:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d611a:	f000 fe9f 	bl	d6e5c <delay>
  while (client->connected() && (timeout >= 0)) {
   d611e:	e7de      	b.n	d60de <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d6120:	4620      	mov	r0, r4
   d6122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6126 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d6126:	b570      	push	{r4, r5, r6, lr}
   d6128:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d612a:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d612e:	2296      	movs	r2, #150	; 0x96
   d6130:	2100      	movs	r1, #0
   d6132:	4628      	mov	r0, r5
   d6134:	f002 fcb4 	bl	d8aa0 <memset>
  strcpy((char *)buffer, servername);
   d6138:	6861      	ldr	r1, [r4, #4]
   d613a:	4628      	mov	r0, r5
   d613c:	f002 fd1a 	bl	d8b74 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d6140:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d6144:	8922      	ldrh	r2, [r4, #8]
   d6146:	6803      	ldr	r3, [r0, #0]
   d6148:	4629      	mov	r1, r5
   d614a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d614c:	2300      	movs	r3, #0
   d614e:	47b0      	blx	r6
}
   d6150:	3800      	subs	r0, #0
   d6152:	bf18      	it	ne
   d6154:	2001      	movne	r0, #1
   d6156:	bd70      	pop	{r4, r5, r6, pc}

000d6158 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d6158:	b510      	push	{r4, lr}
   d615a:	4604      	mov	r4, r0
  if (client->connected()) {
   d615c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d6160:	6803      	ldr	r3, [r0, #0]
   d6162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6164:	4798      	blx	r3
   d6166:	b120      	cbz	r0, d6172 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d6168:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d616c:	6803      	ldr	r3, [r0, #0]
   d616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6170:	4798      	blx	r3
}
   d6172:	2001      	movs	r0, #1
   d6174:	bd10      	pop	{r4, pc}
	...

000d6178 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d6178:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d617a:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d617c:	4a0a      	ldr	r2, [pc, #40]	; (d61a8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d617e:	4d0b      	ldr	r5, [pc, #44]	; (d61ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d6180:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d6184:	9b03      	ldr	r3, [sp, #12]
   d6186:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d6188:	2300      	movs	r3, #0
  servername = server;
   d618a:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d618e:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d6192:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d6196:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d619a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d619e:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d61a0:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d61a4:	bd30      	pop	{r4, r5, pc}
   d61a6:	bf00      	nop
   d61a8:	000da84e 	.word	0x000da84e
   d61ac:	000dafb0 	.word	0x000dafb0

000d61b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d61b0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d61b2:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d61b6:	7203      	strb	r3, [r0, #8]
}
   d61b8:	bd10      	pop	{r4, pc}
	...

000d61bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <netdb_freeaddrinfo+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	689b      	ldr	r3, [r3, #8]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030268 	.word	0x00030268

000d61cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <netdb_getaddrinfo+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	68db      	ldr	r3, [r3, #12]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030268 	.word	0x00030268

000d61dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <HAL_Pin_Map+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	681b      	ldr	r3, [r3, #0]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	0003022c 	.word	0x0003022c

000d61ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_Pin_Mode+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	689b      	ldr	r3, [r3, #8]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	0003022c 	.word	0x0003022c

000d61fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_Get_Pin_Mode+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	68db      	ldr	r3, [r3, #12]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	0003022c 	.word	0x0003022c

000d620c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <HAL_GPIO_Write+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	691b      	ldr	r3, [r3, #16]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	0003022c 	.word	0x0003022c

000d621c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <HAL_GPIO_Read+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	695b      	ldr	r3, [r3, #20]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	0003022c 	.word	0x0003022c

000d622c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <HAL_Interrupts_Attach+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	699b      	ldr	r3, [r3, #24]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	0003022c 	.word	0x0003022c

000d623c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <HAL_Interrupts_Detach+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	69db      	ldr	r3, [r3, #28]
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	0003022c 	.word	0x0003022c

000d624c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <if_index_to_name+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	695b      	ldr	r3, [r3, #20]
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	0003026c 	.word	0x0003026c

000d625c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <HAL_RNG_GetRandomNumber+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	685b      	ldr	r3, [r3, #4]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030218 	.word	0x00030218

000d626c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <HAL_Delay_Microseconds+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	68db      	ldr	r3, [r3, #12]
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030218 	.word	0x00030218

000d627c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	691b      	ldr	r3, [r3, #16]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030218 	.word	0x00030218

000d628c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	695b      	ldr	r3, [r3, #20]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030218 	.word	0x00030218

000d629c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <os_mutex_recursive_create+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	00030248 	.word	0x00030248

000d62ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <os_mutex_recursive_destroy+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	00030248 	.word	0x00030248

000d62bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <inet_inet_ntop+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	695b      	ldr	r3, [r3, #20]
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	00030264 	.word	0x00030264

000d62cc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <inet_htonl+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	6a1b      	ldr	r3, [r3, #32]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	00030264 	.word	0x00030264

000d62dc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <inet_htons+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	00030264 	.word	0x00030264

000d62ec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <hal_usart_init+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	681b      	ldr	r3, [r3, #0]
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	0003023c 	.word	0x0003023c

000d62fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <hal_usart_write+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	68db      	ldr	r3, [r3, #12]
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	0003023c 	.word	0x0003023c

000d630c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <hal_usart_available+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	691b      	ldr	r3, [r3, #16]
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	0003023c 	.word	0x0003023c

000d631c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <hal_usart_read+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	695b      	ldr	r3, [r3, #20]
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	0003023c 	.word	0x0003023c

000d632c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <hal_usart_peek+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	699b      	ldr	r3, [r3, #24]
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	0003023c 	.word	0x0003023c

000d633c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <hal_usart_flush+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	69db      	ldr	r3, [r3, #28]
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	0003023c 	.word	0x0003023c

000d634c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <hal_usart_is_enabled+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	6a1b      	ldr	r3, [r3, #32]
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	0003023c 	.word	0x0003023c

000d635c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <hal_usart_available_data_for_write+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	0003023c 	.word	0x0003023c

000d636c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <hal_usart_begin_config+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	0003023c 	.word	0x0003023c

000d637c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <hal_i2c_begin+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	68db      	ldr	r3, [r3, #12]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	00030228 	.word	0x00030228

000d638c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <hal_i2c_begin_transmission+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	699b      	ldr	r3, [r3, #24]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	00030228 	.word	0x00030228

000d639c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <hal_i2c_end_transmission+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	69db      	ldr	r3, [r3, #28]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	00030228 	.word	0x00030228

000d63ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <hal_i2c_write+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	6a1b      	ldr	r3, [r3, #32]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030228 	.word	0x00030228

000d63bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <hal_i2c_available+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030228 	.word	0x00030228

000d63cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <hal_i2c_read+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030228 	.word	0x00030228

000d63dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <hal_i2c_peek+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030228 	.word	0x00030228

000d63ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <hal_i2c_flush+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030228 	.word	0x00030228

000d63fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <hal_i2c_is_enabled+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030228 	.word	0x00030228

000d640c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <hal_i2c_init+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	00030228 	.word	0x00030228

000d641c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <hal_i2c_request_ex+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	00030228 	.word	0x00030228

000d642c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <sock_setsockopt+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	699b      	ldr	r3, [r3, #24]
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	00030238 	.word	0x00030238

000d643c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <sock_close+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	69db      	ldr	r3, [r3, #28]
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	00030238 	.word	0x00030238

000d644c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <sock_connect+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	6a1b      	ldr	r3, [r3, #32]
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	00030238 	.word	0x00030238

000d645c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <sock_recv+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	00030238 	.word	0x00030238

000d646c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <sock_send+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	00030238 	.word	0x00030238

000d647c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d647c:	b508      	push	{r3, lr}
   d647e:	4b02      	ldr	r3, [pc, #8]	; (d6488 <sock_socket+0xc>)
   d6480:	681b      	ldr	r3, [r3, #0]
   d6482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	00030238 	.word	0x00030238

000d648c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <hal_spi_begin+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	681b      	ldr	r3, [r3, #0]
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	00030230 	.word	0x00030230

000d649c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <hal_spi_set_bit_order+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	689b      	ldr	r3, [r3, #8]
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	00030230 	.word	0x00030230

000d64ac <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <hal_spi_set_data_mode+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	68db      	ldr	r3, [r3, #12]
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030230 	.word	0x00030230

000d64bc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <hal_spi_set_clock_divider+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	691b      	ldr	r3, [r3, #16]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030230 	.word	0x00030230

000d64cc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <hal_spi_transfer+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	695b      	ldr	r3, [r3, #20]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030230 	.word	0x00030230

000d64dc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <hal_spi_init+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	69db      	ldr	r3, [r3, #28]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030230 	.word	0x00030230

000d64ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <hal_spi_is_enabled+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	6a1b      	ldr	r3, [r3, #32]
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030230 	.word	0x00030230

000d64fc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <hal_spi_info+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030230 	.word	0x00030230

000d650c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <hal_spi_set_settings+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030230 	.word	0x00030230

000d651c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <hal_spi_acquire+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030230 	.word	0x00030230

000d652c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <hal_spi_release+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030230 	.word	0x00030230

000d653c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <HAL_USB_USART_Init+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	681b      	ldr	r3, [r3, #0]
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	0003024c 	.word	0x0003024c

000d654c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <HAL_USB_USART_Begin+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	685b      	ldr	r3, [r3, #4]
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	0003024c 	.word	0x0003024c

000d655c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_USB_USART_Available_Data+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	691b      	ldr	r3, [r3, #16]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	0003024c 	.word	0x0003024c

000d656c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	695b      	ldr	r3, [r3, #20]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	0003024c 	.word	0x0003024c

000d657c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <HAL_USB_USART_Receive_Data+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	699b      	ldr	r3, [r3, #24]
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	0003024c 	.word	0x0003024c

000d658c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <HAL_USB_USART_Send_Data+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	69db      	ldr	r3, [r3, #28]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	0003024c 	.word	0x0003024c

000d659c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <HAL_USB_USART_Flush_Data+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	6a1b      	ldr	r3, [r3, #32]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	0003024c 	.word	0x0003024c

000d65ac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <panic_+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030260 	.word	0x00030260

000d65bc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <log_message+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	00030260 	.word	0x00030260

000d65cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <set_system_mode+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	685b      	ldr	r3, [r3, #4]
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	00030220 	.word	0x00030220

000d65dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <system_delay_ms+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	695b      	ldr	r3, [r3, #20]
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	00030220 	.word	0x00030220

000d65ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b03      	ldr	r3, [pc, #12]	; (d65fc <system_ctrl_set_app_request_handler+0x10>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d65f6:	9301      	str	r3, [sp, #4]
   d65f8:	bd08      	pop	{r3, pc}
   d65fa:	0000      	.short	0x0000
   d65fc:	00030220 	.word	0x00030220

000d6600 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b03      	ldr	r3, [pc, #12]	; (d6610 <system_ctrl_set_result+0x10>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d660a:	9301      	str	r3, [sp, #4]
   d660c:	bd08      	pop	{r3, pc}
   d660e:	0000      	.short	0x0000
   d6610:	00030220 	.word	0x00030220

000d6614 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <network_connect+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	685b      	ldr	r3, [r3, #4]
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030240 	.word	0x00030240

000d6624 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <network_connecting+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	689b      	ldr	r3, [r3, #8]
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030240 	.word	0x00030240

000d6634 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <network_disconnect+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	68db      	ldr	r3, [r3, #12]
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030240 	.word	0x00030240

000d6644 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <network_ready+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	691b      	ldr	r3, [r3, #16]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030240 	.word	0x00030240

000d6654 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <network_on+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	695b      	ldr	r3, [r3, #20]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030240 	.word	0x00030240

000d6664 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <network_off+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	699b      	ldr	r3, [r3, #24]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030240 	.word	0x00030240

000d6674 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <network_listen+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	69db      	ldr	r3, [r3, #28]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030240 	.word	0x00030240

000d6684 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <network_listening+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	6a1b      	ldr	r3, [r3, #32]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030240 	.word	0x00030240

000d6694 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <network_set_listen_timeout+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030240 	.word	0x00030240

000d66a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <network_get_listen_timeout+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030240 	.word	0x00030240

000d66b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <network_is_on+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030240 	.word	0x00030240

000d66c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <network_is_off+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	00030240 	.word	0x00030240

000d66d4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <spark_cloud_flag_connected+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	695b      	ldr	r3, [r3, #20]
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	00030244 	.word	0x00030244

000d66e4 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <spark_sync_time+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	00030244 	.word	0x00030244

000d66f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <spark_set_random_seed_from_cloud_handler+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	00030244 	.word	0x00030244

000d6704 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <malloc+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	681b      	ldr	r3, [r3, #0]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	0003021c 	.word	0x0003021c

000d6714 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <free+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	685b      	ldr	r3, [r3, #4]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	0003021c 	.word	0x0003021c

000d6724 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <realloc+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	689b      	ldr	r3, [r3, #8]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	0003021c 	.word	0x0003021c

000d6734 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <vsnprintf+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	0003021c 	.word	0x0003021c

000d6744 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <abort+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	0003021c 	.word	0x0003021c

000d6754 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <_malloc_r+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	0003021c 	.word	0x0003021c

000d6764 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <__errno+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	0003021c 	.word	0x0003021c

000d6774 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <newlib_impure_ptr_callback+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	0003021c 	.word	0x0003021c

000d6784 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6784:	2200      	movs	r2, #0
   d6786:	6840      	ldr	r0, [r0, #4]
   d6788:	4611      	mov	r1, r2
   d678a:	f7ff bf7b 	b.w	d6684 <network_listening>

000d678e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d678e:	2200      	movs	r2, #0
   d6790:	6840      	ldr	r0, [r0, #4]
   d6792:	4611      	mov	r1, r2
   d6794:	f7ff bf86 	b.w	d66a4 <network_get_listen_timeout>

000d6798 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6798:	6840      	ldr	r0, [r0, #4]
   d679a:	2200      	movs	r2, #0
   d679c:	f7ff bf7a 	b.w	d6694 <network_set_listen_timeout>

000d67a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d67a0:	6840      	ldr	r0, [r0, #4]
   d67a2:	2200      	movs	r2, #0
   d67a4:	f081 0101 	eor.w	r1, r1, #1
   d67a8:	f7ff bf64 	b.w	d6674 <network_listen>

000d67ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d67ac:	2300      	movs	r3, #0
   d67ae:	6840      	ldr	r0, [r0, #4]
   d67b0:	461a      	mov	r2, r3
   d67b2:	4619      	mov	r1, r3
   d67b4:	f7ff bf56 	b.w	d6664 <network_off>

000d67b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d67b8:	2300      	movs	r3, #0
   d67ba:	6840      	ldr	r0, [r0, #4]
   d67bc:	461a      	mov	r2, r3
   d67be:	4619      	mov	r1, r3
   d67c0:	f7ff bf48 	b.w	d6654 <network_on>

000d67c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d67c4:	2200      	movs	r2, #0
   d67c6:	6840      	ldr	r0, [r0, #4]
   d67c8:	4611      	mov	r1, r2
   d67ca:	f7ff bf3b 	b.w	d6644 <network_ready>

000d67ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d67ce:	2200      	movs	r2, #0
   d67d0:	6840      	ldr	r0, [r0, #4]
   d67d2:	4611      	mov	r1, r2
   d67d4:	f7ff bf26 	b.w	d6624 <network_connecting>

000d67d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67d8:	6840      	ldr	r0, [r0, #4]
   d67da:	2200      	movs	r2, #0
   d67dc:	2102      	movs	r1, #2
   d67de:	f7ff bf29 	b.w	d6634 <network_disconnect>

000d67e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d67e2:	2300      	movs	r3, #0
   d67e4:	6840      	ldr	r0, [r0, #4]
   d67e6:	461a      	mov	r2, r3
   d67e8:	f7ff bf14 	b.w	d6614 <network_connect>

000d67ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d67ec:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d67ee:	2203      	movs	r2, #3
   d67f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d67f2:	4a02      	ldr	r2, [pc, #8]	; (d67fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d67f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d67f6:	4770      	bx	lr
   d67f8:	2003e5b8 	.word	0x2003e5b8
   d67fc:	000dafd4 	.word	0x000dafd4

000d6800 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6800:	2100      	movs	r1, #0
   d6802:	f7ff be8b 	b.w	d651c <hal_spi_acquire>

000d6806 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6806:	2100      	movs	r1, #0
   d6808:	f7ff be90 	b.w	d652c <hal_spi_release>

000d680c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d680c:	b510      	push	{r4, lr}
   d680e:	4604      	mov	r4, r0
   d6810:	4608      	mov	r0, r1
{
    _spi = spi;
   d6812:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6814:	f7ff fe62 	bl	d64dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6818:	2300      	movs	r3, #0
   d681a:	6063      	str	r3, [r4, #4]
}
   d681c:	4620      	mov	r0, r4
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6820:	b510      	push	{r4, lr}
   d6822:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6824:	7800      	ldrb	r0, [r0, #0]
   d6826:	f7ff ffeb 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d682a:	b948      	cbnz	r0, d6840 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d682c:	7820      	ldrb	r0, [r4, #0]
   d682e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6832:	f7ff fe2b 	bl	d648c <hal_spi_begin>
        unlock();
   d6836:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d683c:	f7ff bfe3 	b.w	d6806 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6840:	bd10      	pop	{r4, pc}

000d6842 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6842:	b513      	push	{r0, r1, r4, lr}
   d6844:	4604      	mov	r4, r0
    if (!lock())
   d6846:	7800      	ldrb	r0, [r0, #0]
{
   d6848:	9101      	str	r1, [sp, #4]
    if (!lock())
   d684a:	f7ff ffd9 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d684e:	9901      	ldr	r1, [sp, #4]
   d6850:	b940      	cbnz	r0, d6864 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d6852:	7820      	ldrb	r0, [r4, #0]
   d6854:	f7ff fe22 	bl	d649c <hal_spi_set_bit_order>
        unlock();
   d6858:	7820      	ldrb	r0, [r4, #0]
    }
}
   d685a:	b002      	add	sp, #8
   d685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6860:	f7ff bfd1 	b.w	d6806 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6864:	b002      	add	sp, #8
   d6866:	bd10      	pop	{r4, pc}

000d6868 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d6868:	b513      	push	{r0, r1, r4, lr}
   d686a:	4604      	mov	r4, r0
    if (!lock())
   d686c:	7800      	ldrb	r0, [r0, #0]
{
   d686e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6870:	f7ff ffc6 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d6874:	9901      	ldr	r1, [sp, #4]
   d6876:	b940      	cbnz	r0, d688a <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d6878:	7820      	ldrb	r0, [r4, #0]
   d687a:	f7ff fe17 	bl	d64ac <hal_spi_set_data_mode>
        unlock();
   d687e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6880:	b002      	add	sp, #8
   d6882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6886:	f7ff bfbe 	b.w	d6806 <_ZN8SPIClass6unlockEv.isra.0>
}
   d688a:	b002      	add	sp, #8
   d688c:	bd10      	pop	{r4, pc}

000d688e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d688e:	7800      	ldrb	r0, [r0, #0]
   d6890:	f7ff bfb9 	b.w	d6806 <_ZN8SPIClass6unlockEv.isra.0>

000d6894 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6894:	0840      	lsrs	r0, r0, #1
{
   d6896:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6898:	6018      	str	r0, [r3, #0]
   d689a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d689c:	6818      	ldr	r0, [r3, #0]
   d689e:	4288      	cmp	r0, r1
   d68a0:	b2e5      	uxtb	r5, r4
   d68a2:	d906      	bls.n	d68b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d68a4:	3401      	adds	r4, #1
   d68a6:	2c08      	cmp	r4, #8
   d68a8:	d002      	beq.n	d68b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d68aa:	0840      	lsrs	r0, r0, #1
   d68ac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d68ae:	e7f5      	b.n	d689c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d68b0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d68b4:	5d5b      	ldrb	r3, [r3, r5]
   d68b6:	7013      	strb	r3, [r2, #0]
}
   d68b8:	bd30      	pop	{r4, r5, pc}
   d68ba:	bf00      	nop
   d68bc:	000db008 	.word	0x000db008

000d68c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d68c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68c4:	4606      	mov	r6, r0
   d68c6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d68c8:	7800      	ldrb	r0, [r0, #0]
{
   d68ca:	460c      	mov	r4, r1
    CHECK(lock());
   d68cc:	f7ff ff98 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d68d0:	2800      	cmp	r0, #0
   d68d2:	db1b      	blt.n	d690c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d68d4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d68d6:	2214      	movs	r2, #20
   d68d8:	2100      	movs	r1, #0
   d68da:	a809      	add	r0, sp, #36	; 0x24
   d68dc:	f002 f8e0 	bl	d8aa0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d68e0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d68e2:	2200      	movs	r2, #0
   d68e4:	a909      	add	r1, sp, #36	; 0x24
   d68e6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d68e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d68ec:	f7ff fe06 	bl	d64fc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d68f0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d68f4:	b113      	cbz	r3, d68fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d68f6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d68fa:	b155      	cbz	r5, d6912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d68fc:	2700      	movs	r7, #0
   d68fe:	46b9      	mov	r9, r7
   d6900:	46b8      	mov	r8, r7
   d6902:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6904:	7923      	ldrb	r3, [r4, #4]
   d6906:	b15d      	cbz	r5, d6920 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6908:	b1c3      	cbz	r3, d693c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d690a:	2000      	movs	r0, #0
}
   d690c:	b00f      	add	sp, #60	; 0x3c
   d690e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6912:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6916:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d691a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d691e:	e7f1      	b.n	d6904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6920:	2b00      	cmp	r3, #0
   d6922:	d135      	bne.n	d6990 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6924:	68a3      	ldr	r3, [r4, #8]
   d6926:	4543      	cmp	r3, r8
   d6928:	d108      	bne.n	d693c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d692a:	f88d 9020 	strb.w	r9, [sp, #32]
   d692e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6932:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6936:	89a3      	ldrh	r3, [r4, #12]
   d6938:	429a      	cmp	r2, r3
   d693a:	d0e6      	beq.n	d690a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d693c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d693e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d6940:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6944:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6946:	ab04      	add	r3, sp, #16
   d6948:	f10d 020f 	add.w	r2, sp, #15
   d694c:	f7ff ffa2 	bl	d6894 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6950:	7921      	ldrb	r1, [r4, #4]
   d6952:	b985      	cbnz	r5, d6976 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6954:	b989      	cbnz	r1, d697a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6956:	68a3      	ldr	r3, [r4, #8]
   d6958:	4543      	cmp	r3, r8
   d695a:	d30e      	bcc.n	d697a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d695c:	f88d 9020 	strb.w	r9, [sp, #32]
   d6960:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6964:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6968:	89a3      	ldrh	r3, [r4, #12]
   d696a:	429a      	cmp	r2, r3
   d696c:	d105      	bne.n	d697a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d696e:	9b04      	ldr	r3, [sp, #16]
   d6970:	4543      	cmp	r3, r8
   d6972:	d102      	bne.n	d697a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6974:	e7c9      	b.n	d690a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6976:	2900      	cmp	r1, #0
   d6978:	d1f9      	bne.n	d696e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d697a:	2300      	movs	r3, #0
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	7b63      	ldrb	r3, [r4, #13]
   d6980:	9300      	str	r3, [sp, #0]
   d6982:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6986:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6988:	7830      	ldrb	r0, [r6, #0]
   d698a:	f7ff fdbf 	bl	d650c <hal_spi_set_settings>
   d698e:	e7bc      	b.n	d690a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6990:	e9cd 5500 	strd	r5, r5, [sp]
   d6994:	462b      	mov	r3, r5
   d6996:	462a      	mov	r2, r5
   d6998:	2101      	movs	r1, #1
   d699a:	e7f5      	b.n	d6988 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d699c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69a0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d69a2:	2300      	movs	r3, #0
{
   d69a4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d69a6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d69a8:	9302      	str	r3, [sp, #8]
{
   d69aa:	460e      	mov	r6, r1
   d69ac:	4617      	mov	r7, r2
    if (!lock())
   d69ae:	f7ff ff27 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d69b2:	4605      	mov	r5, r0
   d69b4:	bb00      	cbnz	r0, d69f8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d69b6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d69ba:	4601      	mov	r1, r0
   d69bc:	2214      	movs	r2, #20
   d69be:	a803      	add	r0, sp, #12
   d69c0:	f002 f86e 	bl	d8aa0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d69c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d69c6:	462a      	mov	r2, r5
   d69c8:	a903      	add	r1, sp, #12
   d69ca:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d69cc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d69d0:	f7ff fd94 	bl	d64fc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d69d4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d69d6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d69da:	ab02      	add	r3, sp, #8
   d69dc:	f10d 0207 	add.w	r2, sp, #7
   d69e0:	fb07 f106 	mul.w	r1, r7, r6
   d69e4:	f7ff ff56 	bl	d6894 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d69e8:	7820      	ldrb	r0, [r4, #0]
   d69ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d69ee:	f7ff fd65 	bl	d64bc <hal_spi_set_clock_divider>
        unlock();
   d69f2:	7820      	ldrb	r0, [r4, #0]
   d69f4:	f7ff ff07 	bl	d6806 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d69f8:	9802      	ldr	r0, [sp, #8]
   d69fa:	b008      	add	sp, #32
   d69fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a00 <_ZN8SPIClass15setClockDividerEh>:
{
   d6a00:	b538      	push	{r3, r4, r5, lr}
   d6a02:	4604      	mov	r4, r0
    if (!lock())
   d6a04:	7800      	ldrb	r0, [r0, #0]
{
   d6a06:	460d      	mov	r5, r1
    if (!lock())
   d6a08:	f7ff fefa 	bl	d6800 <_ZN8SPIClass4lockEv.isra.0>
   d6a0c:	4603      	mov	r3, r0
   d6a0e:	b9d0      	cbnz	r0, d6a46 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d6a10:	6861      	ldr	r1, [r4, #4]
   d6a12:	b199      	cbz	r1, d6a3c <_ZN8SPIClass15setClockDividerEh+0x3c>
   d6a14:	4a0c      	ldr	r2, [pc, #48]	; (d6a48 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d6a16:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6a1a:	4285      	cmp	r5, r0
   d6a1c:	d002      	beq.n	d6a24 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d6a1e:	3301      	adds	r3, #1
   d6a20:	2b08      	cmp	r3, #8
   d6a22:	d1f8      	bne.n	d6a16 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d6a24:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d6a26:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d6a28:	2201      	movs	r2, #1
   d6a2a:	40d9      	lsrs	r1, r3
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	f7ff ffb5 	bl	d699c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d6a32:	7820      	ldrb	r0, [r4, #0]
}
   d6a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d6a38:	f7ff bee5 	b.w	d6806 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d6a3c:	7820      	ldrb	r0, [r4, #0]
   d6a3e:	4629      	mov	r1, r5
   d6a40:	f7ff fd3c 	bl	d64bc <hal_spi_set_clock_divider>
   d6a44:	e7f5      	b.n	d6a32 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d6a46:	bd38      	pop	{r3, r4, r5, pc}
   d6a48:	000db008 	.word	0x000db008

000d6a4c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d6a4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6a4e:	7800      	ldrb	r0, [r0, #0]
   d6a50:	f7ff fd3c 	bl	d64cc <hal_spi_transfer>
}
   d6a54:	b2c0      	uxtb	r0, r0
   d6a56:	bd08      	pop	{r3, pc}

000d6a58 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a58:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6a5a:	4b09      	ldr	r3, [pc, #36]	; (d6a80 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6a5c:	4c09      	ldr	r4, [pc, #36]	; (d6a84 <_GLOBAL__sub_I_System+0x2c>)
   d6a5e:	2202      	movs	r2, #2
   d6a60:	2000      	movs	r0, #0
   d6a62:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6a64:	4b08      	ldr	r3, [pc, #32]	; (d6a88 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6a66:	6020      	str	r0, [r4, #0]
   d6a68:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6a6a:	71a0      	strb	r0, [r4, #6]
   d6a6c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6a6e:	f7ff fdad 	bl	d65cc <set_system_mode>
SystemClass System;
   d6a72:	4620      	mov	r0, r4
   d6a74:	4a05      	ldr	r2, [pc, #20]	; (d6a8c <_GLOBAL__sub_I_System+0x34>)
   d6a76:	4906      	ldr	r1, [pc, #24]	; (d6a90 <_GLOBAL__sub_I_System+0x38>)
   d6a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6a7c:	f001 b9aa 	b.w	d7dd4 <__aeabi_atexit>
   d6a80:	2003e5cc 	.word	0x2003e5cc
   d6a84:	2003e5c0 	.word	0x2003e5c0
   d6a88:	ffff0000 	.word	0xffff0000
   d6a8c:	2003e3b8 	.word	0x2003e3b8
   d6a90:	000d4279 	.word	0x000d4279

000d6a94 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6a94:	b570      	push	{r4, r5, r6, lr}
   d6a96:	b086      	sub	sp, #24
   d6a98:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6a9a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6a9c:	4668      	mov	r0, sp
   d6a9e:	f000 fb05 	bl	d70ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aa4:	1d34      	adds	r4, r6, #4
   d6aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6aa8:	682b      	ldr	r3, [r5, #0]
   d6aaa:	7023      	strb	r3, [r4, #0]
    }
   d6aac:	4630      	mov	r0, r6
   d6aae:	b006      	add	sp, #24
   d6ab0:	bd70      	pop	{r4, r5, r6, pc}

000d6ab2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6ab2:	b510      	push	{r4, lr}
   d6ab4:	4604      	mov	r4, r0
{
	free(buffer);
   d6ab6:	6800      	ldr	r0, [r0, #0]
   d6ab8:	f7ff fe2c 	bl	d6714 <free>
}
   d6abc:	4620      	mov	r0, r4
   d6abe:	bd10      	pop	{r4, pc}

000d6ac0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6ac0:	b510      	push	{r4, lr}
   d6ac2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6ac4:	6800      	ldr	r0, [r0, #0]
   d6ac6:	b108      	cbz	r0, d6acc <_ZN6String10invalidateEv+0xc>
   d6ac8:	f7ff fe24 	bl	d6714 <free>
	buffer = NULL;
   d6acc:	2300      	movs	r3, #0
	capacity = len = 0;
   d6ace:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6ad2:	6023      	str	r3, [r4, #0]
}
   d6ad4:	bd10      	pop	{r4, pc}

000d6ad6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6ad6:	b538      	push	{r3, r4, r5, lr}
   d6ad8:	4604      	mov	r4, r0
   d6ada:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6adc:	6800      	ldr	r0, [r0, #0]
   d6ade:	3101      	adds	r1, #1
   d6ae0:	f7ff fe20 	bl	d6724 <realloc>
	if (newbuffer) {
   d6ae4:	b110      	cbz	r0, d6aec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6ae6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6aea:	2001      	movs	r0, #1
	}
	return 0;
}
   d6aec:	bd38      	pop	{r3, r4, r5, pc}

000d6aee <_ZN6String7reserveEj>:
{
   d6aee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6af0:	6803      	ldr	r3, [r0, #0]
{
   d6af2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6af4:	b123      	cbz	r3, d6b00 <_ZN6String7reserveEj+0x12>
   d6af6:	6843      	ldr	r3, [r0, #4]
   d6af8:	428b      	cmp	r3, r1
   d6afa:	d301      	bcc.n	d6b00 <_ZN6String7reserveEj+0x12>
   d6afc:	2001      	movs	r0, #1
}
   d6afe:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6b00:	4620      	mov	r0, r4
   d6b02:	f7ff ffe8 	bl	d6ad6 <_ZN6String12changeBufferEj>
   d6b06:	2800      	cmp	r0, #0
   d6b08:	d0f9      	beq.n	d6afe <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6b0a:	68a3      	ldr	r3, [r4, #8]
   d6b0c:	2b00      	cmp	r3, #0
   d6b0e:	d1f5      	bne.n	d6afc <_ZN6String7reserveEj+0xe>
   d6b10:	6822      	ldr	r2, [r4, #0]
   d6b12:	7013      	strb	r3, [r2, #0]
   d6b14:	e7f2      	b.n	d6afc <_ZN6String7reserveEj+0xe>

000d6b16 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b18:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6b1a:	4611      	mov	r1, r2
   d6b1c:	9201      	str	r2, [sp, #4]
{
   d6b1e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6b20:	f7ff ffe5 	bl	d6aee <_ZN6String7reserveEj>
   d6b24:	9a01      	ldr	r2, [sp, #4]
   d6b26:	b928      	cbnz	r0, d6b34 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6b28:	4620      	mov	r0, r4
   d6b2a:	f7ff ffc9 	bl	d6ac0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6b2e:	4620      	mov	r0, r4
   d6b30:	b003      	add	sp, #12
   d6b32:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6b34:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6b36:	4629      	mov	r1, r5
   d6b38:	6820      	ldr	r0, [r4, #0]
   d6b3a:	f001 ffa3 	bl	d8a84 <memcpy>
	buffer[len] = 0;
   d6b3e:	6822      	ldr	r2, [r4, #0]
   d6b40:	68a3      	ldr	r3, [r4, #8]
   d6b42:	2100      	movs	r1, #0
   d6b44:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6b46:	e7f2      	b.n	d6b2e <_ZN6String4copyEPKcj+0x18>

000d6b48 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6b48:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6b4a:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6b4c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6b50:	4604      	mov	r4, r0
	len = 0;
   d6b52:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b54:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6b56:	b141      	cbz	r1, d6b6a <_ZN6StringC1EPKc+0x22>
   d6b58:	4608      	mov	r0, r1
   d6b5a:	9101      	str	r1, [sp, #4]
   d6b5c:	f002 f812 	bl	d8b84 <strlen>
   d6b60:	9901      	ldr	r1, [sp, #4]
   d6b62:	4602      	mov	r2, r0
   d6b64:	4620      	mov	r0, r4
   d6b66:	f7ff ffd6 	bl	d6b16 <_ZN6String4copyEPKcj>
}
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	b002      	add	sp, #8
   d6b6e:	bd10      	pop	{r4, pc}

000d6b70 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6b70:	4288      	cmp	r0, r1
{
   d6b72:	b510      	push	{r4, lr}
   d6b74:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6b76:	d005      	beq.n	d6b84 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6b78:	680b      	ldr	r3, [r1, #0]
   d6b7a:	b12b      	cbz	r3, d6b88 <_ZN6StringaSERKS_+0x18>
   d6b7c:	688a      	ldr	r2, [r1, #8]
   d6b7e:	4619      	mov	r1, r3
   d6b80:	f7ff ffc9 	bl	d6b16 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6b84:	4620      	mov	r0, r4
   d6b86:	bd10      	pop	{r4, pc}
	else invalidate();
   d6b88:	f7ff ff9a 	bl	d6ac0 <_ZN6String10invalidateEv>
   d6b8c:	e7fa      	b.n	d6b84 <_ZN6StringaSERKS_+0x14>

000d6b8e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6b8e:	b510      	push	{r4, lr}
	buffer = NULL;
   d6b90:	2300      	movs	r3, #0
String::String(const String &value)
   d6b92:	4604      	mov	r4, r0
	capacity = 0;
   d6b94:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6b98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b9a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6b9c:	f7ff ffe8 	bl	d6b70 <_ZN6StringaSERKS_>
}
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	bd10      	pop	{r4, pc}

000d6ba4 <_ZN6String4trimEv>:
        }
        return *this;
}

String& String::trim(void)
{
   d6ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
   d6ba8:	6806      	ldr	r6, [r0, #0]
{
   d6baa:	4605      	mov	r5, r0
	if (!buffer || len == 0) return *this;
   d6bac:	b306      	cbz	r6, d6bf0 <_ZN6String4trimEv+0x4c>
   d6bae:	6884      	ldr	r4, [r0, #8]
   d6bb0:	b1f4      	cbz	r4, d6bf0 <_ZN6String4trimEv+0x4c>
   d6bb2:	46b0      	mov	r8, r6
   d6bb4:	4647      	mov	r7, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
   d6bb6:	f818 0b01 	ldrb.w	r0, [r8], #1
   d6bba:	f001 ff5b 	bl	d8a74 <isspace>
   d6bbe:	2800      	cmp	r0, #0
   d6bc0:	d1f8      	bne.n	d6bb4 <_ZN6String4trimEv+0x10>
	char *end = buffer + len - 1;
   d6bc2:	3c01      	subs	r4, #1
   d6bc4:	4434      	add	r4, r6
	while (isspace(*end) && end >= begin) end--;
   d6bc6:	7820      	ldrb	r0, [r4, #0]
   d6bc8:	f001 ff54 	bl	d8a74 <isspace>
   d6bcc:	b118      	cbz	r0, d6bd6 <_ZN6String4trimEv+0x32>
   d6bce:	42a7      	cmp	r7, r4
   d6bd0:	d801      	bhi.n	d6bd6 <_ZN6String4trimEv+0x32>
   d6bd2:	3c01      	subs	r4, #1
   d6bd4:	e7f7      	b.n	d6bc6 <_ZN6String4trimEv+0x22>
	len = end + 1 - begin;
   d6bd6:	1c62      	adds	r2, r4, #1
   d6bd8:	1bd2      	subs	r2, r2, r7
	if (begin > buffer) memcpy(buffer, begin, len);
   d6bda:	42be      	cmp	r6, r7
	len = end + 1 - begin;
   d6bdc:	60aa      	str	r2, [r5, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
   d6bde:	d203      	bcs.n	d6be8 <_ZN6String4trimEv+0x44>
   d6be0:	4639      	mov	r1, r7
   d6be2:	4630      	mov	r0, r6
   d6be4:	f001 ff4e 	bl	d8a84 <memcpy>
	buffer[len] = 0;
   d6be8:	682a      	ldr	r2, [r5, #0]
   d6bea:	68ab      	ldr	r3, [r5, #8]
   d6bec:	2100      	movs	r1, #0
   d6bee:	54d1      	strb	r1, [r2, r3]
        return *this;
}
   d6bf0:	4628      	mov	r0, r5
   d6bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6bf8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6bf8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d6bfa:	6800      	ldr	r0, [r0, #0]
   d6bfc:	b140      	cbz	r0, d6c10 <_ZNK6String7toFloatEv+0x18>
   d6bfe:	f001 ff27 	bl	d8a50 <atof>
   d6c02:	ec51 0b10 	vmov	r0, r1, d0
   d6c06:	f001 fe81 	bl	d890c <__aeabi_d2f>
   d6c0a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d6c0e:	bd08      	pop	{r3, pc}
	return 0;
   d6c10:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6c18 <_ZNK6String7toFloatEv+0x20>
   d6c14:	e7fb      	b.n	d6c0e <_ZNK6String7toFloatEv+0x16>
   d6c16:	bf00      	nop
   d6c18:	00000000 	.word	0x00000000

000d6c1c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6c1c:	b510      	push	{r4, lr}
   d6c1e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6c20:	6800      	ldr	r0, [r0, #0]
   d6c22:	b108      	cbz	r0, d6c28 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6c24:	f7ff fb42 	bl	d62ac <os_mutex_recursive_destroy>
    }
   d6c28:	4620      	mov	r0, r4
   d6c2a:	bd10      	pop	{r4, pc}

000d6c2c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6c2c:	b510      	push	{r4, lr}
      if (_M_manager)
   d6c2e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6c30:	4604      	mov	r4, r0
      if (_M_manager)
   d6c32:	b113      	cbz	r3, d6c3a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6c34:	2203      	movs	r2, #3
   d6c36:	4601      	mov	r1, r0
   d6c38:	4798      	blx	r3
    }
   d6c3a:	4620      	mov	r0, r4
   d6c3c:	bd10      	pop	{r4, pc}
	...

000d6c40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6c40:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6c42:	4c06      	ldr	r4, [pc, #24]	; (d6c5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6c44:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6c46:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6c48:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6c4a:	f7ff fb27 	bl	d629c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6c4e:	4620      	mov	r0, r4
   d6c50:	4a03      	ldr	r2, [pc, #12]	; (d6c60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6c52:	4904      	ldr	r1, [pc, #16]	; (d6c64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6c58:	f001 b8bc 	b.w	d7dd4 <__aeabi_atexit>
   d6c5c:	2003e5d0 	.word	0x2003e5d0
   d6c60:	2003e3b8 	.word	0x2003e3b8
   d6c64:	000d6c1d 	.word	0x000d6c1d

000d6c68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c6a:	4606      	mov	r6, r0
   d6c6c:	460d      	mov	r5, r1
  size_t n = 0;
   d6c6e:	188f      	adds	r7, r1, r2
   d6c70:	2400      	movs	r4, #0
  while (size--) {
   d6c72:	42bd      	cmp	r5, r7
   d6c74:	d00c      	beq.n	d6c90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6c76:	6833      	ldr	r3, [r6, #0]
   d6c78:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6c7c:	689b      	ldr	r3, [r3, #8]
   d6c7e:	4630      	mov	r0, r6
   d6c80:	4798      	blx	r3
     if (chunk>=0)
   d6c82:	1e03      	subs	r3, r0, #0
   d6c84:	db01      	blt.n	d6c8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6c86:	441c      	add	r4, r3
  while (size--) {
   d6c88:	e7f3      	b.n	d6c72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6c8a:	2c00      	cmp	r4, #0
   d6c8c:	bf08      	it	eq
   d6c8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6c90:	4620      	mov	r0, r4
   d6c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6c94:	b513      	push	{r0, r1, r4, lr}
   d6c96:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6c98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6c9a:	b159      	cbz	r1, d6cb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6c9c:	9101      	str	r1, [sp, #4]
   d6c9e:	f001 ff71 	bl	d8b84 <strlen>
   d6ca2:	6823      	ldr	r3, [r4, #0]
   d6ca4:	9901      	ldr	r1, [sp, #4]
   d6ca6:	68db      	ldr	r3, [r3, #12]
   d6ca8:	4602      	mov	r2, r0
   d6caa:	4620      	mov	r0, r4
    }
   d6cac:	b002      	add	sp, #8
   d6cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6cb2:	4718      	bx	r3
    }
   d6cb4:	b002      	add	sp, #8
   d6cb6:	bd10      	pop	{r4, pc}

000d6cb8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6cb8:	b508      	push	{r3, lr}
  return write(str);
   d6cba:	f7ff ffeb 	bl	d6c94 <_ZN5Print5writeEPKc>
}
   d6cbe:	bd08      	pop	{r3, pc}

000d6cc0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6cc0:	6803      	ldr	r3, [r0, #0]
   d6cc2:	689b      	ldr	r3, [r3, #8]
   d6cc4:	4718      	bx	r3

000d6cc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6cc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6cc8:	210d      	movs	r1, #13
{
   d6cca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ccc:	f7ff fff8 	bl	d6cc0 <_ZN5Print5printEc>
  n += print('\n');
   d6cd0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6cd2:	4604      	mov	r4, r0
  n += print('\n');
   d6cd4:	4628      	mov	r0, r5
   d6cd6:	f7ff fff3 	bl	d6cc0 <_ZN5Print5printEc>
  return n;
}
   d6cda:	4420      	add	r0, r4
   d6cdc:	bd38      	pop	{r3, r4, r5, pc}

000d6cde <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6cde:	b538      	push	{r3, r4, r5, lr}
   d6ce0:	4605      	mov	r5, r0
  return write(str);
   d6ce2:	f7ff ffd7 	bl	d6c94 <_ZN5Print5writeEPKc>
   d6ce6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6ce8:	4628      	mov	r0, r5
   d6cea:	f7ff ffec 	bl	d6cc6 <_ZN5Print7printlnEv>
  return n;
}
   d6cee:	4420      	add	r0, r4
   d6cf0:	bd38      	pop	{r3, r4, r5, pc}

000d6cf2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6cf2:	b530      	push	{r4, r5, lr}
   d6cf4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6cf6:	2300      	movs	r3, #0
   d6cf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6cfc:	2a01      	cmp	r2, #1
   d6cfe:	bf98      	it	ls
   d6d00:	220a      	movls	r2, #10
   d6d02:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6d04:	460d      	mov	r5, r1
   d6d06:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6d0a:	fb01 5312 	mls	r3, r1, r2, r5
   d6d0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d12:	2b09      	cmp	r3, #9
   d6d14:	bf94      	ite	ls
   d6d16:	3330      	addls	r3, #48	; 0x30
   d6d18:	3337      	addhi	r3, #55	; 0x37
   d6d1a:	b2db      	uxtb	r3, r3
  } while(n);
   d6d1c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d1e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6d22:	d9ef      	bls.n	d6d04 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6d24:	4621      	mov	r1, r4
   d6d26:	f7ff ffb5 	bl	d6c94 <_ZN5Print5writeEPKc>
}
   d6d2a:	b00b      	add	sp, #44	; 0x2c
   d6d2c:	bd30      	pop	{r4, r5, pc}

000d6d2e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d32:	b086      	sub	sp, #24
   d6d34:	af00      	add	r7, sp, #0
   d6d36:	4605      	mov	r5, r0
   d6d38:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6d3a:	1d38      	adds	r0, r7, #4
   d6d3c:	2114      	movs	r1, #20
{
   d6d3e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6d40:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6d42:	f7ff fcf7 	bl	d6734 <vsnprintf>

    if (n<bufsize)
   d6d46:	2813      	cmp	r0, #19
   d6d48:	d80e      	bhi.n	d6d68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6d4a:	1d39      	adds	r1, r7, #4
   d6d4c:	4628      	mov	r0, r5
   d6d4e:	f7ff ffa1 	bl	d6c94 <_ZN5Print5writeEPKc>
   d6d52:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6d54:	b11e      	cbz	r6, d6d5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6d56:	4628      	mov	r0, r5
   d6d58:	f7ff ffb5 	bl	d6cc6 <_ZN5Print7printlnEv>
   d6d5c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6d5e:	4620      	mov	r0, r4
   d6d60:	3718      	adds	r7, #24
   d6d62:	46bd      	mov	sp, r7
   d6d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6d68:	f100 0308 	add.w	r3, r0, #8
   d6d6c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6d70:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6d72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6d76:	4622      	mov	r2, r4
   d6d78:	1c41      	adds	r1, r0, #1
   d6d7a:	683b      	ldr	r3, [r7, #0]
   d6d7c:	4668      	mov	r0, sp
   d6d7e:	f7ff fcd9 	bl	d6734 <vsnprintf>
  return write(str);
   d6d82:	4669      	mov	r1, sp
   d6d84:	4628      	mov	r0, r5
   d6d86:	f7ff ff85 	bl	d6c94 <_ZN5Print5writeEPKc>
   d6d8a:	4604      	mov	r4, r0
   d6d8c:	46c5      	mov	sp, r8
   d6d8e:	e7e1      	b.n	d6d54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6d90 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6d90:	b510      	push	{r4, lr}
   d6d92:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6d94:	f7ff fa7a 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6d98:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6d9a:	6823      	ldr	r3, [r4, #0]
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	695b      	ldr	r3, [r3, #20]
   d6da0:	4798      	blx	r3
    if (c >= 0) return c;
   d6da2:	2800      	cmp	r0, #0
   d6da4:	da08      	bge.n	d6db8 <_ZN6Stream9timedReadEv+0x28>
   d6da6:	f7ff fa71 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6daa:	68e3      	ldr	r3, [r4, #12]
   d6dac:	1ac0      	subs	r0, r0, r3
   d6dae:	68a3      	ldr	r3, [r4, #8]
   d6db0:	4298      	cmp	r0, r3
   d6db2:	d3f2      	bcc.n	d6d9a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6db4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6db8:	bd10      	pop	{r4, pc}

000d6dba <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   d6dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dbe:	4607      	mov	r7, r0
   d6dc0:	4688      	mov	r8, r1
   d6dc2:	4616      	mov	r6, r2
  if (length < 1) return 0;
   d6dc4:	461d      	mov	r5, r3
   d6dc6:	b173      	cbz	r3, d6de6 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   d6dc8:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   d6dca:	4638      	mov	r0, r7
   d6dcc:	f7ff ffe0 	bl	d6d90 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   d6dd0:	1e03      	subs	r3, r0, #0
   d6dd2:	db05      	blt.n	d6de0 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   d6dd4:	4543      	cmp	r3, r8
   d6dd6:	d003      	beq.n	d6de0 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   d6dd8:	5533      	strb	r3, [r6, r4]
    index++;
   d6dda:	3401      	adds	r4, #1
  while (index < length) {
   d6ddc:	42a5      	cmp	r5, r4
   d6dde:	d1f4      	bne.n	d6dca <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   d6de0:	4620      	mov	r0, r4
   d6de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   d6de6:	461c      	mov	r4, r3
   d6de8:	e7fa      	b.n	d6de0 <_ZN6Stream14readBytesUntilEcPcj+0x26>

000d6dea <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6dea:	2300      	movs	r3, #0
   d6dec:	6840      	ldr	r0, [r0, #4]
   d6dee:	461a      	mov	r2, r3
   d6df0:	4619      	mov	r1, r3
   d6df2:	f7ff bc2f 	b.w	d6654 <network_on>
	...

000d6df8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6df8:	4b01      	ldr	r3, [pc, #4]	; (d6e00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6dfa:	4a02      	ldr	r2, [pc, #8]	; (d6e04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6dfc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6dfe:	4770      	bx	lr
   d6e00:	2003e5d4 	.word	0x2003e5d4
   d6e04:	000db018 	.word	0x000db018

000d6e08 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6e08:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6e0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d6e14:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6e16:	d411      	bmi.n	d6e3c <_ZN9TimeClass4zoneEf+0x34>
   d6e18:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d6e1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e24:	dc0a      	bgt.n	d6e3c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6e26:	eddf 7a06 	vldr	s15, [pc, #24]	; d6e40 <_ZN9TimeClass4zoneEf+0x38>
   d6e2a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d6e2e:	ee17 0a90 	vmov	r0, s15
   d6e32:	f001 fdbb 	bl	d89ac <__aeabi_f2lz>
   d6e36:	4b03      	ldr	r3, [pc, #12]	; (d6e44 <_ZN9TimeClass4zoneEf+0x3c>)
   d6e38:	e9c3 0100 	strd	r0, r1, [r3]
}
   d6e3c:	bd08      	pop	{r3, pc}
   d6e3e:	bf00      	nop
   d6e40:	45610000 	.word	0x45610000
   d6e44:	2003e5e0 	.word	0x2003e5e0

000d6e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6e48:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6e4a:	681a      	ldr	r2, [r3, #0]
   d6e4c:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6e4e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6e50:	4770      	bx	lr
   d6e52:	bf00      	nop
   d6e54:	2003e1dc 	.word	0x2003e1dc
   d6e58:	2003e5d8 	.word	0x2003e5d8

000d6e5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6e5c:	2100      	movs	r1, #0
   d6e5e:	f7ff bbbd 	b.w	d65dc <system_delay_ms>

000d6e62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e62:	b510      	push	{r4, lr}
   d6e64:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d6e66:	f7ff fee1 	bl	d6c2c <_ZNSt14_Function_baseD1Ev>
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	bd10      	pop	{r4, pc}
	...

000d6e70 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6e70:	4803      	ldr	r0, [pc, #12]	; (d6e80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e72:	4a04      	ldr	r2, [pc, #16]	; (d6e84 <_GLOBAL__sub_I_RGB+0x14>)
   d6e74:	4904      	ldr	r1, [pc, #16]	; (d6e88 <_GLOBAL__sub_I_RGB+0x18>)
   d6e76:	2300      	movs	r3, #0
   d6e78:	6083      	str	r3, [r0, #8]
   d6e7a:	f000 bfab 	b.w	d7dd4 <__aeabi_atexit>
   d6e7e:	bf00      	nop
   d6e80:	2003e5e8 	.word	0x2003e5e8
   d6e84:	2003e3b8 	.word	0x2003e3b8
   d6e88:	000d6e63 	.word	0x000d6e63

000d6e8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6e8c:	4b01      	ldr	r3, [pc, #4]	; (d6e94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6e8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6e90:	4770      	bx	lr
   d6e92:	bf00      	nop
   d6e94:	2003e1e0 	.word	0x2003e1e0

000d6e98 <serialEventRun>:
{
   d6e98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6e9a:	4b0b      	ldr	r3, [pc, #44]	; (d6ec8 <serialEventRun+0x30>)
   d6e9c:	b143      	cbz	r3, d6eb0 <serialEventRun+0x18>
   d6e9e:	f000 f971 	bl	d7184 <_Z16_fetch_usbserialv>
   d6ea2:	6803      	ldr	r3, [r0, #0]
   d6ea4:	691b      	ldr	r3, [r3, #16]
   d6ea6:	4798      	blx	r3
   d6ea8:	2800      	cmp	r0, #0
   d6eaa:	dd01      	ble.n	d6eb0 <serialEventRun+0x18>
        serialEvent();
   d6eac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6eb0:	4b06      	ldr	r3, [pc, #24]	; (d6ecc <serialEventRun+0x34>)
   d6eb2:	b143      	cbz	r3, d6ec6 <serialEventRun+0x2e>
   d6eb4:	f000 fa52 	bl	d735c <_Z22__fetch_global_Serial1v>
   d6eb8:	6803      	ldr	r3, [r0, #0]
   d6eba:	691b      	ldr	r3, [r3, #16]
   d6ebc:	4798      	blx	r3
   d6ebe:	2800      	cmp	r0, #0
   d6ec0:	dd01      	ble.n	d6ec6 <serialEventRun+0x2e>
        serialEvent1();
   d6ec2:	f3af 8000 	nop.w
}
   d6ec6:	bd08      	pop	{r3, pc}
	...

000d6ed0 <_post_loop>:
{
   d6ed0:	b508      	push	{r3, lr}
	serialEventRun();
   d6ed2:	f7ff ffe1 	bl	d6e98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ed6:	f7ff f9d9 	bl	d628c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6eda:	4b01      	ldr	r3, [pc, #4]	; (d6ee0 <_post_loop+0x10>)
   d6edc:	6018      	str	r0, [r3, #0]
}
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	2003e7d8 	.word	0x2003e7d8

000d6ee4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6ee4:	4802      	ldr	r0, [pc, #8]	; (d6ef0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6ee6:	4a03      	ldr	r2, [pc, #12]	; (d6ef4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6ee8:	4903      	ldr	r1, [pc, #12]	; (d6ef8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6eea:	1a12      	subs	r2, r2, r0
   d6eec:	f001 bdca 	b.w	d8a84 <memcpy>
   d6ef0:	2003f400 	.word	0x2003f400
   d6ef4:	2003f404 	.word	0x2003f404
   d6ef8:	000db560 	.word	0x000db560

000d6efc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6efc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6efe:	2300      	movs	r3, #0
   d6f00:	9300      	str	r3, [sp, #0]
   d6f02:	461a      	mov	r2, r3
   d6f04:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f08:	f7ff fb7a 	bl	d6600 <system_ctrl_set_result>
}
   d6f0c:	b003      	add	sp, #12
   d6f0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f14 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6f14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6f16:	8843      	ldrh	r3, [r0, #2]
   d6f18:	2b0a      	cmp	r3, #10
   d6f1a:	d008      	beq.n	d6f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6f1c:	2b50      	cmp	r3, #80	; 0x50
   d6f1e:	d10b      	bne.n	d6f38 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6f20:	4b09      	ldr	r3, [pc, #36]	; (d6f48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6f22:	681b      	ldr	r3, [r3, #0]
   d6f24:	b14b      	cbz	r3, d6f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6f26:	b003      	add	sp, #12
   d6f28:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6f2c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6f2e:	f7ff ffe5 	bl	d6efc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6f32:	b003      	add	sp, #12
   d6f34:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f38:	2300      	movs	r3, #0
   d6f3a:	9300      	str	r3, [sp, #0]
   d6f3c:	461a      	mov	r2, r3
   d6f3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f42:	f7ff fb5d 	bl	d6600 <system_ctrl_set_result>
}
   d6f46:	e7f4      	b.n	d6f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6f48:	2003e5fc 	.word	0x2003e5fc

000d6f4c <module_user_init_hook>:
{
   d6f4c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f4e:	4c12      	ldr	r4, [pc, #72]	; (d6f98 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6f50:	4812      	ldr	r0, [pc, #72]	; (d6f9c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f52:	4d13      	ldr	r5, [pc, #76]	; (d6fa0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6f54:	2100      	movs	r1, #0
   d6f56:	f7ff fc0d 	bl	d6774 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f5a:	6823      	ldr	r3, [r4, #0]
   d6f5c:	42ab      	cmp	r3, r5
   d6f5e:	4b11      	ldr	r3, [pc, #68]	; (d6fa4 <module_user_init_hook+0x58>)
   d6f60:	bf0c      	ite	eq
   d6f62:	2201      	moveq	r2, #1
   d6f64:	2200      	movne	r2, #0
   d6f66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6f68:	d002      	beq.n	d6f70 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6f6a:	f7ff ffbb 	bl	d6ee4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6f6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6f70:	f7ff f974 	bl	d625c <HAL_RNG_GetRandomNumber>
   d6f74:	4604      	mov	r4, r0
    srand(seed);
   d6f76:	f001 fd9b 	bl	d8ab0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6f7a:	4b0b      	ldr	r3, [pc, #44]	; (d6fa8 <module_user_init_hook+0x5c>)
   d6f7c:	b113      	cbz	r3, d6f84 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6f7e:	4620      	mov	r0, r4
   d6f80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6f84:	2100      	movs	r1, #0
   d6f86:	4808      	ldr	r0, [pc, #32]	; (d6fa8 <module_user_init_hook+0x5c>)
   d6f88:	f7ff fbb4 	bl	d66f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f90:	4806      	ldr	r0, [pc, #24]	; (d6fac <module_user_init_hook+0x60>)
   d6f92:	2100      	movs	r1, #0
   d6f94:	f7ff bb2a 	b.w	d65ec <system_ctrl_set_app_request_handler>
   d6f98:	2003f400 	.word	0x2003f400
   d6f9c:	000d6e8d 	.word	0x000d6e8d
   d6fa0:	9a271c1e 	.word	0x9a271c1e
   d6fa4:	2003e5f8 	.word	0x2003e5f8
   d6fa8:	00000000 	.word	0x00000000
   d6fac:	000d6f15 	.word	0x000d6f15

000d6fb0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6fb0:	4770      	bx	lr

000d6fb2 <_ZN9IPAddressD0Ev>:
   d6fb2:	b510      	push	{r4, lr}
   d6fb4:	2118      	movs	r1, #24
   d6fb6:	4604      	mov	r4, r0
   d6fb8:	f000 ff11 	bl	d7dde <_ZdlPvj>
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	bd10      	pop	{r4, pc}

000d6fc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6fc2:	7d03      	ldrb	r3, [r0, #20]
   d6fc4:	2b06      	cmp	r3, #6
{
   d6fc6:	b08d      	sub	sp, #52	; 0x34
   d6fc8:	460e      	mov	r6, r1
   d6fca:	f100 0704 	add.w	r7, r0, #4
   d6fce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6fd2:	d012      	beq.n	d6ffa <_ZNK9IPAddress7printToER5Print+0x3a>
   d6fd4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6fd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6fdc:	220a      	movs	r2, #10
   d6fde:	4630      	mov	r0, r6
   d6fe0:	f7ff fe87 	bl	d6cf2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6fe4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6fe6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6fe8:	d019      	beq.n	d701e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6fea:	2c00      	cmp	r4, #0
   d6fec:	d0f4      	beq.n	d6fd8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6fee:	212e      	movs	r1, #46	; 0x2e
   d6ff0:	4630      	mov	r0, r6
   d6ff2:	f7ff fe65 	bl	d6cc0 <_ZN5Print5printEc>
   d6ff6:	4404      	add	r4, r0
   d6ff8:	e7ee      	b.n	d6fd8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ffa:	232f      	movs	r3, #47	; 0x2f
   d6ffc:	466a      	mov	r2, sp
   d6ffe:	4639      	mov	r1, r7
   d7000:	200a      	movs	r0, #10
		buf[0] = 0;
   d7002:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7006:	f7ff f959 	bl	d62bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d700a:	4668      	mov	r0, sp
   d700c:	f001 fdba 	bl	d8b84 <strlen>
   d7010:	6833      	ldr	r3, [r6, #0]
   d7012:	4602      	mov	r2, r0
   d7014:	68db      	ldr	r3, [r3, #12]
   d7016:	4669      	mov	r1, sp
   d7018:	4630      	mov	r0, r6
   d701a:	4798      	blx	r3
   d701c:	4604      	mov	r4, r0
    }
    return n;
}
   d701e:	4620      	mov	r0, r4
   d7020:	b00d      	add	sp, #52	; 0x34
   d7022:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7024 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7024:	b510      	push	{r4, lr}
   d7026:	4b05      	ldr	r3, [pc, #20]	; (d703c <_ZN9IPAddressC1Ev+0x18>)
   d7028:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d702a:	2211      	movs	r2, #17
   d702c:	f840 3b04 	str.w	r3, [r0], #4
   d7030:	2100      	movs	r1, #0
   d7032:	f001 fd35 	bl	d8aa0 <memset>
}
   d7036:	4620      	mov	r0, r4
   d7038:	bd10      	pop	{r4, pc}
   d703a:	bf00      	nop
   d703c:	000db040 	.word	0x000db040

000d7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7040:	4603      	mov	r3, r0
   d7042:	4a07      	ldr	r2, [pc, #28]	; (d7060 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7044:	b510      	push	{r4, lr}
   d7046:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d704a:	f101 0210 	add.w	r2, r1, #16
   d704e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7052:	f843 4b04 	str.w	r4, [r3], #4
   d7056:	4291      	cmp	r1, r2
   d7058:	d1f9      	bne.n	d704e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d705a:	780a      	ldrb	r2, [r1, #0]
   d705c:	701a      	strb	r2, [r3, #0]
}
   d705e:	bd10      	pop	{r4, pc}
   d7060:	000db040 	.word	0x000db040

000d7064 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7064:	7d03      	ldrb	r3, [r0, #20]
   d7066:	2b04      	cmp	r3, #4
   d7068:	d104      	bne.n	d7074 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d706a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d706c:	3800      	subs	r0, #0
   d706e:	bf18      	it	ne
   d7070:	2001      	movne	r0, #1
   d7072:	4770      	bx	lr
    } else if (version() == 6) {
   d7074:	2b06      	cmp	r3, #6
   d7076:	d107      	bne.n	d7088 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7078:	6843      	ldr	r3, [r0, #4]
   d707a:	b93b      	cbnz	r3, d708c <_ZNK9IPAddresscvbEv+0x28>
   d707c:	6883      	ldr	r3, [r0, #8]
   d707e:	b92b      	cbnz	r3, d708c <_ZNK9IPAddresscvbEv+0x28>
   d7080:	68c3      	ldr	r3, [r0, #12]
   d7082:	b91b      	cbnz	r3, d708c <_ZNK9IPAddresscvbEv+0x28>
   d7084:	6900      	ldr	r0, [r0, #16]
   d7086:	e7f1      	b.n	d706c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7088:	2000      	movs	r0, #0
   d708a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d708c:	2001      	movs	r0, #1
}
   d708e:	4770      	bx	lr

000d7090 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7090:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7092:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7096:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d709a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d709e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d70a2:	2304      	movs	r3, #4
   d70a4:	6041      	str	r1, [r0, #4]
   d70a6:	7503      	strb	r3, [r0, #20]
}
   d70a8:	bd10      	pop	{r4, pc}
	...

000d70ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d70ac:	b513      	push	{r0, r1, r4, lr}
   d70ae:	4b05      	ldr	r3, [pc, #20]	; (d70c4 <_ZN9IPAddressC1EPKh+0x18>)
   d70b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d70b2:	78cb      	ldrb	r3, [r1, #3]
   d70b4:	9300      	str	r3, [sp, #0]
   d70b6:	788b      	ldrb	r3, [r1, #2]
   d70b8:	784a      	ldrb	r2, [r1, #1]
   d70ba:	7809      	ldrb	r1, [r1, #0]
   d70bc:	f7ff ffe8 	bl	d7090 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d70c0:	b002      	add	sp, #8
   d70c2:	bd10      	pop	{r4, pc}
   d70c4:	000db040 	.word	0x000db040

000d70c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d70c8:	7441      	strb	r1, [r0, #17]
}
   d70ca:	4770      	bx	lr

000d70cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d70cc:	4770      	bx	lr

000d70ce <_ZN9USBSerial4readEv>:
{
   d70ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d70d0:	2100      	movs	r1, #0
   d70d2:	7c00      	ldrb	r0, [r0, #16]
   d70d4:	f7ff fa52 	bl	d657c <HAL_USB_USART_Receive_Data>
}
   d70d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70dc:	bd08      	pop	{r3, pc}

000d70de <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d70de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d70e0:	2101      	movs	r1, #1
   d70e2:	7c00      	ldrb	r0, [r0, #16]
   d70e4:	f7ff fa4a 	bl	d657c <HAL_USB_USART_Receive_Data>
}
   d70e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70ec:	bd08      	pop	{r3, pc}

000d70ee <_ZN9USBSerial17availableForWriteEv>:
{
   d70ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d70f0:	7c00      	ldrb	r0, [r0, #16]
   d70f2:	f7ff fa3b 	bl	d656c <HAL_USB_USART_Available_Data_For_Write>
}
   d70f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70fa:	bd08      	pop	{r3, pc}

000d70fc <_ZN9USBSerial9availableEv>:
{
   d70fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d70fe:	7c00      	ldrb	r0, [r0, #16]
   d7100:	f7ff fa2c 	bl	d655c <HAL_USB_USART_Available_Data>
}
   d7104:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7108:	bd08      	pop	{r3, pc}

000d710a <_ZN9USBSerial5writeEh>:
{
   d710a:	b513      	push	{r0, r1, r4, lr}
   d710c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d710e:	7c00      	ldrb	r0, [r0, #16]
{
   d7110:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7112:	f7ff fa2b 	bl	d656c <HAL_USB_USART_Available_Data_For_Write>
   d7116:	2800      	cmp	r0, #0
   d7118:	9901      	ldr	r1, [sp, #4]
   d711a:	dc01      	bgt.n	d7120 <_ZN9USBSerial5writeEh+0x16>
   d711c:	7c60      	ldrb	r0, [r4, #17]
   d711e:	b120      	cbz	r0, d712a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7120:	7c20      	ldrb	r0, [r4, #16]
   d7122:	f7ff fa33 	bl	d658c <HAL_USB_USART_Send_Data>
   d7126:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d712a:	b002      	add	sp, #8
   d712c:	bd10      	pop	{r4, pc}

000d712e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d712e:	7c00      	ldrb	r0, [r0, #16]
   d7130:	f7ff ba34 	b.w	d659c <HAL_USB_USART_Flush_Data>

000d7134 <_ZN9USBSerialD0Ev>:
   d7134:	b510      	push	{r4, lr}
   d7136:	2114      	movs	r1, #20
   d7138:	4604      	mov	r4, r0
   d713a:	f000 fe50 	bl	d7dde <_ZdlPvj>
   d713e:	4620      	mov	r0, r4
   d7140:	bd10      	pop	{r4, pc}
	...

000d7144 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7144:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d714a:	4604      	mov	r4, r0
   d714c:	4608      	mov	r0, r1
   d714e:	2100      	movs	r1, #0
   d7150:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7154:	4b04      	ldr	r3, [pc, #16]	; (d7168 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7156:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7158:	2301      	movs	r3, #1
  _serial = serial;
   d715a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d715c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d715e:	4611      	mov	r1, r2
   d7160:	f7ff f9ec 	bl	d653c <HAL_USB_USART_Init>
}
   d7164:	4620      	mov	r0, r4
   d7166:	bd10      	pop	{r4, pc}
   d7168:	000db054 	.word	0x000db054

000d716c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d716c:	7c00      	ldrb	r0, [r0, #16]
   d716e:	2200      	movs	r2, #0
   d7170:	f7ff b9ec 	b.w	d654c <HAL_USB_USART_Begin>

000d7174 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7174:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7176:	2214      	movs	r2, #20
{
   d7178:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d717a:	2100      	movs	r1, #0
   d717c:	f001 fc90 	bl	d8aa0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7180:	4620      	mov	r0, r4
   d7182:	bd10      	pop	{r4, pc}

000d7184 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7184:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7186:	4c10      	ldr	r4, [pc, #64]	; (d71c8 <_Z16_fetch_usbserialv+0x44>)
{
   d7188:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d718a:	a803      	add	r0, sp, #12
   d718c:	f7ff fff2 	bl	d7174 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7190:	7821      	ldrb	r1, [r4, #0]
   d7192:	f3bf 8f5b 	dmb	ish
   d7196:	f011 0101 	ands.w	r1, r1, #1
   d719a:	d111      	bne.n	d71c0 <_Z16_fetch_usbserialv+0x3c>
   d719c:	4620      	mov	r0, r4
   d719e:	9101      	str	r1, [sp, #4]
   d71a0:	f7fc ff8a 	bl	d40b8 <__cxa_guard_acquire>
   d71a4:	9901      	ldr	r1, [sp, #4]
   d71a6:	b158      	cbz	r0, d71c0 <_Z16_fetch_usbserialv+0x3c>
   d71a8:	aa03      	add	r2, sp, #12
   d71aa:	4808      	ldr	r0, [pc, #32]	; (d71cc <_Z16_fetch_usbserialv+0x48>)
   d71ac:	f7ff ffca 	bl	d7144 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d71b0:	4620      	mov	r0, r4
   d71b2:	f7fc ff86 	bl	d40c2 <__cxa_guard_release>
   d71b6:	4a06      	ldr	r2, [pc, #24]	; (d71d0 <_Z16_fetch_usbserialv+0x4c>)
   d71b8:	4906      	ldr	r1, [pc, #24]	; (d71d4 <_Z16_fetch_usbserialv+0x50>)
   d71ba:	4804      	ldr	r0, [pc, #16]	; (d71cc <_Z16_fetch_usbserialv+0x48>)
   d71bc:	f000 fe0a 	bl	d7dd4 <__aeabi_atexit>
	return _usbserial;
}
   d71c0:	4802      	ldr	r0, [pc, #8]	; (d71cc <_Z16_fetch_usbserialv+0x48>)
   d71c2:	b008      	add	sp, #32
   d71c4:	bd10      	pop	{r4, pc}
   d71c6:	bf00      	nop
   d71c8:	2003e600 	.word	0x2003e600
   d71cc:	2003e604 	.word	0x2003e604
   d71d0:	2003e3b8 	.word	0x2003e3b8
   d71d4:	000d70cd 	.word	0x000d70cd

000d71d8 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d71d8:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   d71da:	b510      	push	{r4, lr}
   d71dc:	b90a      	cbnz	r2, d71e2 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   d71de:	f000 fe02 	bl	d7de6 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   d71e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71e6:	68c3      	ldr	r3, [r0, #12]
   d71e8:	4718      	bx	r3

000d71ea <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d71ea:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d71ec:	2300      	movs	r3, #0
   d71ee:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d71f0:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d71f2:	4604      	mov	r4, r0
   d71f4:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d71f6:	b12b      	cbz	r3, d7204 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d71f8:	2202      	movs	r2, #2
   d71fa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d71fc:	68eb      	ldr	r3, [r5, #12]
   d71fe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7200:	68ab      	ldr	r3, [r5, #8]
   d7202:	60a3      	str	r3, [r4, #8]
    }
   d7204:	4620      	mov	r0, r4
   d7206:	bd38      	pop	{r3, r4, r5, pc}

000d7208 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   d7208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   d720a:	4d0c      	ldr	r5, [pc, #48]	; (d723c <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
   d720c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
{
   d7210:	4606      	mov	r6, r0
   d7212:	460f      	mov	r7, r1
    delete handlers[pin];
   d7214:	b134      	cbz	r4, d7224 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   d7216:	4620      	mov	r0, r4
   d7218:	f7ff fd08 	bl	d6c2c <_ZNSt14_Function_baseD1Ev>
   d721c:	2110      	movs	r1, #16
   d721e:	4620      	mov	r0, r4
   d7220:	f000 fddd 	bl	d7dde <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   d7224:	2010      	movs	r0, #16
   d7226:	f7fc ff36 	bl	d4096 <_Znwj>
   d722a:	4604      	mov	r4, r0
   d722c:	b110      	cbz	r0, d7234 <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
   d722e:	4639      	mov	r1, r7
   d7230:	f7ff ffdb 	bl	d71ea <_ZNSt8functionIFvvEEC1ERKS1_>
   d7234:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
}
   d7238:	4620      	mov	r0, r4
   d723a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d723c:	2003e618 	.word	0x2003e618

000d7240 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7240:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7242:	b087      	sub	sp, #28
   d7244:	4605      	mov	r5, r0
   d7246:	9103      	str	r1, [sp, #12]
   d7248:	4617      	mov	r7, r2
   d724a:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   d724c:	f7fe fff6 	bl	d623c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   d7250:	9903      	ldr	r1, [sp, #12]
   d7252:	4628      	mov	r0, r5
   d7254:	f7ff ffd8 	bl	d7208 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   d7258:	4604      	mov	r4, r0
   d725a:	b1e8      	cbz	r0, d7298 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
   d725c:	2100      	movs	r1, #0
  if (priority >= 0) {
   d725e:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7260:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {0};
   d7264:	f8ad 1015 	strh.w	r1, [sp, #21]
   d7268:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d726c:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   d7270:	bfa2      	ittt	ge
   d7272:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   d7274:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   d7278:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d727c:	9100      	str	r1, [sp, #0]
   d727e:	4602      	mov	r2, r0
   d7280:	4907      	ldr	r1, [pc, #28]	; (d72a0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7282:	bfa8      	it	ge
   d7284:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7288:	463b      	mov	r3, r7
   d728a:	4628      	mov	r0, r5
   d728c:	f7fe ffce 	bl	d622c <HAL_Interrupts_Attach>
   d7290:	b110      	cbz	r0, d7298 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   d7292:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   d7294:	b007      	add	sp, #28
   d7296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   d7298:	1e20      	subs	r0, r4, #0
   d729a:	bf18      	it	ne
   d729c:	2001      	movne	r0, #1
   d729e:	e7f9      	b.n	d7294 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   d72a0:	000d71d9 	.word	0x000d71d9

000d72a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d72a4:	4770      	bx	lr

000d72a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72a6:	7441      	strb	r1, [r0, #17]
}
   d72a8:	4770      	bx	lr

000d72aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d72aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d72ac:	7c00      	ldrb	r0, [r0, #16]
   d72ae:	f7ff f855 	bl	d635c <hal_usart_available_data_for_write>
}
   d72b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72b6:	bd08      	pop	{r3, pc}

000d72b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d72b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d72ba:	7c00      	ldrb	r0, [r0, #16]
   d72bc:	f7ff f826 	bl	d630c <hal_usart_available>
}
   d72c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72c4:	bd08      	pop	{r3, pc}

000d72c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d72c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d72c8:	7c00      	ldrb	r0, [r0, #16]
   d72ca:	f7ff f82f 	bl	d632c <hal_usart_peek>
}
   d72ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72d2:	bd08      	pop	{r3, pc}

000d72d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d72d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d72d6:	7c00      	ldrb	r0, [r0, #16]
   d72d8:	f7ff f820 	bl	d631c <hal_usart_read>
}
   d72dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72e0:	bd08      	pop	{r3, pc}

000d72e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d72e2:	7c00      	ldrb	r0, [r0, #16]
   d72e4:	f7ff b82a 	b.w	d633c <hal_usart_flush>

000d72e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d72e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72ea:	7c45      	ldrb	r5, [r0, #17]
{
   d72ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72ee:	b12d      	cbz	r5, d72fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d72f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d72f2:	b003      	add	sp, #12
   d72f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d72f8:	f7ff b800 	b.w	d62fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72fc:	7c00      	ldrb	r0, [r0, #16]
   d72fe:	9101      	str	r1, [sp, #4]
   d7300:	f7ff f82c 	bl	d635c <hal_usart_available_data_for_write>
   d7304:	2800      	cmp	r0, #0
   d7306:	9901      	ldr	r1, [sp, #4]
   d7308:	dcf2      	bgt.n	d72f0 <_ZN11USARTSerial5writeEh+0x8>
}
   d730a:	4628      	mov	r0, r5
   d730c:	b003      	add	sp, #12
   d730e:	bd30      	pop	{r4, r5, pc}

000d7310 <_ZN11USARTSerialD0Ev>:
   d7310:	b510      	push	{r4, lr}
   d7312:	2114      	movs	r1, #20
   d7314:	4604      	mov	r4, r0
   d7316:	f000 fd62 	bl	d7dde <_ZdlPvj>
   d731a:	4620      	mov	r0, r4
   d731c:	bd10      	pop	{r4, pc}
	...

000d7320 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7320:	b510      	push	{r4, lr}
   d7322:	f04f 0c00 	mov.w	ip, #0
   d7326:	4604      	mov	r4, r0
   d7328:	4608      	mov	r0, r1
   d732a:	4611      	mov	r1, r2
   d732c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7330:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7334:	4a04      	ldr	r2, [pc, #16]	; (d7348 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7336:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7338:	2201      	movs	r2, #1
  _serial = serial;
   d733a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d733c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d733e:	461a      	mov	r2, r3
   d7340:	f7fe ffd4 	bl	d62ec <hal_usart_init>
}
   d7344:	4620      	mov	r0, r4
   d7346:	bd10      	pop	{r4, pc}
   d7348:	000db084 	.word	0x000db084

000d734c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d734c:	7c00      	ldrb	r0, [r0, #16]
   d734e:	2300      	movs	r3, #0
   d7350:	f7ff b80c 	b.w	d636c <hal_usart_begin_config>

000d7354 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d7354:	2200      	movs	r2, #0
   d7356:	f7ff bff9 	b.w	d734c <_ZN11USARTSerial5beginEmm>
	...

000d735c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d735c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d735e:	4c0e      	ldr	r4, [pc, #56]	; (d7398 <_Z22__fetch_global_Serial1v+0x3c>)
   d7360:	7821      	ldrb	r1, [r4, #0]
   d7362:	f3bf 8f5b 	dmb	ish
   d7366:	f011 0101 	ands.w	r1, r1, #1
   d736a:	d112      	bne.n	d7392 <_Z22__fetch_global_Serial1v+0x36>
   d736c:	4620      	mov	r0, r4
   d736e:	9101      	str	r1, [sp, #4]
   d7370:	f7fc fea2 	bl	d40b8 <__cxa_guard_acquire>
   d7374:	9901      	ldr	r1, [sp, #4]
   d7376:	b160      	cbz	r0, d7392 <_Z22__fetch_global_Serial1v+0x36>
   d7378:	4a08      	ldr	r2, [pc, #32]	; (d739c <_Z22__fetch_global_Serial1v+0x40>)
   d737a:	4b09      	ldr	r3, [pc, #36]	; (d73a0 <_Z22__fetch_global_Serial1v+0x44>)
   d737c:	4809      	ldr	r0, [pc, #36]	; (d73a4 <_Z22__fetch_global_Serial1v+0x48>)
   d737e:	f7ff ffcf 	bl	d7320 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7382:	4620      	mov	r0, r4
   d7384:	f7fc fe9d 	bl	d40c2 <__cxa_guard_release>
   d7388:	4a07      	ldr	r2, [pc, #28]	; (d73a8 <_Z22__fetch_global_Serial1v+0x4c>)
   d738a:	4908      	ldr	r1, [pc, #32]	; (d73ac <_Z22__fetch_global_Serial1v+0x50>)
   d738c:	4805      	ldr	r0, [pc, #20]	; (d73a4 <_Z22__fetch_global_Serial1v+0x48>)
   d738e:	f000 fd21 	bl	d7dd4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7392:	4804      	ldr	r0, [pc, #16]	; (d73a4 <_Z22__fetch_global_Serial1v+0x48>)
   d7394:	b002      	add	sp, #8
   d7396:	bd10      	pop	{r4, pc}
   d7398:	2003e6a8 	.word	0x2003e6a8
   d739c:	2003e6ac 	.word	0x2003e6ac
   d73a0:	2003e730 	.word	0x2003e730
   d73a4:	2003e7b4 	.word	0x2003e7b4
   d73a8:	2003e3b8 	.word	0x2003e3b8
   d73ac:	000d72a5 	.word	0x000d72a5

000d73b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d73b0:	4770      	bx	lr

000d73b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d73b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73b4:	4606      	mov	r6, r0
   d73b6:	4615      	mov	r5, r2
   d73b8:	460c      	mov	r4, r1
   d73ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d73bc:	42bc      	cmp	r4, r7
   d73be:	d006      	beq.n	d73ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d73c0:	6833      	ldr	r3, [r6, #0]
   d73c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d73c6:	689b      	ldr	r3, [r3, #8]
   d73c8:	4630      	mov	r0, r6
   d73ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d73cc:	e7f6      	b.n	d73bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d73ce:	4628      	mov	r0, r5
   d73d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d73d2:	7c00      	ldrb	r0, [r0, #16]
   d73d4:	2200      	movs	r2, #0
   d73d6:	f7fe bfe9 	b.w	d63ac <hal_i2c_write>

000d73da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d73da:	7c00      	ldrb	r0, [r0, #16]
   d73dc:	2100      	movs	r1, #0
   d73de:	f7fe bfed 	b.w	d63bc <hal_i2c_available>

000d73e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d73e2:	7c00      	ldrb	r0, [r0, #16]
   d73e4:	2100      	movs	r1, #0
   d73e6:	f7fe bff1 	b.w	d63cc <hal_i2c_read>

000d73ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d73ea:	7c00      	ldrb	r0, [r0, #16]
   d73ec:	2100      	movs	r1, #0
   d73ee:	f7fe bff5 	b.w	d63dc <hal_i2c_peek>

000d73f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d73f2:	7c00      	ldrb	r0, [r0, #16]
   d73f4:	2100      	movs	r1, #0
   d73f6:	f7fe bff9 	b.w	d63ec <hal_i2c_flush>

000d73fa <_ZN7TwoWireD0Ev>:
   d73fa:	b510      	push	{r4, lr}
   d73fc:	2114      	movs	r1, #20
   d73fe:	4604      	mov	r4, r0
   d7400:	f000 fced 	bl	d7dde <_ZdlPvj>
   d7404:	4620      	mov	r0, r4
   d7406:	bd10      	pop	{r4, pc}

000d7408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7408:	b510      	push	{r4, lr}
   d740a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d740e:	4604      	mov	r4, r0
   d7410:	4608      	mov	r0, r1
   d7412:	2100      	movs	r1, #0
   d7414:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7418:	4b03      	ldr	r3, [pc, #12]	; (d7428 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d741a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d741c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d741e:	4611      	mov	r1, r2
   d7420:	f7fe fff4 	bl	d640c <hal_i2c_init>
}
   d7424:	4620      	mov	r0, r4
   d7426:	bd10      	pop	{r4, pc}
   d7428:	000db0b4 	.word	0x000db0b4

000d742c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d742c:	2300      	movs	r3, #0
   d742e:	7c00      	ldrb	r0, [r0, #16]
   d7430:	461a      	mov	r2, r3
   d7432:	4619      	mov	r1, r3
   d7434:	f7fe bfa2 	b.w	d637c <hal_i2c_begin>

000d7438 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d743a:	2200      	movs	r2, #0
   d743c:	2314      	movs	r3, #20
   d743e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7442:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7446:	780b      	ldrb	r3, [r1, #0]
   d7448:	f88d 3008 	strb.w	r3, [sp, #8]
   d744c:	684b      	ldr	r3, [r1, #4]
   d744e:	9303      	str	r3, [sp, #12]
   d7450:	68cb      	ldr	r3, [r1, #12]
   d7452:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7454:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7456:	7a0b      	ldrb	r3, [r1, #8]
   d7458:	9305      	str	r3, [sp, #20]
   d745a:	a901      	add	r1, sp, #4
   d745c:	f7fe ffde 	bl	d641c <hal_i2c_request_ex>
}
   d7460:	b007      	add	sp, #28
   d7462:	f85d fb04 	ldr.w	pc, [sp], #4

000d7466 <_ZN7TwoWire11requestFromEhjh>:
{
   d7466:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7468:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d746a:	f88d 1000 	strb.w	r1, [sp]
   d746e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7472:	9103      	str	r1, [sp, #12]
   d7474:	bf18      	it	ne
   d7476:	2301      	movne	r3, #1
   d7478:	4669      	mov	r1, sp
    size_ = size;
   d747a:	9201      	str	r2, [sp, #4]
   d747c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7480:	f7ff ffda 	bl	d7438 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7484:	b005      	add	sp, #20
   d7486:	f85d fb04 	ldr.w	pc, [sp], #4

000d748a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d748a:	2301      	movs	r3, #1
   d748c:	f7ff bfeb 	b.w	d7466 <_ZN7TwoWire11requestFromEhjh>

000d7490 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7490:	7c00      	ldrb	r0, [r0, #16]
   d7492:	2200      	movs	r2, #0
   d7494:	f7fe bf7a 	b.w	d638c <hal_i2c_begin_transmission>

000d7498 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7498:	b2c9      	uxtb	r1, r1
   d749a:	f7ff bff9 	b.w	d7490 <_ZN7TwoWire17beginTransmissionEh>

000d749e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d749e:	7c00      	ldrb	r0, [r0, #16]
   d74a0:	2200      	movs	r2, #0
   d74a2:	f7fe bf7b 	b.w	d639c <hal_i2c_end_transmission>

000d74a6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d74a6:	2101      	movs	r1, #1
   d74a8:	f7ff bff9 	b.w	d749e <_ZN7TwoWire15endTransmissionEh>

000d74ac <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d74ac:	b510      	push	{r4, lr}
  if (0 == max) {
   d74ae:	4604      	mov	r4, r0
   d74b0:	b128      	cbz	r0, d74be <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d74b2:	f001 fb21 	bl	d8af8 <rand>
   d74b6:	fb90 f3f4 	sdiv	r3, r0, r4
   d74ba:	fb03 0414 	mls	r4, r3, r4, r0
}
   d74be:	4620      	mov	r0, r4
   d74c0:	bd10      	pop	{r4, pc}

000d74c2 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d74c2:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d74c4:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d74c6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d74ca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d74cc:	2201      	movs	r2, #1
   d74ce:	f04f 33ff 	mov.w	r3, #4294967295
   d74d2:	f10d 0107 	add.w	r1, sp, #7
   d74d6:	47a0      	blx	r4
}
   d74d8:	b002      	add	sp, #8
   d74da:	bd10      	pop	{r4, pc}

000d74dc <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d74dc:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d74de:	6803      	ldr	r3, [r0, #0]
   d74e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d74e2:	f04f 33ff 	mov.w	r3, #4294967295
   d74e6:	46a4      	mov	ip, r4
}
   d74e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d74ec:	4760      	bx	ip

000d74ee <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d74ee:	b513      	push	{r0, r1, r4, lr}
   d74f0:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d74f2:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d74f4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d74f8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d74fa:	f10d 0107 	add.w	r1, sp, #7
   d74fe:	2201      	movs	r2, #1
   d7500:	47a0      	blx	r4
}
   d7502:	b002      	add	sp, #8
   d7504:	bd10      	pop	{r4, pc}

000d7506 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7506:	4770      	bx	lr

000d7508 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7508:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d750a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d750c:	681a      	ldr	r2, [r3, #0]
   d750e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7510:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7512:	da10      	bge.n	d7536 <_ZN9TCPClient9connectedEv+0x2e>
   d7514:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7518:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d751c:	429a      	cmp	r2, r3
   d751e:	d10a      	bne.n	d7536 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7520:	6803      	ldr	r3, [r0, #0]
   d7522:	691b      	ldr	r3, [r3, #16]
   d7524:	4798      	blx	r3
        if (!rv) {
   d7526:	4604      	mov	r4, r0
   d7528:	b928      	cbnz	r0, d7536 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d752a:	682b      	ldr	r3, [r5, #0]
   d752c:	4628      	mov	r0, r5
   d752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7530:	4798      	blx	r3
        rv = available();
   d7532:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7534:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7536:	2001      	movs	r0, #1
   d7538:	e7fc      	b.n	d7534 <_ZN9TCPClient9connectedEv+0x2c>

000d753a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d753a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d753c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d753e:	43c0      	mvns	r0, r0
   d7540:	0fc0      	lsrs	r0, r0, #31
   d7542:	4770      	bx	lr

000d7544 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7544:	4770      	bx	lr
	...

000d7548 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7548:	4b06      	ldr	r3, [pc, #24]	; (d7564 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d754a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d754c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d754e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7552:	d005      	beq.n	d7560 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7554:	4608      	mov	r0, r1
   d7556:	f000 fc49 	bl	d7dec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d755a:	2800      	cmp	r0, #0
	return nullptr;
   d755c:	bf08      	it	eq
   d755e:	2400      	moveq	r4, #0
      }
   d7560:	4620      	mov	r0, r4
   d7562:	bd10      	pop	{r4, pc}
   d7564:	000db010 	.word	0x000db010

000d7568 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7568:	b510      	push	{r4, lr}
   d756a:	21ac      	movs	r1, #172	; 0xac
   d756c:	4604      	mov	r4, r0
   d756e:	f000 fc36 	bl	d7dde <_ZdlPvj>
   d7572:	4620      	mov	r0, r4
   d7574:	bd10      	pop	{r4, pc}

000d7576 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7576:	f7fc bd92 	b.w	d409e <_ZdlPv>

000d757a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d757e:	f04f 0800 	mov.w	r8, #0
   d7582:	b086      	sub	sp, #24
   d7584:	461d      	mov	r5, r3
   d7586:	f8c0 8004 	str.w	r8, [r0, #4]
   d758a:	4604      	mov	r4, r0
   d758c:	460e      	mov	r6, r1
   d758e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7590:	4641      	mov	r1, r8
   d7592:	2210      	movs	r2, #16
   d7594:	a802      	add	r0, sp, #8
   d7596:	f001 fa83 	bl	d8aa0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d759a:	1c6b      	adds	r3, r5, #1
   d759c:	d009      	beq.n	d75b2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d759e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d75a2:	fbb5 f3f0 	udiv	r3, r5, r0
   d75a6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d75aa:	fb00 5313 	mls	r3, r0, r3, r5
   d75ae:	4358      	muls	r0, r3
   d75b0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d75b2:	6960      	ldr	r0, [r4, #20]
   d75b4:	2310      	movs	r3, #16
   d75b6:	9300      	str	r3, [sp, #0]
   d75b8:	6800      	ldr	r0, [r0, #0]
   d75ba:	ab02      	add	r3, sp, #8
   d75bc:	f241 0205 	movw	r2, #4101	; 0x1005
   d75c0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d75c4:	f7fe ff32 	bl	d642c <sock_setsockopt>
    if (ret < 0) {
   d75c8:	2800      	cmp	r0, #0
   d75ca:	da07      	bge.n	d75dc <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d75cc:	f7ff f8ca 	bl	d6764 <__errno>
   d75d0:	6803      	ldr	r3, [r0, #0]
   d75d2:	6063      	str	r3, [r4, #4]
        return 0;
   d75d4:	2000      	movs	r0, #0
}
   d75d6:	b006      	add	sp, #24
   d75d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d75dc:	6960      	ldr	r0, [r4, #20]
   d75de:	2300      	movs	r3, #0
   d75e0:	6800      	ldr	r0, [r0, #0]
   d75e2:	463a      	mov	r2, r7
   d75e4:	4631      	mov	r1, r6
   d75e6:	f7fe ff41 	bl	d646c <sock_send>
    if (ret < 0) {
   d75ea:	1e03      	subs	r3, r0, #0
   d75ec:	dbee      	blt.n	d75cc <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d75ee:	4618      	mov	r0, r3
   d75f0:	e7f1      	b.n	d75d6 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d75f4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d75f4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d75f6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d75f8:	4b05      	ldr	r3, [pc, #20]	; (d7610 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d75fa:	4604      	mov	r4, r0
   d75fc:	358c      	adds	r5, #140	; 0x8c
   d75fe:	f844 3b04 	str.w	r3, [r4], #4
   d7602:	4606      	mov	r6, r0
   d7604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7608:	682b      	ldr	r3, [r5, #0]
   d760a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d760c:	4630      	mov	r0, r6
   d760e:	bd70      	pop	{r4, r5, r6, pc}
   d7610:	000db040 	.word	0x000db040

000d7614 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7614:	b510      	push	{r4, lr}
   d7616:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7618:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d761c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7620:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7622:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7624:	d005      	beq.n	d7632 <_ZN9TCPClient4peekEv+0x1e>
   d7626:	6963      	ldr	r3, [r4, #20]
   d7628:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d762c:	4413      	add	r3, r2
   d762e:	7918      	ldrb	r0, [r3, #4]
}
   d7630:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7632:	6803      	ldr	r3, [r0, #0]
   d7634:	691b      	ldr	r3, [r3, #16]
   d7636:	4798      	blx	r3
   d7638:	2800      	cmp	r0, #0
   d763a:	d1f4      	bne.n	d7626 <_ZN9TCPClient4peekEv+0x12>
   d763c:	f04f 30ff 	mov.w	r0, #4294967295
   d7640:	e7f6      	b.n	d7630 <_ZN9TCPClient4peekEv+0x1c>

000d7642 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7642:	b510      	push	{r4, lr}
   d7644:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7646:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d764a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d764e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7650:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7652:	d008      	beq.n	d7666 <_ZN9TCPClient4readEv+0x24>
   d7654:	6963      	ldr	r3, [r4, #20]
   d7656:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d765a:	1c51      	adds	r1, r2, #1
   d765c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7660:	4413      	add	r3, r2
   d7662:	7918      	ldrb	r0, [r3, #4]
}
   d7664:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7666:	6803      	ldr	r3, [r0, #0]
   d7668:	691b      	ldr	r3, [r3, #16]
   d766a:	4798      	blx	r3
   d766c:	2800      	cmp	r0, #0
   d766e:	d1f1      	bne.n	d7654 <_ZN9TCPClient4readEv+0x12>
   d7670:	f04f 30ff 	mov.w	r0, #4294967295
   d7674:	e7f6      	b.n	d7664 <_ZN9TCPClient4readEv+0x22>

000d7676 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7678:	6943      	ldr	r3, [r0, #20]
   d767a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d767c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7680:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7684:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7686:	4605      	mov	r5, r0
   d7688:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d768a:	d016      	beq.n	d76ba <_ZN9TCPClient4readEPhj+0x44>
   d768c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d768e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7692:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7696:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7698:	42bc      	cmp	r4, r7
   d769a:	bf28      	it	cs
   d769c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d769e:	3304      	adds	r3, #4
   d76a0:	4622      	mov	r2, r4
   d76a2:	4419      	add	r1, r3
   d76a4:	4630      	mov	r0, r6
   d76a6:	f001 f9ed 	bl	d8a84 <memcpy>
   d76aa:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d76ac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d76b0:	4423      	add	r3, r4
   d76b2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d76b6:	4620      	mov	r0, r4
   d76b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d76ba:	6803      	ldr	r3, [r0, #0]
   d76bc:	691b      	ldr	r3, [r3, #16]
   d76be:	4798      	blx	r3
   d76c0:	2800      	cmp	r0, #0
   d76c2:	d1e3      	bne.n	d768c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d76c4:	f04f 34ff 	mov.w	r4, #4294967295
   d76c8:	e7f5      	b.n	d76b6 <_ZN9TCPClient4readEPhj+0x40>

000d76ca <_ZN9TCPClient12flush_bufferEv>:
   d76ca:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d76cc:	2300      	movs	r3, #0
   d76ce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d76d2:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d76d4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d76d8:	4770      	bx	lr

000d76da <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76de:	461f      	mov	r7, r3
    stop();
   d76e0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76e2:	460c      	mov	r4, r1
    stop();
   d76e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76e6:	b08a      	sub	sp, #40	; 0x28
   d76e8:	4605      	mov	r5, r0
   d76ea:	4616      	mov	r6, r2
    stop();
   d76ec:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76ee:	7d23      	ldrb	r3, [r4, #20]
   d76f0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76f4:	2b04      	cmp	r3, #4
   d76f6:	bf0c      	ite	eq
   d76f8:	2002      	moveq	r0, #2
   d76fa:	200a      	movne	r0, #10
   d76fc:	2206      	movs	r2, #6
   d76fe:	2101      	movs	r1, #1
   d7700:	f7fe febc 	bl	d647c <sock_socket>
   d7704:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7708:	696b      	ldr	r3, [r5, #20]
   d770a:	681b      	ldr	r3, [r3, #0]
   d770c:	2b00      	cmp	r3, #0
   d770e:	da08      	bge.n	d7722 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7710:	682b      	ldr	r3, [r5, #0]
   d7712:	4628      	mov	r0, r5
   d7714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7716:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7718:	4798      	blx	r3
}
   d771a:	4620      	mov	r0, r4
   d771c:	b00a      	add	sp, #40	; 0x28
   d771e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7722:	4628      	mov	r0, r5
   d7724:	f7ff ffd1 	bl	d76ca <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7728:	b1b7      	cbz	r7, d7758 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d772a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d772c:	a903      	add	r1, sp, #12
   d772e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7730:	9303      	str	r3, [sp, #12]
   d7732:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7736:	f7fe fd89 	bl	d624c <if_index_to_name>
   d773a:	2800      	cmp	r0, #0
   d773c:	d1e8      	bne.n	d7710 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d773e:	6968      	ldr	r0, [r5, #20]
   d7740:	2306      	movs	r3, #6
   d7742:	9300      	str	r3, [sp, #0]
   d7744:	6800      	ldr	r0, [r0, #0]
   d7746:	ab03      	add	r3, sp, #12
   d7748:	f241 020b 	movw	r2, #4107	; 0x100b
   d774c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7750:	f7fe fe6c 	bl	d642c <sock_setsockopt>
   d7754:	2800      	cmp	r0, #0
   d7756:	d1db      	bne.n	d7710 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7758:	221c      	movs	r2, #28
   d775a:	2100      	movs	r1, #0
   d775c:	a803      	add	r0, sp, #12
   d775e:	f001 f99f 	bl	d8aa0 <memset>
    if (ip.version() == 4) {
   d7762:	7d23      	ldrb	r3, [r4, #20]
   d7764:	2b04      	cmp	r3, #4
   d7766:	d11d      	bne.n	d77a4 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7768:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d776c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d776e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7772:	f7fe fdb3 	bl	d62dc <inet_htons>
   d7776:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d777a:	6860      	ldr	r0, [r4, #4]
   d777c:	f7fe fda6 	bl	d62cc <inet_htonl>
   d7780:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7782:	696b      	ldr	r3, [r5, #20]
   d7784:	221c      	movs	r2, #28
   d7786:	6818      	ldr	r0, [r3, #0]
   d7788:	a903      	add	r1, sp, #12
   d778a:	f7fe fe5f 	bl	d644c <sock_connect>
   d778e:	2800      	cmp	r0, #0
   d7790:	d1be      	bne.n	d7710 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7792:	3404      	adds	r4, #4
   d7794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7796:	696d      	ldr	r5, [r5, #20]
   d7798:	358c      	adds	r5, #140	; 0x8c
   d779a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d779c:	6823      	ldr	r3, [r4, #0]
   d779e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d77a0:	2401      	movs	r4, #1
   d77a2:	e7ba      	b.n	d771a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d77a4:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d77a8:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d77aa:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d77ae:	f7fe fd95 	bl	d62dc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d77b2:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d77b4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d77b8:	1d23      	adds	r3, r4, #4
   d77ba:	f104 0714 	add.w	r7, r4, #20
   d77be:	6818      	ldr	r0, [r3, #0]
   d77c0:	6859      	ldr	r1, [r3, #4]
   d77c2:	4632      	mov	r2, r6
   d77c4:	c203      	stmia	r2!, {r0, r1}
   d77c6:	3308      	adds	r3, #8
   d77c8:	42bb      	cmp	r3, r7
   d77ca:	4616      	mov	r6, r2
   d77cc:	d1f7      	bne.n	d77be <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d77ce:	e7d8      	b.n	d7782 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d77d0 <_ZN9TCPClient9availableEv>:
{
   d77d0:	b530      	push	{r4, r5, lr}
   d77d2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d77d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d77d8:	b08b      	sub	sp, #44	; 0x2c
   d77da:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d77dc:	b12b      	cbz	r3, d77ea <_ZN9TCPClient9availableEv+0x1a>
   d77de:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d77e2:	429a      	cmp	r2, r3
   d77e4:	d101      	bne.n	d77ea <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d77e6:	f7ff ff70 	bl	d76ca <_ZN9TCPClient12flush_bufferEv>
   d77ea:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d77ec:	6808      	ldr	r0, [r1, #0]
   d77ee:	2800      	cmp	r0, #0
   d77f0:	db18      	blt.n	d7824 <_ZN9TCPClient9availableEv+0x54>
   d77f2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d77f6:	2d7f      	cmp	r5, #127	; 0x7f
   d77f8:	d814      	bhi.n	d7824 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d77fa:	3104      	adds	r1, #4
   d77fc:	2308      	movs	r3, #8
   d77fe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7802:	4429      	add	r1, r5
   d7804:	f7fe fe2a 	bl	d645c <sock_recv>
            if (ret > 0) {
   d7808:	2800      	cmp	r0, #0
   d780a:	dd13      	ble.n	d7834 <_ZN9TCPClient9availableEv+0x64>
   d780c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d780e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7812:	b90a      	cbnz	r2, d7818 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7814:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7818:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d781a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d781e:	4410      	add	r0, r2
   d7820:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7824:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7826:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d782a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d782e:	1ac0      	subs	r0, r0, r3
   d7830:	b00b      	add	sp, #44	; 0x2c
   d7832:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7834:	f7fe ff96 	bl	d6764 <__errno>
   d7838:	6803      	ldr	r3, [r0, #0]
   d783a:	2b0b      	cmp	r3, #11
   d783c:	d0f2      	beq.n	d7824 <_ZN9TCPClient9availableEv+0x54>
   d783e:	f7fe ff91 	bl	d6764 <__errno>
   d7842:	6803      	ldr	r3, [r0, #0]
   d7844:	2b0b      	cmp	r3, #11
   d7846:	d0ed      	beq.n	d7824 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7848:	2320      	movs	r3, #32
   d784a:	2500      	movs	r5, #0
   d784c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7850:	f7fe ff88 	bl	d6764 <__errno>
   d7854:	6803      	ldr	r3, [r0, #0]
   d7856:	9301      	str	r3, [sp, #4]
   d7858:	4b08      	ldr	r3, [pc, #32]	; (d787c <_ZN9TCPClient9availableEv+0xac>)
   d785a:	4909      	ldr	r1, [pc, #36]	; (d7880 <_ZN9TCPClient9availableEv+0xb0>)
   d785c:	9300      	str	r3, [sp, #0]
   d785e:	aa02      	add	r2, sp, #8
   d7860:	462b      	mov	r3, r5
   d7862:	2032      	movs	r0, #50	; 0x32
   d7864:	f7fe feaa 	bl	d65bc <log_message>
                    sock_close(d_->sock);
   d7868:	6963      	ldr	r3, [r4, #20]
   d786a:	6818      	ldr	r0, [r3, #0]
   d786c:	f7fe fde6 	bl	d643c <sock_close>
   d7870:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7872:	f04f 32ff 	mov.w	r2, #4294967295
   d7876:	601a      	str	r2, [r3, #0]
   d7878:	e7d4      	b.n	d7824 <_ZN9TCPClient9availableEv+0x54>
   d787a:	bf00      	nop
   d787c:	000db0db 	.word	0x000db0db
   d7880:	000db0d4 	.word	0x000db0d4

000d7884 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7884:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7886:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7888:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d788a:	6818      	ldr	r0, [r3, #0]
   d788c:	2800      	cmp	r0, #0
   d788e:	db01      	blt.n	d7894 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7890:	f7fe fdd4 	bl	d643c <sock_close>
   d7894:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7896:	f04f 32ff 	mov.w	r2, #4294967295
   d789a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d789c:	6960      	ldr	r0, [r4, #20]
   d789e:	2211      	movs	r2, #17
   d78a0:	2100      	movs	r1, #0
   d78a2:	308c      	adds	r0, #140	; 0x8c
   d78a4:	f001 f8fc 	bl	d8aa0 <memset>
    flush_buffer();
   d78a8:	4620      	mov	r0, r4
}
   d78aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d78ae:	f7ff bf0c 	b.w	d76ca <_ZN9TCPClient12flush_bufferEv>

000d78b2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d78b2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d78b4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d78b6:	4604      	mov	r4, r0
          total(0) {
   d78b8:	6001      	str	r1, [r0, #0]
   d78ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d78be:	3088      	adds	r0, #136	; 0x88
   d78c0:	f7ff fbb0 	bl	d7024 <_ZN9IPAddressC1Ev>
}
   d78c4:	4620      	mov	r0, r4
   d78c6:	bd10      	pop	{r4, pc}

000d78c8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d78c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d78ca:	2300      	movs	r3, #0
   d78cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d78d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d78d4:	4a0e      	ldr	r2, [pc, #56]	; (d7910 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d78d6:	6103      	str	r3, [r0, #16]
   d78d8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d78da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d78dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78de:	20ac      	movs	r0, #172	; 0xac
   d78e0:	9101      	str	r1, [sp, #4]
   d78e2:	f7fc fbd8 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d78e6:	1e05      	subs	r5, r0, #0
   d78e8:	f105 060c 	add.w	r6, r5, #12
   d78ec:	d008      	beq.n	d7900 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d78ee:	2301      	movs	r3, #1
   d78f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d78f4:	4b07      	ldr	r3, [pc, #28]	; (d7914 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78f6:	9901      	ldr	r1, [sp, #4]
   d78f8:	602b      	str	r3, [r5, #0]
   d78fa:	4630      	mov	r0, r6
   d78fc:	f7ff ffd9 	bl	d78b2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7900:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7902:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7906:	f7ff fee0 	bl	d76ca <_ZN9TCPClient12flush_bufferEv>
}
   d790a:	b002      	add	sp, #8
   d790c:	bd70      	pop	{r4, r5, r6, pc}
   d790e:	bf00      	nop
   d7910:	000db110 	.word	0x000db110
   d7914:	000db0f4 	.word	0x000db0f4

000d7918 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7918:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d791a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d791e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7920:	f7ff ffd2 	bl	d78c8 <_ZN9TCPClientC1Ei>
}
   d7924:	4620      	mov	r0, r4
   d7926:	bd10      	pop	{r4, pc}

000d7928 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7928:	b510      	push	{r4, lr}
   d792a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d792c:	6800      	ldr	r0, [r0, #0]
   d792e:	2800      	cmp	r0, #0
   d7930:	db01      	blt.n	d7936 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7932:	f7fe fd83 	bl	d643c <sock_close>
    }
}
   d7936:	4620      	mov	r0, r4
   d7938:	bd10      	pop	{r4, pc}

000d793a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d793a:	300c      	adds	r0, #12
   d793c:	f7ff bff4 	b.w	d7928 <_ZN9TCPClient4DataD1Ev>

000d7940 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7944:	4698      	mov	r8, r3
    stop();
   d7946:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7948:	b093      	sub	sp, #76	; 0x4c
   d794a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d794c:	2400      	movs	r4, #0
    stop();
   d794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7950:	4606      	mov	r6, r0
   d7952:	4617      	mov	r7, r2
    stop();
   d7954:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7956:	4628      	mov	r0, r5
   d7958:	466b      	mov	r3, sp
   d795a:	4622      	mov	r2, r4
   d795c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d795e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7960:	f7fe fc34 	bl	d61cc <netdb_getaddrinfo>
   d7964:	4605      	mov	r5, r0
   d7966:	2800      	cmp	r0, #0
   d7968:	d163      	bne.n	d7a32 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d796a:	9b00      	ldr	r3, [sp, #0]
   d796c:	2b00      	cmp	r3, #0
   d796e:	d04b      	beq.n	d7a08 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7970:	695b      	ldr	r3, [r3, #20]
   d7972:	2b00      	cmp	r3, #0
   d7974:	d048      	beq.n	d7a08 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7976:	a806      	add	r0, sp, #24
   d7978:	f7ff fb54 	bl	d7024 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d797c:	9b00      	ldr	r3, [sp, #0]
   d797e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7980:	7863      	ldrb	r3, [r4, #1]
   d7982:	2b02      	cmp	r3, #2
   d7984:	d104      	bne.n	d7990 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7986:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7988:	a806      	add	r0, sp, #24
   d798a:	f7ff f883 	bl	d6a94 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d798e:	e026      	b.n	d79de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7990:	2b0a      	cmp	r3, #10
   d7992:	d124      	bne.n	d79de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7994:	2211      	movs	r2, #17
   d7996:	4629      	mov	r1, r5
   d7998:	a801      	add	r0, sp, #4
   d799a:	f001 f881 	bl	d8aa0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d799e:	68a3      	ldr	r3, [r4, #8]
   d79a0:	2b00      	cmp	r3, #0
   d79a2:	d038      	beq.n	d7a16 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d79a4:	f104 0308 	add.w	r3, r4, #8
   d79a8:	f10d 0c04 	add.w	ip, sp, #4
   d79ac:	3418      	adds	r4, #24
   d79ae:	6818      	ldr	r0, [r3, #0]
   d79b0:	6859      	ldr	r1, [r3, #4]
   d79b2:	4662      	mov	r2, ip
   d79b4:	c203      	stmia	r2!, {r0, r1}
   d79b6:	3308      	adds	r3, #8
   d79b8:	42a3      	cmp	r3, r4
   d79ba:	4694      	mov	ip, r2
   d79bc:	d1f7      	bne.n	d79ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d79be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d79c0:	a901      	add	r1, sp, #4
   d79c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d79c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d79c8:	f7ff fb3a 	bl	d7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d79cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d79d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d79d4:	ac07      	add	r4, sp, #28
   d79d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79d8:	f8dc 3000 	ldr.w	r3, [ip]
   d79dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d79de:	a806      	add	r0, sp, #24
   d79e0:	f7ff fb40 	bl	d7064 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d79e4:	b180      	cbz	r0, d7a08 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d79e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d79e8:	ad07      	add	r5, sp, #28
   d79ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d79ee:	4b12      	ldr	r3, [pc, #72]	; (d7a38 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d79f0:	930c      	str	r3, [sp, #48]	; 0x30
   d79f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79f4:	ac0d      	add	r4, sp, #52	; 0x34
   d79f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79f8:	682b      	ldr	r3, [r5, #0]
   d79fa:	7023      	strb	r3, [r4, #0]
   d79fc:	463a      	mov	r2, r7
   d79fe:	4643      	mov	r3, r8
   d7a00:	a90c      	add	r1, sp, #48	; 0x30
   d7a02:	4630      	mov	r0, r6
   d7a04:	47c8      	blx	r9
   d7a06:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7a08:	9800      	ldr	r0, [sp, #0]
   d7a0a:	f7fe fbd7 	bl	d61bc <netdb_freeaddrinfo>
}
   d7a0e:	4628      	mov	r0, r5
   d7a10:	b013      	add	sp, #76	; 0x4c
   d7a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7a16:	68e3      	ldr	r3, [r4, #12]
   d7a18:	2b00      	cmp	r3, #0
   d7a1a:	d1c3      	bne.n	d79a4 <_ZN9TCPClient7connectEPKctm+0x64>
   d7a1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7a20:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7a24:	f7fe fc52 	bl	d62cc <inet_htonl>
   d7a28:	4581      	cmp	r9, r0
   d7a2a:	d1bb      	bne.n	d79a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7a2c:	f104 0114 	add.w	r1, r4, #20
   d7a30:	e7aa      	b.n	d7988 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7a32:	4625      	mov	r5, r4
   d7a34:	e7e8      	b.n	d7a08 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7a36:	bf00      	nop
   d7a38:	000db040 	.word	0x000db040

000d7a3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7a3c:	2200      	movs	r2, #0
   d7a3e:	6840      	ldr	r0, [r0, #4]
   d7a40:	4611      	mov	r1, r2
   d7a42:	f7fe bdff 	b.w	d6644 <network_ready>

000d7a46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a46:	2200      	movs	r2, #0
   d7a48:	6840      	ldr	r0, [r0, #4]
   d7a4a:	4611      	mov	r1, r2
   d7a4c:	f7fe be1a 	b.w	d6684 <network_listening>

000d7a50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7a50:	2200      	movs	r2, #0
   d7a52:	6840      	ldr	r0, [r0, #4]
   d7a54:	4611      	mov	r1, r2
   d7a56:	f7fe be25 	b.w	d66a4 <network_get_listen_timeout>

000d7a5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7a5a:	6840      	ldr	r0, [r0, #4]
   d7a5c:	2200      	movs	r2, #0
   d7a5e:	f7fe be19 	b.w	d6694 <network_set_listen_timeout>

000d7a62 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a62:	6840      	ldr	r0, [r0, #4]
   d7a64:	2200      	movs	r2, #0
   d7a66:	f081 0101 	eor.w	r1, r1, #1
   d7a6a:	f7fe be03 	b.w	d6674 <network_listen>

000d7a6e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7a6e:	2300      	movs	r3, #0
   d7a70:	6840      	ldr	r0, [r0, #4]
   d7a72:	461a      	mov	r2, r3
   d7a74:	4619      	mov	r1, r3
   d7a76:	f7fe bdf5 	b.w	d6664 <network_off>

000d7a7a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7a7a:	2200      	movs	r2, #0
   d7a7c:	6840      	ldr	r0, [r0, #4]
   d7a7e:	4611      	mov	r1, r2
   d7a80:	f7fe bdd0 	b.w	d6624 <network_connecting>

000d7a84 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a84:	6840      	ldr	r0, [r0, #4]
   d7a86:	2200      	movs	r2, #0
   d7a88:	2102      	movs	r1, #2
   d7a8a:	f7fe bdd3 	b.w	d6634 <network_disconnect>

000d7a8e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7a8e:	2300      	movs	r3, #0
   d7a90:	6840      	ldr	r0, [r0, #4]
   d7a92:	461a      	mov	r2, r3
   d7a94:	f7fe bdbe 	b.w	d6614 <network_connect>

000d7a98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7a98:	4b02      	ldr	r3, [pc, #8]	; (d7aa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7a9a:	2204      	movs	r2, #4
   d7a9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7a9e:	4a02      	ldr	r2, [pc, #8]	; (d7aa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7aa0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7aa2:	4770      	bx	lr
   d7aa4:	2003e7c8 	.word	0x2003e7c8
   d7aa8:	000db15c 	.word	0x000db15c

000d7aac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7aac:	2300      	movs	r3, #0
   d7aae:	6840      	ldr	r0, [r0, #4]
   d7ab0:	461a      	mov	r2, r3
   d7ab2:	f7fe bdaf 	b.w	d6614 <network_connect>

000d7ab6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ab6:	6840      	ldr	r0, [r0, #4]
   d7ab8:	2200      	movs	r2, #0
   d7aba:	2102      	movs	r1, #2
   d7abc:	f7fe bdba 	b.w	d6634 <network_disconnect>

000d7ac0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7ac0:	2200      	movs	r2, #0
   d7ac2:	6840      	ldr	r0, [r0, #4]
   d7ac4:	4611      	mov	r1, r2
   d7ac6:	f7fe bdad 	b.w	d6624 <network_connecting>

000d7aca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7aca:	2200      	movs	r2, #0
   d7acc:	6840      	ldr	r0, [r0, #4]
   d7ace:	4611      	mov	r1, r2
   d7ad0:	f7fe bdb8 	b.w	d6644 <network_ready>

000d7ad4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ad4:	2300      	movs	r3, #0
   d7ad6:	6840      	ldr	r0, [r0, #4]
   d7ad8:	461a      	mov	r2, r3
   d7ada:	4619      	mov	r1, r3
   d7adc:	f7fe bdba 	b.w	d6654 <network_on>

000d7ae0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	6840      	ldr	r0, [r0, #4]
   d7ae4:	461a      	mov	r2, r3
   d7ae6:	4619      	mov	r1, r3
   d7ae8:	f7fe bdbc 	b.w	d6664 <network_off>

000d7aec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7aec:	6840      	ldr	r0, [r0, #4]
   d7aee:	2100      	movs	r1, #0
   d7af0:	f7fe bde0 	b.w	d66b4 <network_is_on>

000d7af4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7af4:	6840      	ldr	r0, [r0, #4]
   d7af6:	2100      	movs	r1, #0
   d7af8:	f7fe bde4 	b.w	d66c4 <network_is_off>

000d7afc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7afc:	6840      	ldr	r0, [r0, #4]
   d7afe:	2200      	movs	r2, #0
   d7b00:	f081 0101 	eor.w	r1, r1, #1
   d7b04:	f7fe bdb6 	b.w	d6674 <network_listen>

000d7b08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7b08:	6840      	ldr	r0, [r0, #4]
   d7b0a:	2200      	movs	r2, #0
   d7b0c:	f7fe bdc2 	b.w	d6694 <network_set_listen_timeout>

000d7b10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7b10:	2200      	movs	r2, #0
   d7b12:	6840      	ldr	r0, [r0, #4]
   d7b14:	4611      	mov	r1, r2
   d7b16:	f7fe bdc5 	b.w	d66a4 <network_get_listen_timeout>

000d7b1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7b1a:	2200      	movs	r2, #0
   d7b1c:	6840      	ldr	r0, [r0, #4]
   d7b1e:	4611      	mov	r1, r2
   d7b20:	f7fe bdb0 	b.w	d6684 <network_listening>

000d7b24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7b28:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7b2a:	b095      	sub	sp, #84	; 0x54
   d7b2c:	4616      	mov	r6, r2
   d7b2e:	460d      	mov	r5, r1
   d7b30:	4607      	mov	r7, r0
    IPAddress addr;
   d7b32:	f7ff fa77 	bl	d7024 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7b36:	4621      	mov	r1, r4
   d7b38:	2218      	movs	r2, #24
   d7b3a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7b3c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7b3e:	f000 ffaf 	bl	d8aa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7b42:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7b44:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7b48:	4621      	mov	r1, r4
   d7b4a:	466b      	mov	r3, sp
   d7b4c:	aa0c      	add	r2, sp, #48	; 0x30
   d7b4e:	4630      	mov	r0, r6
   d7b50:	f7fe fb3c 	bl	d61cc <netdb_getaddrinfo>
    if (!r) {
   d7b54:	4604      	mov	r4, r0
   d7b56:	2800      	cmp	r0, #0
   d7b58:	d14c      	bne.n	d7bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b5a:	4602      	mov	r2, r0
   d7b5c:	2101      	movs	r1, #1
   d7b5e:	6868      	ldr	r0, [r5, #4]
   d7b60:	f7fe fd70 	bl	d6644 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b68:	4622      	mov	r2, r4
   d7b6a:	6868      	ldr	r0, [r5, #4]
   d7b6c:	f7fe fd6a 	bl	d6644 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b72:	4681      	mov	r9, r0
        bool ok = false;
   d7b74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b76:	2e00      	cmp	r6, #0
   d7b78:	d03c      	beq.n	d7bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7b7a:	2900      	cmp	r1, #0
   d7b7c:	d13a      	bne.n	d7bf4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7b7e:	6873      	ldr	r3, [r6, #4]
   d7b80:	2b02      	cmp	r3, #2
   d7b82:	d003      	beq.n	d7b8c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7b84:	2b0a      	cmp	r3, #10
   d7b86:	d011      	beq.n	d7bac <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b88:	69f6      	ldr	r6, [r6, #28]
   d7b8a:	e7f4      	b.n	d7b76 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7b8c:	f1b8 0f00 	cmp.w	r8, #0
   d7b90:	d00a      	beq.n	d7ba8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7b92:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7b94:	a806      	add	r0, sp, #24
   d7b96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7b98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7b9a:	f7ff fa87 	bl	d70ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ba0:	1d3c      	adds	r4, r7, #4
   d7ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ba4:	682b      	ldr	r3, [r5, #0]
   d7ba6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7ba8:	4641      	mov	r1, r8
   d7baa:	e7ed      	b.n	d7b88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7bac:	f1b9 0f00 	cmp.w	r9, #0
   d7bb0:	d101      	bne.n	d7bb6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7bb2:	4649      	mov	r1, r9
   d7bb4:	e7e8      	b.n	d7b88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7bb6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7bb8:	2210      	movs	r2, #16
   d7bba:	a801      	add	r0, sp, #4
   d7bbc:	f000 ff70 	bl	d8aa0 <memset>
                    a.v = 6;
   d7bc0:	2306      	movs	r3, #6
   d7bc2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7bc6:	ad01      	add	r5, sp, #4
   d7bc8:	f104 0308 	add.w	r3, r4, #8
   d7bcc:	3418      	adds	r4, #24
   d7bce:	6818      	ldr	r0, [r3, #0]
   d7bd0:	6859      	ldr	r1, [r3, #4]
   d7bd2:	462a      	mov	r2, r5
   d7bd4:	c203      	stmia	r2!, {r0, r1}
   d7bd6:	3308      	adds	r3, #8
   d7bd8:	42a3      	cmp	r3, r4
   d7bda:	4615      	mov	r5, r2
   d7bdc:	d1f7      	bne.n	d7bce <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7bde:	a901      	add	r1, sp, #4
   d7be0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7be2:	ad07      	add	r5, sp, #28
   d7be4:	f7ff fa2c 	bl	d7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7bea:	1d3c      	adds	r4, r7, #4
   d7bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7bee:	682b      	ldr	r3, [r5, #0]
   d7bf0:	7023      	strb	r3, [r4, #0]
   d7bf2:	e7de      	b.n	d7bb2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7bf4:	9800      	ldr	r0, [sp, #0]
   d7bf6:	f7fe fae1 	bl	d61bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7bfa:	4638      	mov	r0, r7
   d7bfc:	b015      	add	sp, #84	; 0x54
   d7bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7c04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7c04:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7c06:	4a03      	ldr	r2, [pc, #12]	; (d7c14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7c08:	601a      	str	r2, [r3, #0]
   d7c0a:	2200      	movs	r2, #0
   d7c0c:	605a      	str	r2, [r3, #4]

} // spark
   d7c0e:	4770      	bx	lr
   d7c10:	2003e7d0 	.word	0x2003e7d0
   d7c14:	000db198 	.word	0x000db198

000d7c18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7c18:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7c1a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7c1c:	d902      	bls.n	d7c24 <pinAvailable+0xc>
    return false;
   d7c1e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7c20:	b002      	add	sp, #8
   d7c22:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7c24:	f1a0 030b 	sub.w	r3, r0, #11
   d7c28:	2b02      	cmp	r3, #2
   d7c2a:	d81a      	bhi.n	d7c62 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7c2c:	4c17      	ldr	r4, [pc, #92]	; (d7c8c <pinAvailable+0x74>)
   d7c2e:	7821      	ldrb	r1, [r4, #0]
   d7c30:	f3bf 8f5b 	dmb	ish
   d7c34:	f011 0101 	ands.w	r1, r1, #1
   d7c38:	d10b      	bne.n	d7c52 <pinAvailable+0x3a>
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	9101      	str	r1, [sp, #4]
   d7c3e:	f7fc fa3b 	bl	d40b8 <__cxa_guard_acquire>
   d7c42:	9901      	ldr	r1, [sp, #4]
   d7c44:	b128      	cbz	r0, d7c52 <pinAvailable+0x3a>
   d7c46:	4812      	ldr	r0, [pc, #72]	; (d7c90 <pinAvailable+0x78>)
   d7c48:	f7fe fde0 	bl	d680c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7fc fa38 	bl	d40c2 <__cxa_guard_release>
   d7c52:	4b0f      	ldr	r3, [pc, #60]	; (d7c90 <pinAvailable+0x78>)
   d7c54:	7818      	ldrb	r0, [r3, #0]
   d7c56:	f7fe fc49 	bl	d64ec <hal_spi_is_enabled>
   d7c5a:	2800      	cmp	r0, #0
   d7c5c:	d1df      	bne.n	d7c1e <pinAvailable+0x6>
  return true; // 'pin' is available
   d7c5e:	2001      	movs	r0, #1
   d7c60:	e7de      	b.n	d7c20 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7c62:	2801      	cmp	r0, #1
   d7c64:	d809      	bhi.n	d7c7a <pinAvailable+0x62>
   d7c66:	f000 f88d 	bl	d7d84 <_Z19__fetch_global_Wirev>
   d7c6a:	2100      	movs	r1, #0
   d7c6c:	7c00      	ldrb	r0, [r0, #16]
   d7c6e:	f7fe fbc5 	bl	d63fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7c72:	f080 0001 	eor.w	r0, r0, #1
   d7c76:	b2c0      	uxtb	r0, r0
   d7c78:	e7d2      	b.n	d7c20 <pinAvailable+0x8>
   d7c7a:	3809      	subs	r0, #9
   d7c7c:	2801      	cmp	r0, #1
   d7c7e:	d8ee      	bhi.n	d7c5e <pinAvailable+0x46>
   d7c80:	f7ff fb6c 	bl	d735c <_Z22__fetch_global_Serial1v>
   d7c84:	7c00      	ldrb	r0, [r0, #16]
   d7c86:	f7fe fb61 	bl	d634c <hal_usart_is_enabled>
   d7c8a:	e7f2      	b.n	d7c72 <pinAvailable+0x5a>
   d7c8c:	2003e5a8 	.word	0x2003e5a8
   d7c90:	2003e5ac 	.word	0x2003e5ac

000d7c94 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c94:	2823      	cmp	r0, #35	; 0x23
{
   d7c96:	b538      	push	{r3, r4, r5, lr}
   d7c98:	4604      	mov	r4, r0
   d7c9a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c9c:	d80a      	bhi.n	d7cb4 <pinMode+0x20>
   d7c9e:	29ff      	cmp	r1, #255	; 0xff
   d7ca0:	d008      	beq.n	d7cb4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7ca2:	f7ff ffb9 	bl	d7c18 <pinAvailable>
   d7ca6:	b128      	cbz	r0, d7cb4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7ca8:	4629      	mov	r1, r5
   d7caa:	4620      	mov	r0, r4
}
   d7cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7cb0:	f7fe ba9c 	b.w	d61ec <HAL_Pin_Mode>
}
   d7cb4:	bd38      	pop	{r3, r4, r5, pc}

000d7cb6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7cb6:	b538      	push	{r3, r4, r5, lr}
   d7cb8:	4604      	mov	r4, r0
   d7cba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7cbc:	f7fe fa9e 	bl	d61fc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7cc0:	28ff      	cmp	r0, #255	; 0xff
   d7cc2:	d010      	beq.n	d7ce6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7cc4:	2806      	cmp	r0, #6
   d7cc6:	d804      	bhi.n	d7cd2 <digitalWrite+0x1c>
   d7cc8:	234d      	movs	r3, #77	; 0x4d
   d7cca:	fa23 f000 	lsr.w	r0, r3, r0
   d7cce:	07c3      	lsls	r3, r0, #31
   d7cd0:	d409      	bmi.n	d7ce6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7cd2:	4620      	mov	r0, r4
   d7cd4:	f7ff ffa0 	bl	d7c18 <pinAvailable>
   d7cd8:	b128      	cbz	r0, d7ce6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7cda:	4629      	mov	r1, r5
   d7cdc:	4620      	mov	r0, r4
}
   d7cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7ce2:	f7fe ba93 	b.w	d620c <HAL_GPIO_Write>
}
   d7ce6:	bd38      	pop	{r3, r4, r5, pc}

000d7ce8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7ce8:	b510      	push	{r4, lr}
   d7cea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7cec:	f7fe fa86 	bl	d61fc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7cf0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7cf2:	b2db      	uxtb	r3, r3
   d7cf4:	2b01      	cmp	r3, #1
   d7cf6:	d908      	bls.n	d7d0a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7cf8:	4620      	mov	r0, r4
   d7cfa:	f7ff ff8d 	bl	d7c18 <pinAvailable>
   d7cfe:	b120      	cbz	r0, d7d0a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7d00:	4620      	mov	r0, r4
}
   d7d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7d06:	f7fe ba89 	b.w	d621c <HAL_GPIO_Read>
}
   d7d0a:	2000      	movs	r0, #0
   d7d0c:	bd10      	pop	{r4, pc}

000d7d0e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d7d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d12:	4690      	mov	r8, r2
   d7d14:	461f      	mov	r7, r3
   d7d16:	2400      	movs	r4, #0
   d7d18:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d7d1a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d7d1c:	f1b8 0f00 	cmp.w	r8, #0
   d7d20:	d113      	bne.n	d7d4a <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d7d22:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7d26:	f001 0101 	and.w	r1, r1, #1
   d7d2a:	4630      	mov	r0, r6
   d7d2c:	f7ff ffc3 	bl	d7cb6 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d7d30:	2101      	movs	r1, #1
   d7d32:	4628      	mov	r0, r5
   d7d34:	f7ff ffbf 	bl	d7cb6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d7d38:	3401      	adds	r4, #1
   d7d3a:	2100      	movs	r1, #0
   d7d3c:	4628      	mov	r0, r5
   d7d3e:	f7ff ffba 	bl	d7cb6 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d7d42:	2c08      	cmp	r4, #8
   d7d44:	d1ea      	bne.n	d7d1c <shiftOut+0xe>
  }
}
   d7d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7d4a:	f1c4 0107 	rsb	r1, r4, #7
   d7d4e:	fa47 f101 	asr.w	r1, r7, r1
   d7d52:	e7e8      	b.n	d7d26 <shiftOut+0x18>

000d7d54 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7d54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7d56:	2300      	movs	r3, #0
   d7d58:	2520      	movs	r5, #32
   d7d5a:	8043      	strh	r3, [r0, #2]
   d7d5c:	2314      	movs	r3, #20
{
   d7d5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7d60:	8003      	strh	r3, [r0, #0]
   d7d62:	6085      	str	r5, [r0, #8]
   d7d64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d66:	4906      	ldr	r1, [pc, #24]	; (d7d80 <_Z17acquireWireBufferv+0x2c>)
   d7d68:	4628      	mov	r0, r5
   d7d6a:	f000 f83a 	bl	d7de2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d6e:	4904      	ldr	r1, [pc, #16]	; (d7d80 <_Z17acquireWireBufferv+0x2c>)
	};
   d7d70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d72:	4628      	mov	r0, r5
   d7d74:	f000 f835 	bl	d7de2 <_ZnajRKSt9nothrow_t>
	};
   d7d78:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7d7a:	4620      	mov	r0, r4
   d7d7c:	bd38      	pop	{r3, r4, r5, pc}
   d7d7e:	bf00      	nop
   d7d80:	000db1cc 	.word	0x000db1cc

000d7d84 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7d84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7d86:	4d0f      	ldr	r5, [pc, #60]	; (d7dc4 <_Z19__fetch_global_Wirev+0x40>)
   d7d88:	7829      	ldrb	r1, [r5, #0]
   d7d8a:	f3bf 8f5b 	dmb	ish
   d7d8e:	f011 0401 	ands.w	r4, r1, #1
{
   d7d92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7d94:	d113      	bne.n	d7dbe <_Z19__fetch_global_Wirev+0x3a>
   d7d96:	4628      	mov	r0, r5
   d7d98:	f7fc f98e 	bl	d40b8 <__cxa_guard_acquire>
   d7d9c:	b178      	cbz	r0, d7dbe <_Z19__fetch_global_Wirev+0x3a>
   d7d9e:	a801      	add	r0, sp, #4
   d7da0:	f7ff ffd8 	bl	d7d54 <_Z17acquireWireBufferv>
   d7da4:	aa01      	add	r2, sp, #4
   d7da6:	4621      	mov	r1, r4
   d7da8:	4807      	ldr	r0, [pc, #28]	; (d7dc8 <_Z19__fetch_global_Wirev+0x44>)
   d7daa:	f7ff fb2d 	bl	d7408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7dae:	4628      	mov	r0, r5
   d7db0:	f7fc f987 	bl	d40c2 <__cxa_guard_release>
   d7db4:	4a05      	ldr	r2, [pc, #20]	; (d7dcc <_Z19__fetch_global_Wirev+0x48>)
   d7db6:	4906      	ldr	r1, [pc, #24]	; (d7dd0 <_Z19__fetch_global_Wirev+0x4c>)
   d7db8:	4803      	ldr	r0, [pc, #12]	; (d7dc8 <_Z19__fetch_global_Wirev+0x44>)
   d7dba:	f000 f80b 	bl	d7dd4 <__aeabi_atexit>
	return wire;
}
   d7dbe:	4802      	ldr	r0, [pc, #8]	; (d7dc8 <_Z19__fetch_global_Wirev+0x44>)
   d7dc0:	b007      	add	sp, #28
   d7dc2:	bd30      	pop	{r4, r5, pc}
   d7dc4:	2003e7dc 	.word	0x2003e7dc
   d7dc8:	2003e7e0 	.word	0x2003e7e0
   d7dcc:	2003e3b8 	.word	0x2003e3b8
   d7dd0:	000d73b1 	.word	0x000d73b1

000d7dd4 <__aeabi_atexit>:
   d7dd4:	460b      	mov	r3, r1
   d7dd6:	4601      	mov	r1, r0
   d7dd8:	4618      	mov	r0, r3
   d7dda:	f000 be3d 	b.w	d8a58 <__cxa_atexit>

000d7dde <_ZdlPvj>:
   d7dde:	f7fc b95e 	b.w	d409e <_ZdlPv>

000d7de2 <_ZnajRKSt9nothrow_t>:
   d7de2:	f7fc b95a 	b.w	d409a <_Znaj>

000d7de6 <_ZSt25__throw_bad_function_callv>:
   d7de6:	b508      	push	{r3, lr}
   d7de8:	f7fe fcac 	bl	d6744 <abort>

000d7dec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7dec:	4901      	ldr	r1, [pc, #4]	; (d7df4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7dee:	f000 b8f9 	b.w	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7df2:	bf00      	nop
   d7df4:	000db1e8 	.word	0x000db1e8

000d7df8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7df8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7dfa:	2400      	movs	r4, #0
   d7dfc:	2310      	movs	r3, #16
   d7dfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7e02:	6803      	ldr	r3, [r0, #0]
   d7e04:	9400      	str	r4, [sp, #0]
   d7e06:	699e      	ldr	r6, [r3, #24]
   d7e08:	f88d 4004 	strb.w	r4, [sp, #4]
   d7e0c:	4615      	mov	r5, r2
   d7e0e:	466b      	mov	r3, sp
   d7e10:	6812      	ldr	r2, [r2, #0]
   d7e12:	47b0      	blx	r6
   d7e14:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7e18:	f003 0306 	and.w	r3, r3, #6
   d7e1c:	2b06      	cmp	r3, #6
   d7e1e:	bf03      	ittte	eq
   d7e20:	9b00      	ldreq	r3, [sp, #0]
   d7e22:	602b      	streq	r3, [r5, #0]
   d7e24:	2001      	moveq	r0, #1
   d7e26:	4620      	movne	r0, r4
   d7e28:	b004      	add	sp, #16
   d7e2a:	bd70      	pop	{r4, r5, r6, pc}

000d7e2c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7e2c:	9800      	ldr	r0, [sp, #0]
   d7e2e:	4290      	cmp	r0, r2
   d7e30:	bf14      	ite	ne
   d7e32:	2001      	movne	r0, #1
   d7e34:	2006      	moveq	r0, #6
   d7e36:	4770      	bx	lr

000d7e38 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7e38:	b510      	push	{r4, lr}
   d7e3a:	4b03      	ldr	r3, [pc, #12]	; (d7e48 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7e3c:	6003      	str	r3, [r0, #0]
   d7e3e:	4604      	mov	r4, r0
   d7e40:	f000 f8cd 	bl	d7fde <_ZNSt9type_infoD1Ev>
   d7e44:	4620      	mov	r0, r4
   d7e46:	bd10      	pop	{r4, pc}
   d7e48:	000db228 	.word	0x000db228

000d7e4c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7e4c:	b510      	push	{r4, lr}
   d7e4e:	4604      	mov	r4, r0
   d7e50:	f7ff fff2 	bl	d7e38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7e54:	4620      	mov	r0, r4
   d7e56:	2108      	movs	r1, #8
   d7e58:	f7ff ffc1 	bl	d7dde <_ZdlPvj>
   d7e5c:	4620      	mov	r0, r4
   d7e5e:	bd10      	pop	{r4, pc}

000d7e60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e64:	461f      	mov	r7, r3
   d7e66:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7e6a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7e6e:	4598      	cmp	r8, r3
   d7e70:	4606      	mov	r6, r0
   d7e72:	4615      	mov	r5, r2
   d7e74:	d107      	bne.n	d7e86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7e76:	9907      	ldr	r1, [sp, #28]
   d7e78:	f000 f8b4 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7e7c:	b118      	cbz	r0, d7e86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7e7e:	7165      	strb	r5, [r4, #5]
   d7e80:	2000      	movs	r0, #0
   d7e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e86:	4639      	mov	r1, r7
   d7e88:	4630      	mov	r0, r6
   d7e8a:	f000 f8ab 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7e8e:	2800      	cmp	r0, #0
   d7e90:	d0f6      	beq.n	d7e80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7e92:	2301      	movs	r3, #1
   d7e94:	f8c4 8000 	str.w	r8, [r4]
   d7e98:	7125      	strb	r5, [r4, #4]
   d7e9a:	71a3      	strb	r3, [r4, #6]
   d7e9c:	e7f0      	b.n	d7e80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7e9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7e9e:	b538      	push	{r3, r4, r5, lr}
   d7ea0:	4615      	mov	r5, r2
   d7ea2:	461c      	mov	r4, r3
   d7ea4:	f000 f89e 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7ea8:	b120      	cbz	r0, d7eb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7eaa:	2308      	movs	r3, #8
   d7eac:	60e3      	str	r3, [r4, #12]
   d7eae:	2306      	movs	r3, #6
   d7eb0:	6025      	str	r5, [r4, #0]
   d7eb2:	7123      	strb	r3, [r4, #4]
   d7eb4:	bd38      	pop	{r3, r4, r5, pc}

000d7eb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7eb8:	4605      	mov	r5, r0
   d7eba:	460c      	mov	r4, r1
   d7ebc:	9201      	str	r2, [sp, #4]
   d7ebe:	461e      	mov	r6, r3
   d7ec0:	f000 f890 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7ec4:	b950      	cbnz	r0, d7edc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7ec6:	2e03      	cmp	r6, #3
   d7ec8:	d808      	bhi.n	d7edc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7eca:	6823      	ldr	r3, [r4, #0]
   d7ecc:	9a01      	ldr	r2, [sp, #4]
   d7ece:	695b      	ldr	r3, [r3, #20]
   d7ed0:	4629      	mov	r1, r5
   d7ed2:	4620      	mov	r0, r4
   d7ed4:	b002      	add	sp, #8
   d7ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7eda:	4718      	bx	r3
   d7edc:	b002      	add	sp, #8
   d7ede:	bd70      	pop	{r4, r5, r6, pc}

000d7ee0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7ee0:	b510      	push	{r4, lr}
   d7ee2:	4b03      	ldr	r3, [pc, #12]	; (d7ef0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7ee4:	6003      	str	r3, [r0, #0]
   d7ee6:	4604      	mov	r4, r0
   d7ee8:	f7ff ffa6 	bl	d7e38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7eec:	4620      	mov	r0, r4
   d7eee:	bd10      	pop	{r4, pc}
   d7ef0:	000db288 	.word	0x000db288

000d7ef4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7ef4:	b510      	push	{r4, lr}
   d7ef6:	4604      	mov	r4, r0
   d7ef8:	f7ff fff2 	bl	d7ee0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7efc:	4620      	mov	r0, r4
   d7efe:	210c      	movs	r1, #12
   d7f00:	f7ff ff6d 	bl	d7dde <_ZdlPvj>
   d7f04:	4620      	mov	r0, r4
   d7f06:	bd10      	pop	{r4, pc}

000d7f08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7f0a:	9f08      	ldr	r7, [sp, #32]
   d7f0c:	4297      	cmp	r7, r2
   d7f0e:	4605      	mov	r5, r0
   d7f10:	460e      	mov	r6, r1
   d7f12:	4614      	mov	r4, r2
   d7f14:	d00a      	beq.n	d7f2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7f16:	68a8      	ldr	r0, [r5, #8]
   d7f18:	6802      	ldr	r2, [r0, #0]
   d7f1a:	9708      	str	r7, [sp, #32]
   d7f1c:	6a15      	ldr	r5, [r2, #32]
   d7f1e:	4631      	mov	r1, r6
   d7f20:	4622      	mov	r2, r4
   d7f22:	46ac      	mov	ip, r5
   d7f24:	b003      	add	sp, #12
   d7f26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7f2a:	4760      	bx	ip
   d7f2c:	4619      	mov	r1, r3
   d7f2e:	9301      	str	r3, [sp, #4]
   d7f30:	f000 f858 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7f34:	9b01      	ldr	r3, [sp, #4]
   d7f36:	2800      	cmp	r0, #0
   d7f38:	d0ed      	beq.n	d7f16 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7f3a:	2006      	movs	r0, #6
   d7f3c:	b003      	add	sp, #12
   d7f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7f40:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f44:	460d      	mov	r5, r1
   d7f46:	4619      	mov	r1, r3
   d7f48:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7f4c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7f50:	4681      	mov	r9, r0
   d7f52:	4617      	mov	r7, r2
   d7f54:	4698      	mov	r8, r3
   d7f56:	f000 f845 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7f5a:	b190      	cbz	r0, d7f82 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7f5c:	2d00      	cmp	r5, #0
   d7f5e:	6034      	str	r4, [r6, #0]
   d7f60:	7137      	strb	r7, [r6, #4]
   d7f62:	db09      	blt.n	d7f78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7f64:	1961      	adds	r1, r4, r5
   d7f66:	458a      	cmp	sl, r1
   d7f68:	bf0c      	ite	eq
   d7f6a:	2106      	moveq	r1, #6
   d7f6c:	2101      	movne	r1, #1
   d7f6e:	71b1      	strb	r1, [r6, #6]
   d7f70:	2000      	movs	r0, #0
   d7f72:	b001      	add	sp, #4
   d7f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f78:	3502      	adds	r5, #2
   d7f7a:	d1f9      	bne.n	d7f70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7f7c:	2301      	movs	r3, #1
   d7f7e:	71b3      	strb	r3, [r6, #6]
   d7f80:	e7f6      	b.n	d7f70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7f82:	4554      	cmp	r4, sl
   d7f84:	d106      	bne.n	d7f94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7f86:	4659      	mov	r1, fp
   d7f88:	4648      	mov	r0, r9
   d7f8a:	f000 f82b 	bl	d7fe4 <_ZNKSt9type_infoeqERKS_>
   d7f8e:	b108      	cbz	r0, d7f94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7f90:	7177      	strb	r7, [r6, #5]
   d7f92:	e7ed      	b.n	d7f70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7f94:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7f98:	6803      	ldr	r3, [r0, #0]
   d7f9a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7f9e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7fa2:	69dc      	ldr	r4, [r3, #28]
   d7fa4:	463a      	mov	r2, r7
   d7fa6:	4643      	mov	r3, r8
   d7fa8:	4629      	mov	r1, r5
   d7faa:	46a4      	mov	ip, r4
   d7fac:	b001      	add	sp, #4
   d7fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fb2:	4760      	bx	ip

000d7fb4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7fb8:	4607      	mov	r7, r0
   d7fba:	460c      	mov	r4, r1
   d7fbc:	4615      	mov	r5, r2
   d7fbe:	461e      	mov	r6, r3
   d7fc0:	f7ff ff6d 	bl	d7e9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7fc4:	b948      	cbnz	r0, d7fda <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7fc6:	68b8      	ldr	r0, [r7, #8]
   d7fc8:	6803      	ldr	r3, [r0, #0]
   d7fca:	699f      	ldr	r7, [r3, #24]
   d7fcc:	462a      	mov	r2, r5
   d7fce:	4633      	mov	r3, r6
   d7fd0:	4621      	mov	r1, r4
   d7fd2:	46bc      	mov	ip, r7
   d7fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7fd8:	4760      	bx	ip
   d7fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7fde <_ZNSt9type_infoD1Ev>:
   d7fde:	4770      	bx	lr

000d7fe0 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7fe0:	2000      	movs	r0, #0
   d7fe2:	4770      	bx	lr

000d7fe4 <_ZNKSt9type_infoeqERKS_>:
   d7fe4:	4281      	cmp	r1, r0
   d7fe6:	b508      	push	{r3, lr}
   d7fe8:	d00e      	beq.n	d8008 <_ZNKSt9type_infoeqERKS_+0x24>
   d7fea:	6840      	ldr	r0, [r0, #4]
   d7fec:	7803      	ldrb	r3, [r0, #0]
   d7fee:	2b2a      	cmp	r3, #42	; 0x2a
   d7ff0:	d00c      	beq.n	d800c <_ZNKSt9type_infoeqERKS_+0x28>
   d7ff2:	6849      	ldr	r1, [r1, #4]
   d7ff4:	780b      	ldrb	r3, [r1, #0]
   d7ff6:	2b2a      	cmp	r3, #42	; 0x2a
   d7ff8:	bf08      	it	eq
   d7ffa:	3101      	addeq	r1, #1
   d7ffc:	f000 fdb0 	bl	d8b60 <strcmp>
   d8000:	fab0 f080 	clz	r0, r0
   d8004:	0940      	lsrs	r0, r0, #5
   d8006:	bd08      	pop	{r3, pc}
   d8008:	2001      	movs	r0, #1
   d800a:	e7fc      	b.n	d8006 <_ZNKSt9type_infoeqERKS_+0x22>
   d800c:	2000      	movs	r0, #0
   d800e:	e7fa      	b.n	d8006 <_ZNKSt9type_infoeqERKS_+0x22>

000d8010 <nan>:
   d8010:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8018 <nan+0x8>
   d8014:	4770      	bx	lr
   d8016:	bf00      	nop
   d8018:	00000000 	.word	0x00000000
   d801c:	7ff80000 	.word	0x7ff80000

000d8020 <__aeabi_drsub>:
   d8020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8024:	e002      	b.n	d802c <__adddf3>
   d8026:	bf00      	nop

000d8028 <__aeabi_dsub>:
   d8028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d802c <__adddf3>:
   d802c:	b530      	push	{r4, r5, lr}
   d802e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8036:	ea94 0f05 	teq	r4, r5
   d803a:	bf08      	it	eq
   d803c:	ea90 0f02 	teqeq	r0, r2
   d8040:	bf1f      	itttt	ne
   d8042:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8046:	ea55 0c02 	orrsne.w	ip, r5, r2
   d804a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d804e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8052:	f000 80e2 	beq.w	d821a <__adddf3+0x1ee>
   d8056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d805a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d805e:	bfb8      	it	lt
   d8060:	426d      	neglt	r5, r5
   d8062:	dd0c      	ble.n	d807e <__adddf3+0x52>
   d8064:	442c      	add	r4, r5
   d8066:	ea80 0202 	eor.w	r2, r0, r2
   d806a:	ea81 0303 	eor.w	r3, r1, r3
   d806e:	ea82 0000 	eor.w	r0, r2, r0
   d8072:	ea83 0101 	eor.w	r1, r3, r1
   d8076:	ea80 0202 	eor.w	r2, r0, r2
   d807a:	ea81 0303 	eor.w	r3, r1, r3
   d807e:	2d36      	cmp	r5, #54	; 0x36
   d8080:	bf88      	it	hi
   d8082:	bd30      	pophi	{r4, r5, pc}
   d8084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d808c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8094:	d002      	beq.n	d809c <__adddf3+0x70>
   d8096:	4240      	negs	r0, r0
   d8098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d809c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d80a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d80a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d80a8:	d002      	beq.n	d80b0 <__adddf3+0x84>
   d80aa:	4252      	negs	r2, r2
   d80ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d80b0:	ea94 0f05 	teq	r4, r5
   d80b4:	f000 80a7 	beq.w	d8206 <__adddf3+0x1da>
   d80b8:	f1a4 0401 	sub.w	r4, r4, #1
   d80bc:	f1d5 0e20 	rsbs	lr, r5, #32
   d80c0:	db0d      	blt.n	d80de <__adddf3+0xb2>
   d80c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d80c6:	fa22 f205 	lsr.w	r2, r2, r5
   d80ca:	1880      	adds	r0, r0, r2
   d80cc:	f141 0100 	adc.w	r1, r1, #0
   d80d0:	fa03 f20e 	lsl.w	r2, r3, lr
   d80d4:	1880      	adds	r0, r0, r2
   d80d6:	fa43 f305 	asr.w	r3, r3, r5
   d80da:	4159      	adcs	r1, r3
   d80dc:	e00e      	b.n	d80fc <__adddf3+0xd0>
   d80de:	f1a5 0520 	sub.w	r5, r5, #32
   d80e2:	f10e 0e20 	add.w	lr, lr, #32
   d80e6:	2a01      	cmp	r2, #1
   d80e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d80ec:	bf28      	it	cs
   d80ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d80f2:	fa43 f305 	asr.w	r3, r3, r5
   d80f6:	18c0      	adds	r0, r0, r3
   d80f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d80fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8100:	d507      	bpl.n	d8112 <__adddf3+0xe6>
   d8102:	f04f 0e00 	mov.w	lr, #0
   d8106:	f1dc 0c00 	rsbs	ip, ip, #0
   d810a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d810e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8116:	d31b      	bcc.n	d8150 <__adddf3+0x124>
   d8118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d811c:	d30c      	bcc.n	d8138 <__adddf3+0x10c>
   d811e:	0849      	lsrs	r1, r1, #1
   d8120:	ea5f 0030 	movs.w	r0, r0, rrx
   d8124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8128:	f104 0401 	add.w	r4, r4, #1
   d812c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8134:	f080 809a 	bcs.w	d826c <__adddf3+0x240>
   d8138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d813c:	bf08      	it	eq
   d813e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8142:	f150 0000 	adcs.w	r0, r0, #0
   d8146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d814a:	ea41 0105 	orr.w	r1, r1, r5
   d814e:	bd30      	pop	{r4, r5, pc}
   d8150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8154:	4140      	adcs	r0, r0
   d8156:	eb41 0101 	adc.w	r1, r1, r1
   d815a:	3c01      	subs	r4, #1
   d815c:	bf28      	it	cs
   d815e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8162:	d2e9      	bcs.n	d8138 <__adddf3+0x10c>
   d8164:	f091 0f00 	teq	r1, #0
   d8168:	bf04      	itt	eq
   d816a:	4601      	moveq	r1, r0
   d816c:	2000      	moveq	r0, #0
   d816e:	fab1 f381 	clz	r3, r1
   d8172:	bf08      	it	eq
   d8174:	3320      	addeq	r3, #32
   d8176:	f1a3 030b 	sub.w	r3, r3, #11
   d817a:	f1b3 0220 	subs.w	r2, r3, #32
   d817e:	da0c      	bge.n	d819a <__adddf3+0x16e>
   d8180:	320c      	adds	r2, #12
   d8182:	dd08      	ble.n	d8196 <__adddf3+0x16a>
   d8184:	f102 0c14 	add.w	ip, r2, #20
   d8188:	f1c2 020c 	rsb	r2, r2, #12
   d818c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8190:	fa21 f102 	lsr.w	r1, r1, r2
   d8194:	e00c      	b.n	d81b0 <__adddf3+0x184>
   d8196:	f102 0214 	add.w	r2, r2, #20
   d819a:	bfd8      	it	le
   d819c:	f1c2 0c20 	rsble	ip, r2, #32
   d81a0:	fa01 f102 	lsl.w	r1, r1, r2
   d81a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d81a8:	bfdc      	itt	le
   d81aa:	ea41 010c 	orrle.w	r1, r1, ip
   d81ae:	4090      	lslle	r0, r2
   d81b0:	1ae4      	subs	r4, r4, r3
   d81b2:	bfa2      	ittt	ge
   d81b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d81b8:	4329      	orrge	r1, r5
   d81ba:	bd30      	popge	{r4, r5, pc}
   d81bc:	ea6f 0404 	mvn.w	r4, r4
   d81c0:	3c1f      	subs	r4, #31
   d81c2:	da1c      	bge.n	d81fe <__adddf3+0x1d2>
   d81c4:	340c      	adds	r4, #12
   d81c6:	dc0e      	bgt.n	d81e6 <__adddf3+0x1ba>
   d81c8:	f104 0414 	add.w	r4, r4, #20
   d81cc:	f1c4 0220 	rsb	r2, r4, #32
   d81d0:	fa20 f004 	lsr.w	r0, r0, r4
   d81d4:	fa01 f302 	lsl.w	r3, r1, r2
   d81d8:	ea40 0003 	orr.w	r0, r0, r3
   d81dc:	fa21 f304 	lsr.w	r3, r1, r4
   d81e0:	ea45 0103 	orr.w	r1, r5, r3
   d81e4:	bd30      	pop	{r4, r5, pc}
   d81e6:	f1c4 040c 	rsb	r4, r4, #12
   d81ea:	f1c4 0220 	rsb	r2, r4, #32
   d81ee:	fa20 f002 	lsr.w	r0, r0, r2
   d81f2:	fa01 f304 	lsl.w	r3, r1, r4
   d81f6:	ea40 0003 	orr.w	r0, r0, r3
   d81fa:	4629      	mov	r1, r5
   d81fc:	bd30      	pop	{r4, r5, pc}
   d81fe:	fa21 f004 	lsr.w	r0, r1, r4
   d8202:	4629      	mov	r1, r5
   d8204:	bd30      	pop	{r4, r5, pc}
   d8206:	f094 0f00 	teq	r4, #0
   d820a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d820e:	bf06      	itte	eq
   d8210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8214:	3401      	addeq	r4, #1
   d8216:	3d01      	subne	r5, #1
   d8218:	e74e      	b.n	d80b8 <__adddf3+0x8c>
   d821a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d821e:	bf18      	it	ne
   d8220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8224:	d029      	beq.n	d827a <__adddf3+0x24e>
   d8226:	ea94 0f05 	teq	r4, r5
   d822a:	bf08      	it	eq
   d822c:	ea90 0f02 	teqeq	r0, r2
   d8230:	d005      	beq.n	d823e <__adddf3+0x212>
   d8232:	ea54 0c00 	orrs.w	ip, r4, r0
   d8236:	bf04      	itt	eq
   d8238:	4619      	moveq	r1, r3
   d823a:	4610      	moveq	r0, r2
   d823c:	bd30      	pop	{r4, r5, pc}
   d823e:	ea91 0f03 	teq	r1, r3
   d8242:	bf1e      	ittt	ne
   d8244:	2100      	movne	r1, #0
   d8246:	2000      	movne	r0, #0
   d8248:	bd30      	popne	{r4, r5, pc}
   d824a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d824e:	d105      	bne.n	d825c <__adddf3+0x230>
   d8250:	0040      	lsls	r0, r0, #1
   d8252:	4149      	adcs	r1, r1
   d8254:	bf28      	it	cs
   d8256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d825a:	bd30      	pop	{r4, r5, pc}
   d825c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8260:	bf3c      	itt	cc
   d8262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8266:	bd30      	popcc	{r4, r5, pc}
   d8268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d826c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8274:	f04f 0000 	mov.w	r0, #0
   d8278:	bd30      	pop	{r4, r5, pc}
   d827a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d827e:	bf1a      	itte	ne
   d8280:	4619      	movne	r1, r3
   d8282:	4610      	movne	r0, r2
   d8284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8288:	bf1c      	itt	ne
   d828a:	460b      	movne	r3, r1
   d828c:	4602      	movne	r2, r0
   d828e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8292:	bf06      	itte	eq
   d8294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8298:	ea91 0f03 	teqeq	r1, r3
   d829c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d82a0:	bd30      	pop	{r4, r5, pc}
   d82a2:	bf00      	nop

000d82a4 <__aeabi_ui2d>:
   d82a4:	f090 0f00 	teq	r0, #0
   d82a8:	bf04      	itt	eq
   d82aa:	2100      	moveq	r1, #0
   d82ac:	4770      	bxeq	lr
   d82ae:	b530      	push	{r4, r5, lr}
   d82b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82b8:	f04f 0500 	mov.w	r5, #0
   d82bc:	f04f 0100 	mov.w	r1, #0
   d82c0:	e750      	b.n	d8164 <__adddf3+0x138>
   d82c2:	bf00      	nop

000d82c4 <__aeabi_i2d>:
   d82c4:	f090 0f00 	teq	r0, #0
   d82c8:	bf04      	itt	eq
   d82ca:	2100      	moveq	r1, #0
   d82cc:	4770      	bxeq	lr
   d82ce:	b530      	push	{r4, r5, lr}
   d82d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d82dc:	bf48      	it	mi
   d82de:	4240      	negmi	r0, r0
   d82e0:	f04f 0100 	mov.w	r1, #0
   d82e4:	e73e      	b.n	d8164 <__adddf3+0x138>
   d82e6:	bf00      	nop

000d82e8 <__aeabi_f2d>:
   d82e8:	0042      	lsls	r2, r0, #1
   d82ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d82ee:	ea4f 0131 	mov.w	r1, r1, rrx
   d82f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d82f6:	bf1f      	itttt	ne
   d82f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d82fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8304:	4770      	bxne	lr
   d8306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d830a:	bf08      	it	eq
   d830c:	4770      	bxeq	lr
   d830e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8312:	bf04      	itt	eq
   d8314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8318:	4770      	bxeq	lr
   d831a:	b530      	push	{r4, r5, lr}
   d831c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8328:	e71c      	b.n	d8164 <__adddf3+0x138>
   d832a:	bf00      	nop

000d832c <__aeabi_ul2d>:
   d832c:	ea50 0201 	orrs.w	r2, r0, r1
   d8330:	bf08      	it	eq
   d8332:	4770      	bxeq	lr
   d8334:	b530      	push	{r4, r5, lr}
   d8336:	f04f 0500 	mov.w	r5, #0
   d833a:	e00a      	b.n	d8352 <__aeabi_l2d+0x16>

000d833c <__aeabi_l2d>:
   d833c:	ea50 0201 	orrs.w	r2, r0, r1
   d8340:	bf08      	it	eq
   d8342:	4770      	bxeq	lr
   d8344:	b530      	push	{r4, r5, lr}
   d8346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d834a:	d502      	bpl.n	d8352 <__aeabi_l2d+0x16>
   d834c:	4240      	negs	r0, r0
   d834e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d835a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d835e:	f43f aed8 	beq.w	d8112 <__adddf3+0xe6>
   d8362:	f04f 0203 	mov.w	r2, #3
   d8366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d836a:	bf18      	it	ne
   d836c:	3203      	addne	r2, #3
   d836e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8372:	bf18      	it	ne
   d8374:	3203      	addne	r2, #3
   d8376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d837a:	f1c2 0320 	rsb	r3, r2, #32
   d837e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8382:	fa20 f002 	lsr.w	r0, r0, r2
   d8386:	fa01 fe03 	lsl.w	lr, r1, r3
   d838a:	ea40 000e 	orr.w	r0, r0, lr
   d838e:	fa21 f102 	lsr.w	r1, r1, r2
   d8392:	4414      	add	r4, r2
   d8394:	e6bd      	b.n	d8112 <__adddf3+0xe6>
   d8396:	bf00      	nop

000d8398 <__aeabi_dmul>:
   d8398:	b570      	push	{r4, r5, r6, lr}
   d839a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d839e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d83a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d83a6:	bf1d      	ittte	ne
   d83a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d83ac:	ea94 0f0c 	teqne	r4, ip
   d83b0:	ea95 0f0c 	teqne	r5, ip
   d83b4:	f000 f8de 	bleq	d8574 <__aeabi_dmul+0x1dc>
   d83b8:	442c      	add	r4, r5
   d83ba:	ea81 0603 	eor.w	r6, r1, r3
   d83be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d83c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d83c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d83ca:	bf18      	it	ne
   d83cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d83d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83d8:	d038      	beq.n	d844c <__aeabi_dmul+0xb4>
   d83da:	fba0 ce02 	umull	ip, lr, r0, r2
   d83de:	f04f 0500 	mov.w	r5, #0
   d83e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d83e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d83ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d83ee:	f04f 0600 	mov.w	r6, #0
   d83f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d83f6:	f09c 0f00 	teq	ip, #0
   d83fa:	bf18      	it	ne
   d83fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d840c:	d204      	bcs.n	d8418 <__aeabi_dmul+0x80>
   d840e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8412:	416d      	adcs	r5, r5
   d8414:	eb46 0606 	adc.w	r6, r6, r6
   d8418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d841c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d842c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8430:	bf88      	it	hi
   d8432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8436:	d81e      	bhi.n	d8476 <__aeabi_dmul+0xde>
   d8438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d843c:	bf08      	it	eq
   d843e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8442:	f150 0000 	adcs.w	r0, r0, #0
   d8446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d844a:	bd70      	pop	{r4, r5, r6, pc}
   d844c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8450:	ea46 0101 	orr.w	r1, r6, r1
   d8454:	ea40 0002 	orr.w	r0, r0, r2
   d8458:	ea81 0103 	eor.w	r1, r1, r3
   d845c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8460:	bfc2      	ittt	gt
   d8462:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d846a:	bd70      	popgt	{r4, r5, r6, pc}
   d846c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8470:	f04f 0e00 	mov.w	lr, #0
   d8474:	3c01      	subs	r4, #1
   d8476:	f300 80ab 	bgt.w	d85d0 <__aeabi_dmul+0x238>
   d847a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d847e:	bfde      	ittt	le
   d8480:	2000      	movle	r0, #0
   d8482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8486:	bd70      	pople	{r4, r5, r6, pc}
   d8488:	f1c4 0400 	rsb	r4, r4, #0
   d848c:	3c20      	subs	r4, #32
   d848e:	da35      	bge.n	d84fc <__aeabi_dmul+0x164>
   d8490:	340c      	adds	r4, #12
   d8492:	dc1b      	bgt.n	d84cc <__aeabi_dmul+0x134>
   d8494:	f104 0414 	add.w	r4, r4, #20
   d8498:	f1c4 0520 	rsb	r5, r4, #32
   d849c:	fa00 f305 	lsl.w	r3, r0, r5
   d84a0:	fa20 f004 	lsr.w	r0, r0, r4
   d84a4:	fa01 f205 	lsl.w	r2, r1, r5
   d84a8:	ea40 0002 	orr.w	r0, r0, r2
   d84ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d84b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d84b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84b8:	fa21 f604 	lsr.w	r6, r1, r4
   d84bc:	eb42 0106 	adc.w	r1, r2, r6
   d84c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84c4:	bf08      	it	eq
   d84c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84ca:	bd70      	pop	{r4, r5, r6, pc}
   d84cc:	f1c4 040c 	rsb	r4, r4, #12
   d84d0:	f1c4 0520 	rsb	r5, r4, #32
   d84d4:	fa00 f304 	lsl.w	r3, r0, r4
   d84d8:	fa20 f005 	lsr.w	r0, r0, r5
   d84dc:	fa01 f204 	lsl.w	r2, r1, r4
   d84e0:	ea40 0002 	orr.w	r0, r0, r2
   d84e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84ec:	f141 0100 	adc.w	r1, r1, #0
   d84f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84f4:	bf08      	it	eq
   d84f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84fa:	bd70      	pop	{r4, r5, r6, pc}
   d84fc:	f1c4 0520 	rsb	r5, r4, #32
   d8500:	fa00 f205 	lsl.w	r2, r0, r5
   d8504:	ea4e 0e02 	orr.w	lr, lr, r2
   d8508:	fa20 f304 	lsr.w	r3, r0, r4
   d850c:	fa01 f205 	lsl.w	r2, r1, r5
   d8510:	ea43 0302 	orr.w	r3, r3, r2
   d8514:	fa21 f004 	lsr.w	r0, r1, r4
   d8518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d851c:	fa21 f204 	lsr.w	r2, r1, r4
   d8520:	ea20 0002 	bic.w	r0, r0, r2
   d8524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d852c:	bf08      	it	eq
   d852e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8532:	bd70      	pop	{r4, r5, r6, pc}
   d8534:	f094 0f00 	teq	r4, #0
   d8538:	d10f      	bne.n	d855a <__aeabi_dmul+0x1c2>
   d853a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d853e:	0040      	lsls	r0, r0, #1
   d8540:	eb41 0101 	adc.w	r1, r1, r1
   d8544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8548:	bf08      	it	eq
   d854a:	3c01      	subeq	r4, #1
   d854c:	d0f7      	beq.n	d853e <__aeabi_dmul+0x1a6>
   d854e:	ea41 0106 	orr.w	r1, r1, r6
   d8552:	f095 0f00 	teq	r5, #0
   d8556:	bf18      	it	ne
   d8558:	4770      	bxne	lr
   d855a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d855e:	0052      	lsls	r2, r2, #1
   d8560:	eb43 0303 	adc.w	r3, r3, r3
   d8564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8568:	bf08      	it	eq
   d856a:	3d01      	subeq	r5, #1
   d856c:	d0f7      	beq.n	d855e <__aeabi_dmul+0x1c6>
   d856e:	ea43 0306 	orr.w	r3, r3, r6
   d8572:	4770      	bx	lr
   d8574:	ea94 0f0c 	teq	r4, ip
   d8578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d857c:	bf18      	it	ne
   d857e:	ea95 0f0c 	teqne	r5, ip
   d8582:	d00c      	beq.n	d859e <__aeabi_dmul+0x206>
   d8584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8588:	bf18      	it	ne
   d858a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d858e:	d1d1      	bne.n	d8534 <__aeabi_dmul+0x19c>
   d8590:	ea81 0103 	eor.w	r1, r1, r3
   d8594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8598:	f04f 0000 	mov.w	r0, #0
   d859c:	bd70      	pop	{r4, r5, r6, pc}
   d859e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85a2:	bf06      	itte	eq
   d85a4:	4610      	moveq	r0, r2
   d85a6:	4619      	moveq	r1, r3
   d85a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85ac:	d019      	beq.n	d85e2 <__aeabi_dmul+0x24a>
   d85ae:	ea94 0f0c 	teq	r4, ip
   d85b2:	d102      	bne.n	d85ba <__aeabi_dmul+0x222>
   d85b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d85b8:	d113      	bne.n	d85e2 <__aeabi_dmul+0x24a>
   d85ba:	ea95 0f0c 	teq	r5, ip
   d85be:	d105      	bne.n	d85cc <__aeabi_dmul+0x234>
   d85c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d85c4:	bf1c      	itt	ne
   d85c6:	4610      	movne	r0, r2
   d85c8:	4619      	movne	r1, r3
   d85ca:	d10a      	bne.n	d85e2 <__aeabi_dmul+0x24a>
   d85cc:	ea81 0103 	eor.w	r1, r1, r3
   d85d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85dc:	f04f 0000 	mov.w	r0, #0
   d85e0:	bd70      	pop	{r4, r5, r6, pc}
   d85e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d85ea:	bd70      	pop	{r4, r5, r6, pc}

000d85ec <__aeabi_ddiv>:
   d85ec:	b570      	push	{r4, r5, r6, lr}
   d85ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85fa:	bf1d      	ittte	ne
   d85fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8600:	ea94 0f0c 	teqne	r4, ip
   d8604:	ea95 0f0c 	teqne	r5, ip
   d8608:	f000 f8a7 	bleq	d875a <__aeabi_ddiv+0x16e>
   d860c:	eba4 0405 	sub.w	r4, r4, r5
   d8610:	ea81 0e03 	eor.w	lr, r1, r3
   d8614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d861c:	f000 8088 	beq.w	d8730 <__aeabi_ddiv+0x144>
   d8620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d862c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d863c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8644:	429d      	cmp	r5, r3
   d8646:	bf08      	it	eq
   d8648:	4296      	cmpeq	r6, r2
   d864a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d864e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8652:	d202      	bcs.n	d865a <__aeabi_ddiv+0x6e>
   d8654:	085b      	lsrs	r3, r3, #1
   d8656:	ea4f 0232 	mov.w	r2, r2, rrx
   d865a:	1ab6      	subs	r6, r6, r2
   d865c:	eb65 0503 	sbc.w	r5, r5, r3
   d8660:	085b      	lsrs	r3, r3, #1
   d8662:	ea4f 0232 	mov.w	r2, r2, rrx
   d8666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d866a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d866e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8672:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8676:	bf22      	ittt	cs
   d8678:	1ab6      	subcs	r6, r6, r2
   d867a:	4675      	movcs	r5, lr
   d867c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8680:	085b      	lsrs	r3, r3, #1
   d8682:	ea4f 0232 	mov.w	r2, r2, rrx
   d8686:	ebb6 0e02 	subs.w	lr, r6, r2
   d868a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d868e:	bf22      	ittt	cs
   d8690:	1ab6      	subcs	r6, r6, r2
   d8692:	4675      	movcs	r5, lr
   d8694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8698:	085b      	lsrs	r3, r3, #1
   d869a:	ea4f 0232 	mov.w	r2, r2, rrx
   d869e:	ebb6 0e02 	subs.w	lr, r6, r2
   d86a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86a6:	bf22      	ittt	cs
   d86a8:	1ab6      	subcs	r6, r6, r2
   d86aa:	4675      	movcs	r5, lr
   d86ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d86b0:	085b      	lsrs	r3, r3, #1
   d86b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d86ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86be:	bf22      	ittt	cs
   d86c0:	1ab6      	subcs	r6, r6, r2
   d86c2:	4675      	movcs	r5, lr
   d86c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d86c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d86cc:	d018      	beq.n	d8700 <__aeabi_ddiv+0x114>
   d86ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d86d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d86d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d86da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d86de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d86e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d86e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d86ea:	d1c0      	bne.n	d866e <__aeabi_ddiv+0x82>
   d86ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86f0:	d10b      	bne.n	d870a <__aeabi_ddiv+0x11e>
   d86f2:	ea41 0100 	orr.w	r1, r1, r0
   d86f6:	f04f 0000 	mov.w	r0, #0
   d86fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d86fe:	e7b6      	b.n	d866e <__aeabi_ddiv+0x82>
   d8700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8704:	bf04      	itt	eq
   d8706:	4301      	orreq	r1, r0
   d8708:	2000      	moveq	r0, #0
   d870a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d870e:	bf88      	it	hi
   d8710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8714:	f63f aeaf 	bhi.w	d8476 <__aeabi_dmul+0xde>
   d8718:	ebb5 0c03 	subs.w	ip, r5, r3
   d871c:	bf04      	itt	eq
   d871e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8726:	f150 0000 	adcs.w	r0, r0, #0
   d872a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d872e:	bd70      	pop	{r4, r5, r6, pc}
   d8730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d873c:	bfc2      	ittt	gt
   d873e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8746:	bd70      	popgt	{r4, r5, r6, pc}
   d8748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d874c:	f04f 0e00 	mov.w	lr, #0
   d8750:	3c01      	subs	r4, #1
   d8752:	e690      	b.n	d8476 <__aeabi_dmul+0xde>
   d8754:	ea45 0e06 	orr.w	lr, r5, r6
   d8758:	e68d      	b.n	d8476 <__aeabi_dmul+0xde>
   d875a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d875e:	ea94 0f0c 	teq	r4, ip
   d8762:	bf08      	it	eq
   d8764:	ea95 0f0c 	teqeq	r5, ip
   d8768:	f43f af3b 	beq.w	d85e2 <__aeabi_dmul+0x24a>
   d876c:	ea94 0f0c 	teq	r4, ip
   d8770:	d10a      	bne.n	d8788 <__aeabi_ddiv+0x19c>
   d8772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8776:	f47f af34 	bne.w	d85e2 <__aeabi_dmul+0x24a>
   d877a:	ea95 0f0c 	teq	r5, ip
   d877e:	f47f af25 	bne.w	d85cc <__aeabi_dmul+0x234>
   d8782:	4610      	mov	r0, r2
   d8784:	4619      	mov	r1, r3
   d8786:	e72c      	b.n	d85e2 <__aeabi_dmul+0x24a>
   d8788:	ea95 0f0c 	teq	r5, ip
   d878c:	d106      	bne.n	d879c <__aeabi_ddiv+0x1b0>
   d878e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8792:	f43f aefd 	beq.w	d8590 <__aeabi_dmul+0x1f8>
   d8796:	4610      	mov	r0, r2
   d8798:	4619      	mov	r1, r3
   d879a:	e722      	b.n	d85e2 <__aeabi_dmul+0x24a>
   d879c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87a0:	bf18      	it	ne
   d87a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87a6:	f47f aec5 	bne.w	d8534 <__aeabi_dmul+0x19c>
   d87aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d87ae:	f47f af0d 	bne.w	d85cc <__aeabi_dmul+0x234>
   d87b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d87b6:	f47f aeeb 	bne.w	d8590 <__aeabi_dmul+0x1f8>
   d87ba:	e712      	b.n	d85e2 <__aeabi_dmul+0x24a>

000d87bc <__gedf2>:
   d87bc:	f04f 3cff 	mov.w	ip, #4294967295
   d87c0:	e006      	b.n	d87d0 <__cmpdf2+0x4>
   d87c2:	bf00      	nop

000d87c4 <__ledf2>:
   d87c4:	f04f 0c01 	mov.w	ip, #1
   d87c8:	e002      	b.n	d87d0 <__cmpdf2+0x4>
   d87ca:	bf00      	nop

000d87cc <__cmpdf2>:
   d87cc:	f04f 0c01 	mov.w	ip, #1
   d87d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d87d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d87d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d87e0:	bf18      	it	ne
   d87e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d87e6:	d01b      	beq.n	d8820 <__cmpdf2+0x54>
   d87e8:	b001      	add	sp, #4
   d87ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d87ee:	bf0c      	ite	eq
   d87f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d87f4:	ea91 0f03 	teqne	r1, r3
   d87f8:	bf02      	ittt	eq
   d87fa:	ea90 0f02 	teqeq	r0, r2
   d87fe:	2000      	moveq	r0, #0
   d8800:	4770      	bxeq	lr
   d8802:	f110 0f00 	cmn.w	r0, #0
   d8806:	ea91 0f03 	teq	r1, r3
   d880a:	bf58      	it	pl
   d880c:	4299      	cmppl	r1, r3
   d880e:	bf08      	it	eq
   d8810:	4290      	cmpeq	r0, r2
   d8812:	bf2c      	ite	cs
   d8814:	17d8      	asrcs	r0, r3, #31
   d8816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d881a:	f040 0001 	orr.w	r0, r0, #1
   d881e:	4770      	bx	lr
   d8820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8828:	d102      	bne.n	d8830 <__cmpdf2+0x64>
   d882a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d882e:	d107      	bne.n	d8840 <__cmpdf2+0x74>
   d8830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8838:	d1d6      	bne.n	d87e8 <__cmpdf2+0x1c>
   d883a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d883e:	d0d3      	beq.n	d87e8 <__cmpdf2+0x1c>
   d8840:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8844:	4770      	bx	lr
   d8846:	bf00      	nop

000d8848 <__aeabi_cdrcmple>:
   d8848:	4684      	mov	ip, r0
   d884a:	4610      	mov	r0, r2
   d884c:	4662      	mov	r2, ip
   d884e:	468c      	mov	ip, r1
   d8850:	4619      	mov	r1, r3
   d8852:	4663      	mov	r3, ip
   d8854:	e000      	b.n	d8858 <__aeabi_cdcmpeq>
   d8856:	bf00      	nop

000d8858 <__aeabi_cdcmpeq>:
   d8858:	b501      	push	{r0, lr}
   d885a:	f7ff ffb7 	bl	d87cc <__cmpdf2>
   d885e:	2800      	cmp	r0, #0
   d8860:	bf48      	it	mi
   d8862:	f110 0f00 	cmnmi.w	r0, #0
   d8866:	bd01      	pop	{r0, pc}

000d8868 <__aeabi_dcmpeq>:
   d8868:	f84d ed08 	str.w	lr, [sp, #-8]!
   d886c:	f7ff fff4 	bl	d8858 <__aeabi_cdcmpeq>
   d8870:	bf0c      	ite	eq
   d8872:	2001      	moveq	r0, #1
   d8874:	2000      	movne	r0, #0
   d8876:	f85d fb08 	ldr.w	pc, [sp], #8
   d887a:	bf00      	nop

000d887c <__aeabi_dcmplt>:
   d887c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8880:	f7ff ffea 	bl	d8858 <__aeabi_cdcmpeq>
   d8884:	bf34      	ite	cc
   d8886:	2001      	movcc	r0, #1
   d8888:	2000      	movcs	r0, #0
   d888a:	f85d fb08 	ldr.w	pc, [sp], #8
   d888e:	bf00      	nop

000d8890 <__aeabi_dcmple>:
   d8890:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8894:	f7ff ffe0 	bl	d8858 <__aeabi_cdcmpeq>
   d8898:	bf94      	ite	ls
   d889a:	2001      	movls	r0, #1
   d889c:	2000      	movhi	r0, #0
   d889e:	f85d fb08 	ldr.w	pc, [sp], #8
   d88a2:	bf00      	nop

000d88a4 <__aeabi_dcmpge>:
   d88a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88a8:	f7ff ffce 	bl	d8848 <__aeabi_cdrcmple>
   d88ac:	bf94      	ite	ls
   d88ae:	2001      	movls	r0, #1
   d88b0:	2000      	movhi	r0, #0
   d88b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d88b6:	bf00      	nop

000d88b8 <__aeabi_dcmpgt>:
   d88b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88bc:	f7ff ffc4 	bl	d8848 <__aeabi_cdrcmple>
   d88c0:	bf34      	ite	cc
   d88c2:	2001      	movcc	r0, #1
   d88c4:	2000      	movcs	r0, #0
   d88c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d88ca:	bf00      	nop

000d88cc <__aeabi_d2uiz>:
   d88cc:	004a      	lsls	r2, r1, #1
   d88ce:	d211      	bcs.n	d88f4 <__aeabi_d2uiz+0x28>
   d88d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d88d4:	d211      	bcs.n	d88fa <__aeabi_d2uiz+0x2e>
   d88d6:	d50d      	bpl.n	d88f4 <__aeabi_d2uiz+0x28>
   d88d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d88dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d88e0:	d40e      	bmi.n	d8900 <__aeabi_d2uiz+0x34>
   d88e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d88e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d88ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d88ee:	fa23 f002 	lsr.w	r0, r3, r2
   d88f2:	4770      	bx	lr
   d88f4:	f04f 0000 	mov.w	r0, #0
   d88f8:	4770      	bx	lr
   d88fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d88fe:	d102      	bne.n	d8906 <__aeabi_d2uiz+0x3a>
   d8900:	f04f 30ff 	mov.w	r0, #4294967295
   d8904:	4770      	bx	lr
   d8906:	f04f 0000 	mov.w	r0, #0
   d890a:	4770      	bx	lr

000d890c <__aeabi_d2f>:
   d890c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8914:	bf24      	itt	cs
   d8916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d891a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d891e:	d90d      	bls.n	d893c <__aeabi_d2f+0x30>
   d8920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d892c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8934:	bf08      	it	eq
   d8936:	f020 0001 	biceq.w	r0, r0, #1
   d893a:	4770      	bx	lr
   d893c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8940:	d121      	bne.n	d8986 <__aeabi_d2f+0x7a>
   d8942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8946:	bfbc      	itt	lt
   d8948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d894c:	4770      	bxlt	lr
   d894e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8956:	f1c2 0218 	rsb	r2, r2, #24
   d895a:	f1c2 0c20 	rsb	ip, r2, #32
   d895e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8962:	fa20 f002 	lsr.w	r0, r0, r2
   d8966:	bf18      	it	ne
   d8968:	f040 0001 	orrne.w	r0, r0, #1
   d896c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8974:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8978:	ea40 000c 	orr.w	r0, r0, ip
   d897c:	fa23 f302 	lsr.w	r3, r3, r2
   d8980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8984:	e7cc      	b.n	d8920 <__aeabi_d2f+0x14>
   d8986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d898a:	d107      	bne.n	d899c <__aeabi_d2f+0x90>
   d898c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8990:	bf1e      	ittt	ne
   d8992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d899a:	4770      	bxne	lr
   d899c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d89a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d89a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d89a8:	4770      	bx	lr
   d89aa:	bf00      	nop

000d89ac <__aeabi_f2lz>:
   d89ac:	ee07 0a90 	vmov	s15, r0
   d89b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d89b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d89b8:	d401      	bmi.n	d89be <__aeabi_f2lz+0x12>
   d89ba:	f000 b80b 	b.w	d89d4 <__aeabi_f2ulz>
   d89be:	eef1 7a67 	vneg.f32	s15, s15
   d89c2:	b508      	push	{r3, lr}
   d89c4:	ee17 0a90 	vmov	r0, s15
   d89c8:	f000 f804 	bl	d89d4 <__aeabi_f2ulz>
   d89cc:	4240      	negs	r0, r0
   d89ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89d2:	bd08      	pop	{r3, pc}

000d89d4 <__aeabi_f2ulz>:
   d89d4:	b5d0      	push	{r4, r6, r7, lr}
   d89d6:	f7ff fc87 	bl	d82e8 <__aeabi_f2d>
   d89da:	4b0c      	ldr	r3, [pc, #48]	; (d8a0c <__aeabi_f2ulz+0x38>)
   d89dc:	2200      	movs	r2, #0
   d89de:	4606      	mov	r6, r0
   d89e0:	460f      	mov	r7, r1
   d89e2:	f7ff fcd9 	bl	d8398 <__aeabi_dmul>
   d89e6:	f7ff ff71 	bl	d88cc <__aeabi_d2uiz>
   d89ea:	4604      	mov	r4, r0
   d89ec:	f7ff fc5a 	bl	d82a4 <__aeabi_ui2d>
   d89f0:	4b07      	ldr	r3, [pc, #28]	; (d8a10 <__aeabi_f2ulz+0x3c>)
   d89f2:	2200      	movs	r2, #0
   d89f4:	f7ff fcd0 	bl	d8398 <__aeabi_dmul>
   d89f8:	4602      	mov	r2, r0
   d89fa:	460b      	mov	r3, r1
   d89fc:	4630      	mov	r0, r6
   d89fe:	4639      	mov	r1, r7
   d8a00:	f7ff fb12 	bl	d8028 <__aeabi_dsub>
   d8a04:	f7ff ff62 	bl	d88cc <__aeabi_d2uiz>
   d8a08:	4621      	mov	r1, r4
   d8a0a:	bdd0      	pop	{r4, r6, r7, pc}
   d8a0c:	3df00000 	.word	0x3df00000
   d8a10:	41f00000 	.word	0x41f00000

000d8a14 <__aeabi_d2ulz>:
   d8a14:	b5d0      	push	{r4, r6, r7, lr}
   d8a16:	4b0c      	ldr	r3, [pc, #48]	; (d8a48 <__aeabi_d2ulz+0x34>)
   d8a18:	2200      	movs	r2, #0
   d8a1a:	4606      	mov	r6, r0
   d8a1c:	460f      	mov	r7, r1
   d8a1e:	f7ff fcbb 	bl	d8398 <__aeabi_dmul>
   d8a22:	f7ff ff53 	bl	d88cc <__aeabi_d2uiz>
   d8a26:	4604      	mov	r4, r0
   d8a28:	f7ff fc3c 	bl	d82a4 <__aeabi_ui2d>
   d8a2c:	4b07      	ldr	r3, [pc, #28]	; (d8a4c <__aeabi_d2ulz+0x38>)
   d8a2e:	2200      	movs	r2, #0
   d8a30:	f7ff fcb2 	bl	d8398 <__aeabi_dmul>
   d8a34:	4602      	mov	r2, r0
   d8a36:	460b      	mov	r3, r1
   d8a38:	4630      	mov	r0, r6
   d8a3a:	4639      	mov	r1, r7
   d8a3c:	f7ff faf4 	bl	d8028 <__aeabi_dsub>
   d8a40:	f7ff ff44 	bl	d88cc <__aeabi_d2uiz>
   d8a44:	4621      	mov	r1, r4
   d8a46:	bdd0      	pop	{r4, r6, r7, pc}
   d8a48:	3df00000 	.word	0x3df00000
   d8a4c:	41f00000 	.word	0x41f00000

000d8a50 <atof>:
   d8a50:	2100      	movs	r1, #0
   d8a52:	f000 bed7 	b.w	d9804 <strtod>
	...

000d8a58 <__cxa_atexit>:
   d8a58:	b510      	push	{r4, lr}
   d8a5a:	4c05      	ldr	r4, [pc, #20]	; (d8a70 <__cxa_atexit+0x18>)
   d8a5c:	4613      	mov	r3, r2
   d8a5e:	b12c      	cbz	r4, d8a6c <__cxa_atexit+0x14>
   d8a60:	460a      	mov	r2, r1
   d8a62:	4601      	mov	r1, r0
   d8a64:	2002      	movs	r0, #2
   d8a66:	f3af 8000 	nop.w
   d8a6a:	bd10      	pop	{r4, pc}
   d8a6c:	4620      	mov	r0, r4
   d8a6e:	e7fc      	b.n	d8a6a <__cxa_atexit+0x12>
   d8a70:	00000000 	.word	0x00000000

000d8a74 <isspace>:
   d8a74:	4b02      	ldr	r3, [pc, #8]	; (d8a80 <isspace+0xc>)
   d8a76:	4418      	add	r0, r3
   d8a78:	7840      	ldrb	r0, [r0, #1]
   d8a7a:	f000 0008 	and.w	r0, r0, #8
   d8a7e:	4770      	bx	lr
   d8a80:	000db320 	.word	0x000db320

000d8a84 <memcpy>:
   d8a84:	440a      	add	r2, r1
   d8a86:	4291      	cmp	r1, r2
   d8a88:	f100 33ff 	add.w	r3, r0, #4294967295
   d8a8c:	d100      	bne.n	d8a90 <memcpy+0xc>
   d8a8e:	4770      	bx	lr
   d8a90:	b510      	push	{r4, lr}
   d8a92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8a9a:	4291      	cmp	r1, r2
   d8a9c:	d1f9      	bne.n	d8a92 <memcpy+0xe>
   d8a9e:	bd10      	pop	{r4, pc}

000d8aa0 <memset>:
   d8aa0:	4402      	add	r2, r0
   d8aa2:	4603      	mov	r3, r0
   d8aa4:	4293      	cmp	r3, r2
   d8aa6:	d100      	bne.n	d8aaa <memset+0xa>
   d8aa8:	4770      	bx	lr
   d8aaa:	f803 1b01 	strb.w	r1, [r3], #1
   d8aae:	e7f9      	b.n	d8aa4 <memset+0x4>

000d8ab0 <srand>:
   d8ab0:	b538      	push	{r3, r4, r5, lr}
   d8ab2:	4b0d      	ldr	r3, [pc, #52]	; (d8ae8 <srand+0x38>)
   d8ab4:	681d      	ldr	r5, [r3, #0]
   d8ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ab8:	4604      	mov	r4, r0
   d8aba:	b97b      	cbnz	r3, d8adc <srand+0x2c>
   d8abc:	2018      	movs	r0, #24
   d8abe:	f7fd fe21 	bl	d6704 <malloc>
   d8ac2:	4a0a      	ldr	r2, [pc, #40]	; (d8aec <srand+0x3c>)
   d8ac4:	4b0a      	ldr	r3, [pc, #40]	; (d8af0 <srand+0x40>)
   d8ac6:	63a8      	str	r0, [r5, #56]	; 0x38
   d8ac8:	e9c0 2300 	strd	r2, r3, [r0]
   d8acc:	4b09      	ldr	r3, [pc, #36]	; (d8af4 <srand+0x44>)
   d8ace:	6083      	str	r3, [r0, #8]
   d8ad0:	230b      	movs	r3, #11
   d8ad2:	8183      	strh	r3, [r0, #12]
   d8ad4:	2201      	movs	r2, #1
   d8ad6:	2300      	movs	r3, #0
   d8ad8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8adc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ade:	2200      	movs	r2, #0
   d8ae0:	611c      	str	r4, [r3, #16]
   d8ae2:	615a      	str	r2, [r3, #20]
   d8ae4:	bd38      	pop	{r3, r4, r5, pc}
   d8ae6:	bf00      	nop
   d8ae8:	2003e1e0 	.word	0x2003e1e0
   d8aec:	abcd330e 	.word	0xabcd330e
   d8af0:	e66d1234 	.word	0xe66d1234
   d8af4:	0005deec 	.word	0x0005deec

000d8af8 <rand>:
   d8af8:	4b13      	ldr	r3, [pc, #76]	; (d8b48 <rand+0x50>)
   d8afa:	b510      	push	{r4, lr}
   d8afc:	681c      	ldr	r4, [r3, #0]
   d8afe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b00:	b97b      	cbnz	r3, d8b22 <rand+0x2a>
   d8b02:	2018      	movs	r0, #24
   d8b04:	f7fd fdfe 	bl	d6704 <malloc>
   d8b08:	4a10      	ldr	r2, [pc, #64]	; (d8b4c <rand+0x54>)
   d8b0a:	4b11      	ldr	r3, [pc, #68]	; (d8b50 <rand+0x58>)
   d8b0c:	63a0      	str	r0, [r4, #56]	; 0x38
   d8b0e:	e9c0 2300 	strd	r2, r3, [r0]
   d8b12:	4b10      	ldr	r3, [pc, #64]	; (d8b54 <rand+0x5c>)
   d8b14:	6083      	str	r3, [r0, #8]
   d8b16:	230b      	movs	r3, #11
   d8b18:	8183      	strh	r3, [r0, #12]
   d8b1a:	2201      	movs	r2, #1
   d8b1c:	2300      	movs	r3, #0
   d8b1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8b22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d8b24:	480c      	ldr	r0, [pc, #48]	; (d8b58 <rand+0x60>)
   d8b26:	690a      	ldr	r2, [r1, #16]
   d8b28:	694b      	ldr	r3, [r1, #20]
   d8b2a:	4c0c      	ldr	r4, [pc, #48]	; (d8b5c <rand+0x64>)
   d8b2c:	4350      	muls	r0, r2
   d8b2e:	fb04 0003 	mla	r0, r4, r3, r0
   d8b32:	fba2 3404 	umull	r3, r4, r2, r4
   d8b36:	1c5a      	adds	r2, r3, #1
   d8b38:	4404      	add	r4, r0
   d8b3a:	f144 0000 	adc.w	r0, r4, #0
   d8b3e:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d8b42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d8b46:	bd10      	pop	{r4, pc}
   d8b48:	2003e1e0 	.word	0x2003e1e0
   d8b4c:	abcd330e 	.word	0xabcd330e
   d8b50:	e66d1234 	.word	0xe66d1234
   d8b54:	0005deec 	.word	0x0005deec
   d8b58:	5851f42d 	.word	0x5851f42d
   d8b5c:	4c957f2d 	.word	0x4c957f2d

000d8b60 <strcmp>:
   d8b60:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8b64:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8b68:	2a01      	cmp	r2, #1
   d8b6a:	bf28      	it	cs
   d8b6c:	429a      	cmpcs	r2, r3
   d8b6e:	d0f7      	beq.n	d8b60 <strcmp>
   d8b70:	1ad0      	subs	r0, r2, r3
   d8b72:	4770      	bx	lr

000d8b74 <strcpy>:
   d8b74:	4603      	mov	r3, r0
   d8b76:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8b7a:	f803 2b01 	strb.w	r2, [r3], #1
   d8b7e:	2a00      	cmp	r2, #0
   d8b80:	d1f9      	bne.n	d8b76 <strcpy+0x2>
   d8b82:	4770      	bx	lr

000d8b84 <strlen>:
   d8b84:	4603      	mov	r3, r0
   d8b86:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8b8a:	2a00      	cmp	r2, #0
   d8b8c:	d1fb      	bne.n	d8b86 <strlen+0x2>
   d8b8e:	1a18      	subs	r0, r3, r0
   d8b90:	3801      	subs	r0, #1
   d8b92:	4770      	bx	lr

000d8b94 <strncmp>:
   d8b94:	b510      	push	{r4, lr}
   d8b96:	b16a      	cbz	r2, d8bb4 <strncmp+0x20>
   d8b98:	3901      	subs	r1, #1
   d8b9a:	1884      	adds	r4, r0, r2
   d8b9c:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8ba0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8ba4:	4293      	cmp	r3, r2
   d8ba6:	d103      	bne.n	d8bb0 <strncmp+0x1c>
   d8ba8:	42a0      	cmp	r0, r4
   d8baa:	d001      	beq.n	d8bb0 <strncmp+0x1c>
   d8bac:	2b00      	cmp	r3, #0
   d8bae:	d1f5      	bne.n	d8b9c <strncmp+0x8>
   d8bb0:	1a98      	subs	r0, r3, r2
   d8bb2:	bd10      	pop	{r4, pc}
   d8bb4:	4610      	mov	r0, r2
   d8bb6:	e7fc      	b.n	d8bb2 <strncmp+0x1e>

000d8bb8 <sulp>:
   d8bb8:	b570      	push	{r4, r5, r6, lr}
   d8bba:	4604      	mov	r4, r0
   d8bbc:	460d      	mov	r5, r1
   d8bbe:	ec45 4b10 	vmov	d0, r4, r5
   d8bc2:	4616      	mov	r6, r2
   d8bc4:	f001 fc96 	bl	da4f4 <__ulp>
   d8bc8:	ec51 0b10 	vmov	r0, r1, d0
   d8bcc:	b17e      	cbz	r6, d8bee <sulp+0x36>
   d8bce:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8bd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8bd6:	2b00      	cmp	r3, #0
   d8bd8:	dd09      	ble.n	d8bee <sulp+0x36>
   d8bda:	051b      	lsls	r3, r3, #20
   d8bdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8be0:	2400      	movs	r4, #0
   d8be2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8be6:	4622      	mov	r2, r4
   d8be8:	462b      	mov	r3, r5
   d8bea:	f7ff fbd5 	bl	d8398 <__aeabi_dmul>
   d8bee:	bd70      	pop	{r4, r5, r6, pc}

000d8bf0 <_strtod_l>:
   d8bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8bf4:	b0a3      	sub	sp, #140	; 0x8c
   d8bf6:	461f      	mov	r7, r3
   d8bf8:	2300      	movs	r3, #0
   d8bfa:	931e      	str	r3, [sp, #120]	; 0x78
   d8bfc:	4ba4      	ldr	r3, [pc, #656]	; (d8e90 <_strtod_l+0x2a0>)
   d8bfe:	9219      	str	r2, [sp, #100]	; 0x64
   d8c00:	681b      	ldr	r3, [r3, #0]
   d8c02:	9307      	str	r3, [sp, #28]
   d8c04:	4604      	mov	r4, r0
   d8c06:	4618      	mov	r0, r3
   d8c08:	4688      	mov	r8, r1
   d8c0a:	f7ff ffbb 	bl	d8b84 <strlen>
   d8c0e:	f04f 0a00 	mov.w	sl, #0
   d8c12:	4605      	mov	r5, r0
   d8c14:	f04f 0b00 	mov.w	fp, #0
   d8c18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8c1e:	781a      	ldrb	r2, [r3, #0]
   d8c20:	2a2b      	cmp	r2, #43	; 0x2b
   d8c22:	d04c      	beq.n	d8cbe <_strtod_l+0xce>
   d8c24:	d839      	bhi.n	d8c9a <_strtod_l+0xaa>
   d8c26:	2a0d      	cmp	r2, #13
   d8c28:	d832      	bhi.n	d8c90 <_strtod_l+0xa0>
   d8c2a:	2a08      	cmp	r2, #8
   d8c2c:	d832      	bhi.n	d8c94 <_strtod_l+0xa4>
   d8c2e:	2a00      	cmp	r2, #0
   d8c30:	d03c      	beq.n	d8cac <_strtod_l+0xbc>
   d8c32:	2300      	movs	r3, #0
   d8c34:	930e      	str	r3, [sp, #56]	; 0x38
   d8c36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8c38:	7833      	ldrb	r3, [r6, #0]
   d8c3a:	2b30      	cmp	r3, #48	; 0x30
   d8c3c:	f040 80b4 	bne.w	d8da8 <_strtod_l+0x1b8>
   d8c40:	7873      	ldrb	r3, [r6, #1]
   d8c42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8c46:	2b58      	cmp	r3, #88	; 0x58
   d8c48:	d16c      	bne.n	d8d24 <_strtod_l+0x134>
   d8c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8c4c:	9301      	str	r3, [sp, #4]
   d8c4e:	ab1e      	add	r3, sp, #120	; 0x78
   d8c50:	9702      	str	r7, [sp, #8]
   d8c52:	9300      	str	r3, [sp, #0]
   d8c54:	4a8f      	ldr	r2, [pc, #572]	; (d8e94 <_strtod_l+0x2a4>)
   d8c56:	ab1f      	add	r3, sp, #124	; 0x7c
   d8c58:	a91d      	add	r1, sp, #116	; 0x74
   d8c5a:	4620      	mov	r0, r4
   d8c5c:	f000 fe46 	bl	d98ec <__gethex>
   d8c60:	f010 0707 	ands.w	r7, r0, #7
   d8c64:	4605      	mov	r5, r0
   d8c66:	d005      	beq.n	d8c74 <_strtod_l+0x84>
   d8c68:	2f06      	cmp	r7, #6
   d8c6a:	d12a      	bne.n	d8cc2 <_strtod_l+0xd2>
   d8c6c:	3601      	adds	r6, #1
   d8c6e:	2300      	movs	r3, #0
   d8c70:	961d      	str	r6, [sp, #116]	; 0x74
   d8c72:	930e      	str	r3, [sp, #56]	; 0x38
   d8c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8c76:	2b00      	cmp	r3, #0
   d8c78:	f040 8596 	bne.w	d97a8 <_strtod_l+0xbb8>
   d8c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8c7e:	b1db      	cbz	r3, d8cb8 <_strtod_l+0xc8>
   d8c80:	4652      	mov	r2, sl
   d8c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8c86:	ec43 2b10 	vmov	d0, r2, r3
   d8c8a:	b023      	add	sp, #140	; 0x8c
   d8c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c90:	2a20      	cmp	r2, #32
   d8c92:	d1ce      	bne.n	d8c32 <_strtod_l+0x42>
   d8c94:	3301      	adds	r3, #1
   d8c96:	931d      	str	r3, [sp, #116]	; 0x74
   d8c98:	e7c0      	b.n	d8c1c <_strtod_l+0x2c>
   d8c9a:	2a2d      	cmp	r2, #45	; 0x2d
   d8c9c:	d1c9      	bne.n	d8c32 <_strtod_l+0x42>
   d8c9e:	2201      	movs	r2, #1
   d8ca0:	920e      	str	r2, [sp, #56]	; 0x38
   d8ca2:	1c5a      	adds	r2, r3, #1
   d8ca4:	921d      	str	r2, [sp, #116]	; 0x74
   d8ca6:	785b      	ldrb	r3, [r3, #1]
   d8ca8:	2b00      	cmp	r3, #0
   d8caa:	d1c4      	bne.n	d8c36 <_strtod_l+0x46>
   d8cac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8cae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8cb2:	2b00      	cmp	r3, #0
   d8cb4:	f040 8576 	bne.w	d97a4 <_strtod_l+0xbb4>
   d8cb8:	4652      	mov	r2, sl
   d8cba:	465b      	mov	r3, fp
   d8cbc:	e7e3      	b.n	d8c86 <_strtod_l+0x96>
   d8cbe:	2200      	movs	r2, #0
   d8cc0:	e7ee      	b.n	d8ca0 <_strtod_l+0xb0>
   d8cc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8cc4:	b13a      	cbz	r2, d8cd6 <_strtod_l+0xe6>
   d8cc6:	2135      	movs	r1, #53	; 0x35
   d8cc8:	a820      	add	r0, sp, #128	; 0x80
   d8cca:	f001 fd12 	bl	da6f2 <__copybits>
   d8cce:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8cd0:	4620      	mov	r0, r4
   d8cd2:	f001 f947 	bl	d9f64 <_Bfree>
   d8cd6:	3f01      	subs	r7, #1
   d8cd8:	2f05      	cmp	r7, #5
   d8cda:	d807      	bhi.n	d8cec <_strtod_l+0xfc>
   d8cdc:	e8df f007 	tbb	[pc, r7]
   d8ce0:	1d180b0e 	.word	0x1d180b0e
   d8ce4:	030e      	.short	0x030e
   d8ce6:	f04f 0b00 	mov.w	fp, #0
   d8cea:	46da      	mov	sl, fp
   d8cec:	0728      	lsls	r0, r5, #28
   d8cee:	d5c1      	bpl.n	d8c74 <_strtod_l+0x84>
   d8cf0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8cf4:	e7be      	b.n	d8c74 <_strtod_l+0x84>
   d8cf6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8cfa:	e7f7      	b.n	d8cec <_strtod_l+0xfc>
   d8cfc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8d00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8d02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8d06:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8d0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8d0e:	e7ed      	b.n	d8cec <_strtod_l+0xfc>
   d8d10:	f8df b184 	ldr.w	fp, [pc, #388]	; d8e98 <_strtod_l+0x2a8>
   d8d14:	f04f 0a00 	mov.w	sl, #0
   d8d18:	e7e8      	b.n	d8cec <_strtod_l+0xfc>
   d8d1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8d1e:	f04f 3aff 	mov.w	sl, #4294967295
   d8d22:	e7e3      	b.n	d8cec <_strtod_l+0xfc>
   d8d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8d26:	1c5a      	adds	r2, r3, #1
   d8d28:	921d      	str	r2, [sp, #116]	; 0x74
   d8d2a:	785b      	ldrb	r3, [r3, #1]
   d8d2c:	2b30      	cmp	r3, #48	; 0x30
   d8d2e:	d0f9      	beq.n	d8d24 <_strtod_l+0x134>
   d8d30:	2b00      	cmp	r3, #0
   d8d32:	d09f      	beq.n	d8c74 <_strtod_l+0x84>
   d8d34:	2301      	movs	r3, #1
   d8d36:	f04f 0900 	mov.w	r9, #0
   d8d3a:	9304      	str	r3, [sp, #16]
   d8d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8d3e:	930a      	str	r3, [sp, #40]	; 0x28
   d8d40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8d44:	464f      	mov	r7, r9
   d8d46:	220a      	movs	r2, #10
   d8d48:	981d      	ldr	r0, [sp, #116]	; 0x74
   d8d4a:	7806      	ldrb	r6, [r0, #0]
   d8d4c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8d50:	b2d9      	uxtb	r1, r3
   d8d52:	2909      	cmp	r1, #9
   d8d54:	d92a      	bls.n	d8dac <_strtod_l+0x1bc>
   d8d56:	9907      	ldr	r1, [sp, #28]
   d8d58:	462a      	mov	r2, r5
   d8d5a:	f7ff ff1b 	bl	d8b94 <strncmp>
   d8d5e:	b398      	cbz	r0, d8dc8 <_strtod_l+0x1d8>
   d8d60:	2000      	movs	r0, #0
   d8d62:	4633      	mov	r3, r6
   d8d64:	463d      	mov	r5, r7
   d8d66:	9007      	str	r0, [sp, #28]
   d8d68:	4602      	mov	r2, r0
   d8d6a:	2b65      	cmp	r3, #101	; 0x65
   d8d6c:	d001      	beq.n	d8d72 <_strtod_l+0x182>
   d8d6e:	2b45      	cmp	r3, #69	; 0x45
   d8d70:	d118      	bne.n	d8da4 <_strtod_l+0x1b4>
   d8d72:	b91d      	cbnz	r5, d8d7c <_strtod_l+0x18c>
   d8d74:	9b04      	ldr	r3, [sp, #16]
   d8d76:	4303      	orrs	r3, r0
   d8d78:	d098      	beq.n	d8cac <_strtod_l+0xbc>
   d8d7a:	2500      	movs	r5, #0
   d8d7c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8d80:	f108 0301 	add.w	r3, r8, #1
   d8d84:	931d      	str	r3, [sp, #116]	; 0x74
   d8d86:	f898 3001 	ldrb.w	r3, [r8, #1]
   d8d8a:	2b2b      	cmp	r3, #43	; 0x2b
   d8d8c:	d075      	beq.n	d8e7a <_strtod_l+0x28a>
   d8d8e:	2b2d      	cmp	r3, #45	; 0x2d
   d8d90:	d07b      	beq.n	d8e8a <_strtod_l+0x29a>
   d8d92:	f04f 0c00 	mov.w	ip, #0
   d8d96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8d9a:	2909      	cmp	r1, #9
   d8d9c:	f240 8082 	bls.w	d8ea4 <_strtod_l+0x2b4>
   d8da0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8da4:	2600      	movs	r6, #0
   d8da6:	e09d      	b.n	d8ee4 <_strtod_l+0x2f4>
   d8da8:	2300      	movs	r3, #0
   d8daa:	e7c4      	b.n	d8d36 <_strtod_l+0x146>
   d8dac:	2f08      	cmp	r7, #8
   d8dae:	bfd8      	it	le
   d8db0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d8db2:	f100 0001 	add.w	r0, r0, #1
   d8db6:	bfda      	itte	le
   d8db8:	fb02 3301 	mlale	r3, r2, r1, r3
   d8dbc:	9309      	strle	r3, [sp, #36]	; 0x24
   d8dbe:	fb02 3909 	mlagt	r9, r2, r9, r3
   d8dc2:	3701      	adds	r7, #1
   d8dc4:	901d      	str	r0, [sp, #116]	; 0x74
   d8dc6:	e7bf      	b.n	d8d48 <_strtod_l+0x158>
   d8dc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8dca:	195a      	adds	r2, r3, r5
   d8dcc:	921d      	str	r2, [sp, #116]	; 0x74
   d8dce:	5d5b      	ldrb	r3, [r3, r5]
   d8dd0:	2f00      	cmp	r7, #0
   d8dd2:	d037      	beq.n	d8e44 <_strtod_l+0x254>
   d8dd4:	9007      	str	r0, [sp, #28]
   d8dd6:	463d      	mov	r5, r7
   d8dd8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d8ddc:	2a09      	cmp	r2, #9
   d8dde:	d912      	bls.n	d8e06 <_strtod_l+0x216>
   d8de0:	2201      	movs	r2, #1
   d8de2:	e7c2      	b.n	d8d6a <_strtod_l+0x17a>
   d8de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8de6:	1c5a      	adds	r2, r3, #1
   d8de8:	921d      	str	r2, [sp, #116]	; 0x74
   d8dea:	785b      	ldrb	r3, [r3, #1]
   d8dec:	3001      	adds	r0, #1
   d8dee:	2b30      	cmp	r3, #48	; 0x30
   d8df0:	d0f8      	beq.n	d8de4 <_strtod_l+0x1f4>
   d8df2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8df6:	2a08      	cmp	r2, #8
   d8df8:	f200 84db 	bhi.w	d97b2 <_strtod_l+0xbc2>
   d8dfc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d8dfe:	9007      	str	r0, [sp, #28]
   d8e00:	2000      	movs	r0, #0
   d8e02:	920a      	str	r2, [sp, #40]	; 0x28
   d8e04:	4605      	mov	r5, r0
   d8e06:	3b30      	subs	r3, #48	; 0x30
   d8e08:	f100 0201 	add.w	r2, r0, #1
   d8e0c:	d014      	beq.n	d8e38 <_strtod_l+0x248>
   d8e0e:	9907      	ldr	r1, [sp, #28]
   d8e10:	4411      	add	r1, r2
   d8e12:	9107      	str	r1, [sp, #28]
   d8e14:	462a      	mov	r2, r5
   d8e16:	eb00 0e05 	add.w	lr, r0, r5
   d8e1a:	210a      	movs	r1, #10
   d8e1c:	4572      	cmp	r2, lr
   d8e1e:	d113      	bne.n	d8e48 <_strtod_l+0x258>
   d8e20:	182a      	adds	r2, r5, r0
   d8e22:	2a08      	cmp	r2, #8
   d8e24:	f105 0501 	add.w	r5, r5, #1
   d8e28:	4405      	add	r5, r0
   d8e2a:	dc1c      	bgt.n	d8e66 <_strtod_l+0x276>
   d8e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8e2e:	220a      	movs	r2, #10
   d8e30:	fb02 3301 	mla	r3, r2, r1, r3
   d8e34:	9309      	str	r3, [sp, #36]	; 0x24
   d8e36:	2200      	movs	r2, #0
   d8e38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e3a:	1c59      	adds	r1, r3, #1
   d8e3c:	911d      	str	r1, [sp, #116]	; 0x74
   d8e3e:	785b      	ldrb	r3, [r3, #1]
   d8e40:	4610      	mov	r0, r2
   d8e42:	e7c9      	b.n	d8dd8 <_strtod_l+0x1e8>
   d8e44:	4638      	mov	r0, r7
   d8e46:	e7d2      	b.n	d8dee <_strtod_l+0x1fe>
   d8e48:	2a08      	cmp	r2, #8
   d8e4a:	dc04      	bgt.n	d8e56 <_strtod_l+0x266>
   d8e4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8e4e:	434e      	muls	r6, r1
   d8e50:	9609      	str	r6, [sp, #36]	; 0x24
   d8e52:	3201      	adds	r2, #1
   d8e54:	e7e2      	b.n	d8e1c <_strtod_l+0x22c>
   d8e56:	f102 0c01 	add.w	ip, r2, #1
   d8e5a:	f1bc 0f10 	cmp.w	ip, #16
   d8e5e:	bfd8      	it	le
   d8e60:	fb01 f909 	mulle.w	r9, r1, r9
   d8e64:	e7f5      	b.n	d8e52 <_strtod_l+0x262>
   d8e66:	2d10      	cmp	r5, #16
   d8e68:	bfdc      	itt	le
   d8e6a:	220a      	movle	r2, #10
   d8e6c:	fb02 3909 	mlale	r9, r2, r9, r3
   d8e70:	e7e1      	b.n	d8e36 <_strtod_l+0x246>
   d8e72:	2300      	movs	r3, #0
   d8e74:	9307      	str	r3, [sp, #28]
   d8e76:	2201      	movs	r2, #1
   d8e78:	e77c      	b.n	d8d74 <_strtod_l+0x184>
   d8e7a:	f04f 0c00 	mov.w	ip, #0
   d8e7e:	f108 0302 	add.w	r3, r8, #2
   d8e82:	931d      	str	r3, [sp, #116]	; 0x74
   d8e84:	f898 3002 	ldrb.w	r3, [r8, #2]
   d8e88:	e785      	b.n	d8d96 <_strtod_l+0x1a6>
   d8e8a:	f04f 0c01 	mov.w	ip, #1
   d8e8e:	e7f6      	b.n	d8e7e <_strtod_l+0x28e>
   d8e90:	000db424 	.word	0x000db424
   d8e94:	000db2d0 	.word	0x000db2d0
   d8e98:	7ff00000 	.word	0x7ff00000
   d8e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8e9e:	1c59      	adds	r1, r3, #1
   d8ea0:	911d      	str	r1, [sp, #116]	; 0x74
   d8ea2:	785b      	ldrb	r3, [r3, #1]
   d8ea4:	2b30      	cmp	r3, #48	; 0x30
   d8ea6:	d0f9      	beq.n	d8e9c <_strtod_l+0x2ac>
   d8ea8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d8eac:	2908      	cmp	r1, #8
   d8eae:	f63f af79 	bhi.w	d8da4 <_strtod_l+0x1b4>
   d8eb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8eb8:	9308      	str	r3, [sp, #32]
   d8eba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ebc:	1c59      	adds	r1, r3, #1
   d8ebe:	911d      	str	r1, [sp, #116]	; 0x74
   d8ec0:	785b      	ldrb	r3, [r3, #1]
   d8ec2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8ec6:	2e09      	cmp	r6, #9
   d8ec8:	d937      	bls.n	d8f3a <_strtod_l+0x34a>
   d8eca:	9e08      	ldr	r6, [sp, #32]
   d8ecc:	1b89      	subs	r1, r1, r6
   d8ece:	2908      	cmp	r1, #8
   d8ed0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d8ed4:	dc02      	bgt.n	d8edc <_strtod_l+0x2ec>
   d8ed6:	4576      	cmp	r6, lr
   d8ed8:	bfa8      	it	ge
   d8eda:	4676      	movge	r6, lr
   d8edc:	f1bc 0f00 	cmp.w	ip, #0
   d8ee0:	d000      	beq.n	d8ee4 <_strtod_l+0x2f4>
   d8ee2:	4276      	negs	r6, r6
   d8ee4:	2d00      	cmp	r5, #0
   d8ee6:	d14f      	bne.n	d8f88 <_strtod_l+0x398>
   d8ee8:	9904      	ldr	r1, [sp, #16]
   d8eea:	4301      	orrs	r1, r0
   d8eec:	f47f aec2 	bne.w	d8c74 <_strtod_l+0x84>
   d8ef0:	2a00      	cmp	r2, #0
   d8ef2:	f47f aedb 	bne.w	d8cac <_strtod_l+0xbc>
   d8ef6:	2b69      	cmp	r3, #105	; 0x69
   d8ef8:	d027      	beq.n	d8f4a <_strtod_l+0x35a>
   d8efa:	dc24      	bgt.n	d8f46 <_strtod_l+0x356>
   d8efc:	2b49      	cmp	r3, #73	; 0x49
   d8efe:	d024      	beq.n	d8f4a <_strtod_l+0x35a>
   d8f00:	2b4e      	cmp	r3, #78	; 0x4e
   d8f02:	f47f aed3 	bne.w	d8cac <_strtod_l+0xbc>
   d8f06:	499e      	ldr	r1, [pc, #632]	; (d9180 <_strtod_l+0x590>)
   d8f08:	a81d      	add	r0, sp, #116	; 0x74
   d8f0a:	f000 ff35 	bl	d9d78 <__match>
   d8f0e:	2800      	cmp	r0, #0
   d8f10:	f43f aecc 	beq.w	d8cac <_strtod_l+0xbc>
   d8f14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f16:	781b      	ldrb	r3, [r3, #0]
   d8f18:	2b28      	cmp	r3, #40	; 0x28
   d8f1a:	d12d      	bne.n	d8f78 <_strtod_l+0x388>
   d8f1c:	4999      	ldr	r1, [pc, #612]	; (d9184 <_strtod_l+0x594>)
   d8f1e:	aa20      	add	r2, sp, #128	; 0x80
   d8f20:	a81d      	add	r0, sp, #116	; 0x74
   d8f22:	f000 ff3d 	bl	d9da0 <__hexnan>
   d8f26:	2805      	cmp	r0, #5
   d8f28:	d126      	bne.n	d8f78 <_strtod_l+0x388>
   d8f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d8f2c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d8f30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8f34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8f38:	e69c      	b.n	d8c74 <_strtod_l+0x84>
   d8f3a:	210a      	movs	r1, #10
   d8f3c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d8f40:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8f44:	e7b9      	b.n	d8eba <_strtod_l+0x2ca>
   d8f46:	2b6e      	cmp	r3, #110	; 0x6e
   d8f48:	e7db      	b.n	d8f02 <_strtod_l+0x312>
   d8f4a:	498f      	ldr	r1, [pc, #572]	; (d9188 <_strtod_l+0x598>)
   d8f4c:	a81d      	add	r0, sp, #116	; 0x74
   d8f4e:	f000 ff13 	bl	d9d78 <__match>
   d8f52:	2800      	cmp	r0, #0
   d8f54:	f43f aeaa 	beq.w	d8cac <_strtod_l+0xbc>
   d8f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f5a:	498c      	ldr	r1, [pc, #560]	; (d918c <_strtod_l+0x59c>)
   d8f5c:	3b01      	subs	r3, #1
   d8f5e:	a81d      	add	r0, sp, #116	; 0x74
   d8f60:	931d      	str	r3, [sp, #116]	; 0x74
   d8f62:	f000 ff09 	bl	d9d78 <__match>
   d8f66:	b910      	cbnz	r0, d8f6e <_strtod_l+0x37e>
   d8f68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8f6a:	3301      	adds	r3, #1
   d8f6c:	931d      	str	r3, [sp, #116]	; 0x74
   d8f6e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d919c <_strtod_l+0x5ac>
   d8f72:	f04f 0a00 	mov.w	sl, #0
   d8f76:	e67d      	b.n	d8c74 <_strtod_l+0x84>
   d8f78:	4885      	ldr	r0, [pc, #532]	; (d9190 <_strtod_l+0x5a0>)
   d8f7a:	f7ff f849 	bl	d8010 <nan>
   d8f7e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d8f82:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8f86:	e675      	b.n	d8c74 <_strtod_l+0x84>
   d8f88:	9b07      	ldr	r3, [sp, #28]
   d8f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d8f8c:	1af3      	subs	r3, r6, r3
   d8f8e:	2f00      	cmp	r7, #0
   d8f90:	bf08      	it	eq
   d8f92:	462f      	moveq	r7, r5
   d8f94:	2d10      	cmp	r5, #16
   d8f96:	9308      	str	r3, [sp, #32]
   d8f98:	46a8      	mov	r8, r5
   d8f9a:	bfa8      	it	ge
   d8f9c:	f04f 0810 	movge.w	r8, #16
   d8fa0:	f7ff f980 	bl	d82a4 <__aeabi_ui2d>
   d8fa4:	2d09      	cmp	r5, #9
   d8fa6:	4682      	mov	sl, r0
   d8fa8:	468b      	mov	fp, r1
   d8faa:	dd13      	ble.n	d8fd4 <_strtod_l+0x3e4>
   d8fac:	4b79      	ldr	r3, [pc, #484]	; (d9194 <_strtod_l+0x5a4>)
   d8fae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d8fb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8fb6:	f7ff f9ef 	bl	d8398 <__aeabi_dmul>
   d8fba:	4682      	mov	sl, r0
   d8fbc:	4648      	mov	r0, r9
   d8fbe:	468b      	mov	fp, r1
   d8fc0:	f7ff f970 	bl	d82a4 <__aeabi_ui2d>
   d8fc4:	4602      	mov	r2, r0
   d8fc6:	460b      	mov	r3, r1
   d8fc8:	4650      	mov	r0, sl
   d8fca:	4659      	mov	r1, fp
   d8fcc:	f7ff f82e 	bl	d802c <__adddf3>
   d8fd0:	4682      	mov	sl, r0
   d8fd2:	468b      	mov	fp, r1
   d8fd4:	2d0f      	cmp	r5, #15
   d8fd6:	dc38      	bgt.n	d904a <_strtod_l+0x45a>
   d8fd8:	9b08      	ldr	r3, [sp, #32]
   d8fda:	2b00      	cmp	r3, #0
   d8fdc:	f43f ae4a 	beq.w	d8c74 <_strtod_l+0x84>
   d8fe0:	dd24      	ble.n	d902c <_strtod_l+0x43c>
   d8fe2:	2b16      	cmp	r3, #22
   d8fe4:	dc0b      	bgt.n	d8ffe <_strtod_l+0x40e>
   d8fe6:	4d6b      	ldr	r5, [pc, #428]	; (d9194 <_strtod_l+0x5a4>)
   d8fe8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d8fec:	e9d5 0100 	ldrd	r0, r1, [r5]
   d8ff0:	4652      	mov	r2, sl
   d8ff2:	465b      	mov	r3, fp
   d8ff4:	f7ff f9d0 	bl	d8398 <__aeabi_dmul>
   d8ff8:	4682      	mov	sl, r0
   d8ffa:	468b      	mov	fp, r1
   d8ffc:	e63a      	b.n	d8c74 <_strtod_l+0x84>
   d8ffe:	9a08      	ldr	r2, [sp, #32]
   d9000:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9004:	4293      	cmp	r3, r2
   d9006:	db20      	blt.n	d904a <_strtod_l+0x45a>
   d9008:	4c62      	ldr	r4, [pc, #392]	; (d9194 <_strtod_l+0x5a4>)
   d900a:	f1c5 050f 	rsb	r5, r5, #15
   d900e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9012:	4652      	mov	r2, sl
   d9014:	465b      	mov	r3, fp
   d9016:	e9d1 0100 	ldrd	r0, r1, [r1]
   d901a:	f7ff f9bd 	bl	d8398 <__aeabi_dmul>
   d901e:	9b08      	ldr	r3, [sp, #32]
   d9020:	1b5d      	subs	r5, r3, r5
   d9022:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9026:	e9d4 2300 	ldrd	r2, r3, [r4]
   d902a:	e7e3      	b.n	d8ff4 <_strtod_l+0x404>
   d902c:	9b08      	ldr	r3, [sp, #32]
   d902e:	3316      	adds	r3, #22
   d9030:	db0b      	blt.n	d904a <_strtod_l+0x45a>
   d9032:	9b07      	ldr	r3, [sp, #28]
   d9034:	4a57      	ldr	r2, [pc, #348]	; (d9194 <_strtod_l+0x5a4>)
   d9036:	1b9e      	subs	r6, r3, r6
   d9038:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d903c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9040:	4650      	mov	r0, sl
   d9042:	4659      	mov	r1, fp
   d9044:	f7ff fad2 	bl	d85ec <__aeabi_ddiv>
   d9048:	e7d6      	b.n	d8ff8 <_strtod_l+0x408>
   d904a:	9b08      	ldr	r3, [sp, #32]
   d904c:	eba5 0808 	sub.w	r8, r5, r8
   d9050:	4498      	add	r8, r3
   d9052:	f1b8 0f00 	cmp.w	r8, #0
   d9056:	dd71      	ble.n	d913c <_strtod_l+0x54c>
   d9058:	f018 030f 	ands.w	r3, r8, #15
   d905c:	d00a      	beq.n	d9074 <_strtod_l+0x484>
   d905e:	494d      	ldr	r1, [pc, #308]	; (d9194 <_strtod_l+0x5a4>)
   d9060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9064:	4652      	mov	r2, sl
   d9066:	465b      	mov	r3, fp
   d9068:	e9d1 0100 	ldrd	r0, r1, [r1]
   d906c:	f7ff f994 	bl	d8398 <__aeabi_dmul>
   d9070:	4682      	mov	sl, r0
   d9072:	468b      	mov	fp, r1
   d9074:	f038 080f 	bics.w	r8, r8, #15
   d9078:	d04d      	beq.n	d9116 <_strtod_l+0x526>
   d907a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d907e:	dd22      	ble.n	d90c6 <_strtod_l+0x4d6>
   d9080:	2500      	movs	r5, #0
   d9082:	462e      	mov	r6, r5
   d9084:	9509      	str	r5, [sp, #36]	; 0x24
   d9086:	9507      	str	r5, [sp, #28]
   d9088:	2322      	movs	r3, #34	; 0x22
   d908a:	f8df b110 	ldr.w	fp, [pc, #272]	; d919c <_strtod_l+0x5ac>
   d908e:	6023      	str	r3, [r4, #0]
   d9090:	f04f 0a00 	mov.w	sl, #0
   d9094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9096:	2b00      	cmp	r3, #0
   d9098:	f43f adec 	beq.w	d8c74 <_strtod_l+0x84>
   d909c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d909e:	4620      	mov	r0, r4
   d90a0:	f000 ff60 	bl	d9f64 <_Bfree>
   d90a4:	9907      	ldr	r1, [sp, #28]
   d90a6:	4620      	mov	r0, r4
   d90a8:	f000 ff5c 	bl	d9f64 <_Bfree>
   d90ac:	4631      	mov	r1, r6
   d90ae:	4620      	mov	r0, r4
   d90b0:	f000 ff58 	bl	d9f64 <_Bfree>
   d90b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d90b6:	4620      	mov	r0, r4
   d90b8:	f000 ff54 	bl	d9f64 <_Bfree>
   d90bc:	4629      	mov	r1, r5
   d90be:	4620      	mov	r0, r4
   d90c0:	f000 ff50 	bl	d9f64 <_Bfree>
   d90c4:	e5d6      	b.n	d8c74 <_strtod_l+0x84>
   d90c6:	2300      	movs	r3, #0
   d90c8:	ea4f 1828 	mov.w	r8, r8, asr #4
   d90cc:	4650      	mov	r0, sl
   d90ce:	4659      	mov	r1, fp
   d90d0:	4699      	mov	r9, r3
   d90d2:	f1b8 0f01 	cmp.w	r8, #1
   d90d6:	dc21      	bgt.n	d911c <_strtod_l+0x52c>
   d90d8:	b10b      	cbz	r3, d90de <_strtod_l+0x4ee>
   d90da:	4682      	mov	sl, r0
   d90dc:	468b      	mov	fp, r1
   d90de:	4b2e      	ldr	r3, [pc, #184]	; (d9198 <_strtod_l+0x5a8>)
   d90e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d90e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d90e8:	4652      	mov	r2, sl
   d90ea:	465b      	mov	r3, fp
   d90ec:	e9d9 0100 	ldrd	r0, r1, [r9]
   d90f0:	f7ff f952 	bl	d8398 <__aeabi_dmul>
   d90f4:	4b29      	ldr	r3, [pc, #164]	; (d919c <_strtod_l+0x5ac>)
   d90f6:	460a      	mov	r2, r1
   d90f8:	400b      	ands	r3, r1
   d90fa:	4929      	ldr	r1, [pc, #164]	; (d91a0 <_strtod_l+0x5b0>)
   d90fc:	428b      	cmp	r3, r1
   d90fe:	4682      	mov	sl, r0
   d9100:	d8be      	bhi.n	d9080 <_strtod_l+0x490>
   d9102:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9106:	428b      	cmp	r3, r1
   d9108:	bf86      	itte	hi
   d910a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d91a4 <_strtod_l+0x5b4>
   d910e:	f04f 3aff 	movhi.w	sl, #4294967295
   d9112:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9116:	2300      	movs	r3, #0
   d9118:	9304      	str	r3, [sp, #16]
   d911a:	e081      	b.n	d9220 <_strtod_l+0x630>
   d911c:	f018 0f01 	tst.w	r8, #1
   d9120:	d007      	beq.n	d9132 <_strtod_l+0x542>
   d9122:	4b1d      	ldr	r3, [pc, #116]	; (d9198 <_strtod_l+0x5a8>)
   d9124:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9128:	e9d3 2300 	ldrd	r2, r3, [r3]
   d912c:	f7ff f934 	bl	d8398 <__aeabi_dmul>
   d9130:	2301      	movs	r3, #1
   d9132:	f109 0901 	add.w	r9, r9, #1
   d9136:	ea4f 0868 	mov.w	r8, r8, asr #1
   d913a:	e7ca      	b.n	d90d2 <_strtod_l+0x4e2>
   d913c:	d0eb      	beq.n	d9116 <_strtod_l+0x526>
   d913e:	f1c8 0800 	rsb	r8, r8, #0
   d9142:	f018 020f 	ands.w	r2, r8, #15
   d9146:	d00a      	beq.n	d915e <_strtod_l+0x56e>
   d9148:	4b12      	ldr	r3, [pc, #72]	; (d9194 <_strtod_l+0x5a4>)
   d914a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d914e:	4650      	mov	r0, sl
   d9150:	4659      	mov	r1, fp
   d9152:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9156:	f7ff fa49 	bl	d85ec <__aeabi_ddiv>
   d915a:	4682      	mov	sl, r0
   d915c:	468b      	mov	fp, r1
   d915e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9162:	d0d8      	beq.n	d9116 <_strtod_l+0x526>
   d9164:	f1b8 0f1f 	cmp.w	r8, #31
   d9168:	dd1e      	ble.n	d91a8 <_strtod_l+0x5b8>
   d916a:	2500      	movs	r5, #0
   d916c:	462e      	mov	r6, r5
   d916e:	9509      	str	r5, [sp, #36]	; 0x24
   d9170:	9507      	str	r5, [sp, #28]
   d9172:	2322      	movs	r3, #34	; 0x22
   d9174:	f04f 0a00 	mov.w	sl, #0
   d9178:	f04f 0b00 	mov.w	fp, #0
   d917c:	6023      	str	r3, [r4, #0]
   d917e:	e789      	b.n	d9094 <_strtod_l+0x4a4>
   d9180:	000db2ca 	.word	0x000db2ca
   d9184:	000db2e4 	.word	0x000db2e4
   d9188:	000db2c1 	.word	0x000db2c1
   d918c:	000db2c4 	.word	0x000db2c4
   d9190:	000da84e 	.word	0x000da84e
   d9194:	000db460 	.word	0x000db460
   d9198:	000db438 	.word	0x000db438
   d919c:	7ff00000 	.word	0x7ff00000
   d91a0:	7ca00000 	.word	0x7ca00000
   d91a4:	7fefffff 	.word	0x7fefffff
   d91a8:	f018 0310 	ands.w	r3, r8, #16
   d91ac:	bf18      	it	ne
   d91ae:	236a      	movne	r3, #106	; 0x6a
   d91b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9568 <_strtod_l+0x978>
   d91b4:	9304      	str	r3, [sp, #16]
   d91b6:	4650      	mov	r0, sl
   d91b8:	4659      	mov	r1, fp
   d91ba:	2300      	movs	r3, #0
   d91bc:	f018 0f01 	tst.w	r8, #1
   d91c0:	d004      	beq.n	d91cc <_strtod_l+0x5dc>
   d91c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   d91c6:	f7ff f8e7 	bl	d8398 <__aeabi_dmul>
   d91ca:	2301      	movs	r3, #1
   d91cc:	ea5f 0868 	movs.w	r8, r8, asr #1
   d91d0:	f109 0908 	add.w	r9, r9, #8
   d91d4:	d1f2      	bne.n	d91bc <_strtod_l+0x5cc>
   d91d6:	b10b      	cbz	r3, d91dc <_strtod_l+0x5ec>
   d91d8:	4682      	mov	sl, r0
   d91da:	468b      	mov	fp, r1
   d91dc:	9b04      	ldr	r3, [sp, #16]
   d91de:	b1bb      	cbz	r3, d9210 <_strtod_l+0x620>
   d91e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d91e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d91e8:	2b00      	cmp	r3, #0
   d91ea:	4659      	mov	r1, fp
   d91ec:	dd10      	ble.n	d9210 <_strtod_l+0x620>
   d91ee:	2b1f      	cmp	r3, #31
   d91f0:	f340 8128 	ble.w	d9444 <_strtod_l+0x854>
   d91f4:	2b34      	cmp	r3, #52	; 0x34
   d91f6:	bfde      	ittt	le
   d91f8:	3b20      	suble	r3, #32
   d91fa:	f04f 32ff 	movle.w	r2, #4294967295
   d91fe:	fa02 f303 	lslle.w	r3, r2, r3
   d9202:	f04f 0a00 	mov.w	sl, #0
   d9206:	bfcc      	ite	gt
   d9208:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d920c:	ea03 0b01 	andle.w	fp, r3, r1
   d9210:	2200      	movs	r2, #0
   d9212:	2300      	movs	r3, #0
   d9214:	4650      	mov	r0, sl
   d9216:	4659      	mov	r1, fp
   d9218:	f7ff fb26 	bl	d8868 <__aeabi_dcmpeq>
   d921c:	2800      	cmp	r0, #0
   d921e:	d1a4      	bne.n	d916a <_strtod_l+0x57a>
   d9220:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9222:	9300      	str	r3, [sp, #0]
   d9224:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9226:	462b      	mov	r3, r5
   d9228:	463a      	mov	r2, r7
   d922a:	4620      	mov	r0, r4
   d922c:	f000 feef 	bl	da00e <__s2b>
   d9230:	9009      	str	r0, [sp, #36]	; 0x24
   d9232:	2800      	cmp	r0, #0
   d9234:	f43f af24 	beq.w	d9080 <_strtod_l+0x490>
   d9238:	9b07      	ldr	r3, [sp, #28]
   d923a:	1b9e      	subs	r6, r3, r6
   d923c:	9b08      	ldr	r3, [sp, #32]
   d923e:	2b00      	cmp	r3, #0
   d9240:	bfb4      	ite	lt
   d9242:	4633      	movlt	r3, r6
   d9244:	2300      	movge	r3, #0
   d9246:	9310      	str	r3, [sp, #64]	; 0x40
   d9248:	9b08      	ldr	r3, [sp, #32]
   d924a:	2500      	movs	r5, #0
   d924c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9250:	9318      	str	r3, [sp, #96]	; 0x60
   d9252:	462e      	mov	r6, r5
   d9254:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9256:	4620      	mov	r0, r4
   d9258:	6859      	ldr	r1, [r3, #4]
   d925a:	f000 fe4f 	bl	d9efc <_Balloc>
   d925e:	9007      	str	r0, [sp, #28]
   d9260:	2800      	cmp	r0, #0
   d9262:	f43f af11 	beq.w	d9088 <_strtod_l+0x498>
   d9266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9268:	691a      	ldr	r2, [r3, #16]
   d926a:	3202      	adds	r2, #2
   d926c:	f103 010c 	add.w	r1, r3, #12
   d9270:	0092      	lsls	r2, r2, #2
   d9272:	300c      	adds	r0, #12
   d9274:	f7ff fc06 	bl	d8a84 <memcpy>
   d9278:	ec4b ab10 	vmov	d0, sl, fp
   d927c:	aa20      	add	r2, sp, #128	; 0x80
   d927e:	a91f      	add	r1, sp, #124	; 0x7c
   d9280:	4620      	mov	r0, r4
   d9282:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d9286:	f001 f9b1 	bl	da5ec <__d2b>
   d928a:	901e      	str	r0, [sp, #120]	; 0x78
   d928c:	2800      	cmp	r0, #0
   d928e:	f43f aefb 	beq.w	d9088 <_strtod_l+0x498>
   d9292:	2101      	movs	r1, #1
   d9294:	4620      	mov	r0, r4
   d9296:	f000 ff48 	bl	da12a <__i2b>
   d929a:	4606      	mov	r6, r0
   d929c:	2800      	cmp	r0, #0
   d929e:	f43f aef3 	beq.w	d9088 <_strtod_l+0x498>
   d92a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d92a4:	9904      	ldr	r1, [sp, #16]
   d92a6:	2b00      	cmp	r3, #0
   d92a8:	bfab      	itete	ge
   d92aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d92ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d92ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d92b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d92b4:	bfac      	ite	ge
   d92b6:	eb03 0902 	addge.w	r9, r3, r2
   d92ba:	1ad7      	sublt	r7, r2, r3
   d92bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d92be:	eba3 0801 	sub.w	r8, r3, r1
   d92c2:	4490      	add	r8, r2
   d92c4:	4ba3      	ldr	r3, [pc, #652]	; (d9554 <_strtod_l+0x964>)
   d92c6:	f108 38ff 	add.w	r8, r8, #4294967295
   d92ca:	4598      	cmp	r8, r3
   d92cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d92d0:	f280 80cc 	bge.w	d946c <_strtod_l+0x87c>
   d92d4:	eba3 0308 	sub.w	r3, r3, r8
   d92d8:	2b1f      	cmp	r3, #31
   d92da:	eba2 0203 	sub.w	r2, r2, r3
   d92de:	f04f 0101 	mov.w	r1, #1
   d92e2:	f300 80b6 	bgt.w	d9452 <_strtod_l+0x862>
   d92e6:	fa01 f303 	lsl.w	r3, r1, r3
   d92ea:	9311      	str	r3, [sp, #68]	; 0x44
   d92ec:	2300      	movs	r3, #0
   d92ee:	930c      	str	r3, [sp, #48]	; 0x30
   d92f0:	eb09 0802 	add.w	r8, r9, r2
   d92f4:	9b04      	ldr	r3, [sp, #16]
   d92f6:	45c1      	cmp	r9, r8
   d92f8:	4417      	add	r7, r2
   d92fa:	441f      	add	r7, r3
   d92fc:	464b      	mov	r3, r9
   d92fe:	bfa8      	it	ge
   d9300:	4643      	movge	r3, r8
   d9302:	42bb      	cmp	r3, r7
   d9304:	bfa8      	it	ge
   d9306:	463b      	movge	r3, r7
   d9308:	2b00      	cmp	r3, #0
   d930a:	bfc2      	ittt	gt
   d930c:	eba8 0803 	subgt.w	r8, r8, r3
   d9310:	1aff      	subgt	r7, r7, r3
   d9312:	eba9 0903 	subgt.w	r9, r9, r3
   d9316:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9318:	2b00      	cmp	r3, #0
   d931a:	dd17      	ble.n	d934c <_strtod_l+0x75c>
   d931c:	4631      	mov	r1, r6
   d931e:	461a      	mov	r2, r3
   d9320:	4620      	mov	r0, r4
   d9322:	f000 ffa7 	bl	da274 <__pow5mult>
   d9326:	4606      	mov	r6, r0
   d9328:	2800      	cmp	r0, #0
   d932a:	f43f aead 	beq.w	d9088 <_strtod_l+0x498>
   d932e:	4601      	mov	r1, r0
   d9330:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9332:	4620      	mov	r0, r4
   d9334:	f000 ff02 	bl	da13c <__multiply>
   d9338:	900f      	str	r0, [sp, #60]	; 0x3c
   d933a:	2800      	cmp	r0, #0
   d933c:	f43f aea4 	beq.w	d9088 <_strtod_l+0x498>
   d9340:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9342:	4620      	mov	r0, r4
   d9344:	f000 fe0e 	bl	d9f64 <_Bfree>
   d9348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d934a:	931e      	str	r3, [sp, #120]	; 0x78
   d934c:	f1b8 0f00 	cmp.w	r8, #0
   d9350:	f300 8091 	bgt.w	d9476 <_strtod_l+0x886>
   d9354:	9b08      	ldr	r3, [sp, #32]
   d9356:	2b00      	cmp	r3, #0
   d9358:	dd08      	ble.n	d936c <_strtod_l+0x77c>
   d935a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d935c:	9907      	ldr	r1, [sp, #28]
   d935e:	4620      	mov	r0, r4
   d9360:	f000 ff88 	bl	da274 <__pow5mult>
   d9364:	9007      	str	r0, [sp, #28]
   d9366:	2800      	cmp	r0, #0
   d9368:	f43f ae8e 	beq.w	d9088 <_strtod_l+0x498>
   d936c:	2f00      	cmp	r7, #0
   d936e:	dd08      	ble.n	d9382 <_strtod_l+0x792>
   d9370:	9907      	ldr	r1, [sp, #28]
   d9372:	463a      	mov	r2, r7
   d9374:	4620      	mov	r0, r4
   d9376:	f000 ffcb 	bl	da310 <__lshift>
   d937a:	9007      	str	r0, [sp, #28]
   d937c:	2800      	cmp	r0, #0
   d937e:	f43f ae83 	beq.w	d9088 <_strtod_l+0x498>
   d9382:	f1b9 0f00 	cmp.w	r9, #0
   d9386:	dd08      	ble.n	d939a <_strtod_l+0x7aa>
   d9388:	4631      	mov	r1, r6
   d938a:	464a      	mov	r2, r9
   d938c:	4620      	mov	r0, r4
   d938e:	f000 ffbf 	bl	da310 <__lshift>
   d9392:	4606      	mov	r6, r0
   d9394:	2800      	cmp	r0, #0
   d9396:	f43f ae77 	beq.w	d9088 <_strtod_l+0x498>
   d939a:	9a07      	ldr	r2, [sp, #28]
   d939c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d939e:	4620      	mov	r0, r4
   d93a0:	f001 f831 	bl	da406 <__mdiff>
   d93a4:	4605      	mov	r5, r0
   d93a6:	2800      	cmp	r0, #0
   d93a8:	f43f ae6e 	beq.w	d9088 <_strtod_l+0x498>
   d93ac:	68c3      	ldr	r3, [r0, #12]
   d93ae:	930f      	str	r3, [sp, #60]	; 0x3c
   d93b0:	2300      	movs	r3, #0
   d93b2:	60c3      	str	r3, [r0, #12]
   d93b4:	4631      	mov	r1, r6
   d93b6:	f001 f80a 	bl	da3ce <__mcmp>
   d93ba:	2800      	cmp	r0, #0
   d93bc:	da65      	bge.n	d948a <_strtod_l+0x89a>
   d93be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d93c0:	ea53 030a 	orrs.w	r3, r3, sl
   d93c4:	f040 8087 	bne.w	d94d6 <_strtod_l+0x8e6>
   d93c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d93cc:	2b00      	cmp	r3, #0
   d93ce:	f040 8082 	bne.w	d94d6 <_strtod_l+0x8e6>
   d93d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d93d6:	0d1b      	lsrs	r3, r3, #20
   d93d8:	051b      	lsls	r3, r3, #20
   d93da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d93de:	d97a      	bls.n	d94d6 <_strtod_l+0x8e6>
   d93e0:	696b      	ldr	r3, [r5, #20]
   d93e2:	b913      	cbnz	r3, d93ea <_strtod_l+0x7fa>
   d93e4:	692b      	ldr	r3, [r5, #16]
   d93e6:	2b01      	cmp	r3, #1
   d93e8:	dd75      	ble.n	d94d6 <_strtod_l+0x8e6>
   d93ea:	4629      	mov	r1, r5
   d93ec:	2201      	movs	r2, #1
   d93ee:	4620      	mov	r0, r4
   d93f0:	f000 ff8e 	bl	da310 <__lshift>
   d93f4:	4631      	mov	r1, r6
   d93f6:	4605      	mov	r5, r0
   d93f8:	f000 ffe9 	bl	da3ce <__mcmp>
   d93fc:	2800      	cmp	r0, #0
   d93fe:	dd6a      	ble.n	d94d6 <_strtod_l+0x8e6>
   d9400:	9904      	ldr	r1, [sp, #16]
   d9402:	4a55      	ldr	r2, [pc, #340]	; (d9558 <_strtod_l+0x968>)
   d9404:	465b      	mov	r3, fp
   d9406:	2900      	cmp	r1, #0
   d9408:	f000 8085 	beq.w	d9516 <_strtod_l+0x926>
   d940c:	ea02 010b 	and.w	r1, r2, fp
   d9410:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9414:	dc7f      	bgt.n	d9516 <_strtod_l+0x926>
   d9416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d941a:	f77f aeaa 	ble.w	d9172 <_strtod_l+0x582>
   d941e:	4a4f      	ldr	r2, [pc, #316]	; (d955c <_strtod_l+0x96c>)
   d9420:	2300      	movs	r3, #0
   d9422:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9426:	4650      	mov	r0, sl
   d9428:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d942c:	4659      	mov	r1, fp
   d942e:	f7fe ffb3 	bl	d8398 <__aeabi_dmul>
   d9432:	460b      	mov	r3, r1
   d9434:	4303      	orrs	r3, r0
   d9436:	bf08      	it	eq
   d9438:	2322      	moveq	r3, #34	; 0x22
   d943a:	4682      	mov	sl, r0
   d943c:	468b      	mov	fp, r1
   d943e:	bf08      	it	eq
   d9440:	6023      	streq	r3, [r4, #0]
   d9442:	e62b      	b.n	d909c <_strtod_l+0x4ac>
   d9444:	f04f 32ff 	mov.w	r2, #4294967295
   d9448:	fa02 f303 	lsl.w	r3, r2, r3
   d944c:	ea03 0a0a 	and.w	sl, r3, sl
   d9450:	e6de      	b.n	d9210 <_strtod_l+0x620>
   d9452:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9456:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d945a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d945e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9462:	fa01 f308 	lsl.w	r3, r1, r8
   d9466:	930c      	str	r3, [sp, #48]	; 0x30
   d9468:	9111      	str	r1, [sp, #68]	; 0x44
   d946a:	e741      	b.n	d92f0 <_strtod_l+0x700>
   d946c:	2300      	movs	r3, #0
   d946e:	930c      	str	r3, [sp, #48]	; 0x30
   d9470:	2301      	movs	r3, #1
   d9472:	9311      	str	r3, [sp, #68]	; 0x44
   d9474:	e73c      	b.n	d92f0 <_strtod_l+0x700>
   d9476:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9478:	4642      	mov	r2, r8
   d947a:	4620      	mov	r0, r4
   d947c:	f000 ff48 	bl	da310 <__lshift>
   d9480:	901e      	str	r0, [sp, #120]	; 0x78
   d9482:	2800      	cmp	r0, #0
   d9484:	f47f af66 	bne.w	d9354 <_strtod_l+0x764>
   d9488:	e5fe      	b.n	d9088 <_strtod_l+0x498>
   d948a:	465f      	mov	r7, fp
   d948c:	d16e      	bne.n	d956c <_strtod_l+0x97c>
   d948e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9490:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9494:	b342      	cbz	r2, d94e8 <_strtod_l+0x8f8>
   d9496:	4a32      	ldr	r2, [pc, #200]	; (d9560 <_strtod_l+0x970>)
   d9498:	4293      	cmp	r3, r2
   d949a:	d128      	bne.n	d94ee <_strtod_l+0x8fe>
   d949c:	9b04      	ldr	r3, [sp, #16]
   d949e:	4650      	mov	r0, sl
   d94a0:	b1eb      	cbz	r3, d94de <_strtod_l+0x8ee>
   d94a2:	4a2d      	ldr	r2, [pc, #180]	; (d9558 <_strtod_l+0x968>)
   d94a4:	403a      	ands	r2, r7
   d94a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d94aa:	f04f 31ff 	mov.w	r1, #4294967295
   d94ae:	d819      	bhi.n	d94e4 <_strtod_l+0x8f4>
   d94b0:	0d12      	lsrs	r2, r2, #20
   d94b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d94b6:	fa01 f303 	lsl.w	r3, r1, r3
   d94ba:	4298      	cmp	r0, r3
   d94bc:	d117      	bne.n	d94ee <_strtod_l+0x8fe>
   d94be:	4b29      	ldr	r3, [pc, #164]	; (d9564 <_strtod_l+0x974>)
   d94c0:	429f      	cmp	r7, r3
   d94c2:	d102      	bne.n	d94ca <_strtod_l+0x8da>
   d94c4:	3001      	adds	r0, #1
   d94c6:	f43f addf 	beq.w	d9088 <_strtod_l+0x498>
   d94ca:	4b23      	ldr	r3, [pc, #140]	; (d9558 <_strtod_l+0x968>)
   d94cc:	403b      	ands	r3, r7
   d94ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d94d2:	f04f 0a00 	mov.w	sl, #0
   d94d6:	9b04      	ldr	r3, [sp, #16]
   d94d8:	2b00      	cmp	r3, #0
   d94da:	d1a0      	bne.n	d941e <_strtod_l+0x82e>
   d94dc:	e5de      	b.n	d909c <_strtod_l+0x4ac>
   d94de:	f04f 33ff 	mov.w	r3, #4294967295
   d94e2:	e7ea      	b.n	d94ba <_strtod_l+0x8ca>
   d94e4:	460b      	mov	r3, r1
   d94e6:	e7e8      	b.n	d94ba <_strtod_l+0x8ca>
   d94e8:	ea53 030a 	orrs.w	r3, r3, sl
   d94ec:	d088      	beq.n	d9400 <_strtod_l+0x810>
   d94ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d94f0:	b1db      	cbz	r3, d952a <_strtod_l+0x93a>
   d94f2:	423b      	tst	r3, r7
   d94f4:	d0ef      	beq.n	d94d6 <_strtod_l+0x8e6>
   d94f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d94f8:	9a04      	ldr	r2, [sp, #16]
   d94fa:	4650      	mov	r0, sl
   d94fc:	4659      	mov	r1, fp
   d94fe:	b1c3      	cbz	r3, d9532 <_strtod_l+0x942>
   d9500:	f7ff fb5a 	bl	d8bb8 <sulp>
   d9504:	4602      	mov	r2, r0
   d9506:	460b      	mov	r3, r1
   d9508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d950c:	f7fe fd8e 	bl	d802c <__adddf3>
   d9510:	4682      	mov	sl, r0
   d9512:	468b      	mov	fp, r1
   d9514:	e7df      	b.n	d94d6 <_strtod_l+0x8e6>
   d9516:	4013      	ands	r3, r2
   d9518:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d951c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9520:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9524:	f04f 3aff 	mov.w	sl, #4294967295
   d9528:	e7d5      	b.n	d94d6 <_strtod_l+0x8e6>
   d952a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d952c:	ea13 0f0a 	tst.w	r3, sl
   d9530:	e7e0      	b.n	d94f4 <_strtod_l+0x904>
   d9532:	f7ff fb41 	bl	d8bb8 <sulp>
   d9536:	4602      	mov	r2, r0
   d9538:	460b      	mov	r3, r1
   d953a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d953e:	f7fe fd73 	bl	d8028 <__aeabi_dsub>
   d9542:	2200      	movs	r2, #0
   d9544:	2300      	movs	r3, #0
   d9546:	4682      	mov	sl, r0
   d9548:	468b      	mov	fp, r1
   d954a:	f7ff f98d 	bl	d8868 <__aeabi_dcmpeq>
   d954e:	2800      	cmp	r0, #0
   d9550:	d0c1      	beq.n	d94d6 <_strtod_l+0x8e6>
   d9552:	e60e      	b.n	d9172 <_strtod_l+0x582>
   d9554:	fffffc02 	.word	0xfffffc02
   d9558:	7ff00000 	.word	0x7ff00000
   d955c:	39500000 	.word	0x39500000
   d9560:	000fffff 	.word	0x000fffff
   d9564:	7fefffff 	.word	0x7fefffff
   d9568:	000db2f8 	.word	0x000db2f8
   d956c:	4631      	mov	r1, r6
   d956e:	4628      	mov	r0, r5
   d9570:	f001 f88c 	bl	da68c <__ratio>
   d9574:	ec59 8b10 	vmov	r8, r9, d0
   d9578:	ee10 0a10 	vmov	r0, s0
   d957c:	2200      	movs	r2, #0
   d957e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9582:	4649      	mov	r1, r9
   d9584:	f7ff f984 	bl	d8890 <__aeabi_dcmple>
   d9588:	2800      	cmp	r0, #0
   d958a:	d07c      	beq.n	d9686 <_strtod_l+0xa96>
   d958c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d958e:	2b00      	cmp	r3, #0
   d9590:	d04c      	beq.n	d962c <_strtod_l+0xa3c>
   d9592:	4b95      	ldr	r3, [pc, #596]	; (d97e8 <_strtod_l+0xbf8>)
   d9594:	2200      	movs	r2, #0
   d9596:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d959a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d97e8 <_strtod_l+0xbf8>
   d959e:	f04f 0800 	mov.w	r8, #0
   d95a2:	4b92      	ldr	r3, [pc, #584]	; (d97ec <_strtod_l+0xbfc>)
   d95a4:	403b      	ands	r3, r7
   d95a6:	9311      	str	r3, [sp, #68]	; 0x44
   d95a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d95aa:	4b91      	ldr	r3, [pc, #580]	; (d97f0 <_strtod_l+0xc00>)
   d95ac:	429a      	cmp	r2, r3
   d95ae:	f040 80b2 	bne.w	d9716 <_strtod_l+0xb26>
   d95b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d95b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d95ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d95be:	ec4b ab10 	vmov	d0, sl, fp
   d95c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d95c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d95ca:	f000 ff93 	bl	da4f4 <__ulp>
   d95ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d95d2:	ec53 2b10 	vmov	r2, r3, d0
   d95d6:	f7fe fedf 	bl	d8398 <__aeabi_dmul>
   d95da:	4652      	mov	r2, sl
   d95dc:	465b      	mov	r3, fp
   d95de:	f7fe fd25 	bl	d802c <__adddf3>
   d95e2:	460b      	mov	r3, r1
   d95e4:	4981      	ldr	r1, [pc, #516]	; (d97ec <_strtod_l+0xbfc>)
   d95e6:	4a83      	ldr	r2, [pc, #524]	; (d97f4 <_strtod_l+0xc04>)
   d95e8:	4019      	ands	r1, r3
   d95ea:	4291      	cmp	r1, r2
   d95ec:	4682      	mov	sl, r0
   d95ee:	d95e      	bls.n	d96ae <_strtod_l+0xabe>
   d95f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d95f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d95f6:	4293      	cmp	r3, r2
   d95f8:	d103      	bne.n	d9602 <_strtod_l+0xa12>
   d95fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d95fc:	3301      	adds	r3, #1
   d95fe:	f43f ad43 	beq.w	d9088 <_strtod_l+0x498>
   d9602:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9800 <_strtod_l+0xc10>
   d9606:	f04f 3aff 	mov.w	sl, #4294967295
   d960a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d960c:	4620      	mov	r0, r4
   d960e:	f000 fca9 	bl	d9f64 <_Bfree>
   d9612:	9907      	ldr	r1, [sp, #28]
   d9614:	4620      	mov	r0, r4
   d9616:	f000 fca5 	bl	d9f64 <_Bfree>
   d961a:	4631      	mov	r1, r6
   d961c:	4620      	mov	r0, r4
   d961e:	f000 fca1 	bl	d9f64 <_Bfree>
   d9622:	4629      	mov	r1, r5
   d9624:	4620      	mov	r0, r4
   d9626:	f000 fc9d 	bl	d9f64 <_Bfree>
   d962a:	e613      	b.n	d9254 <_strtod_l+0x664>
   d962c:	f1ba 0f00 	cmp.w	sl, #0
   d9630:	d11b      	bne.n	d966a <_strtod_l+0xa7a>
   d9632:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9636:	b9f3      	cbnz	r3, d9676 <_strtod_l+0xa86>
   d9638:	4b6b      	ldr	r3, [pc, #428]	; (d97e8 <_strtod_l+0xbf8>)
   d963a:	2200      	movs	r2, #0
   d963c:	4640      	mov	r0, r8
   d963e:	4649      	mov	r1, r9
   d9640:	f7ff f91c 	bl	d887c <__aeabi_dcmplt>
   d9644:	b9d0      	cbnz	r0, d967c <_strtod_l+0xa8c>
   d9646:	4640      	mov	r0, r8
   d9648:	4649      	mov	r1, r9
   d964a:	4b6b      	ldr	r3, [pc, #428]	; (d97f8 <_strtod_l+0xc08>)
   d964c:	2200      	movs	r2, #0
   d964e:	f7fe fea3 	bl	d8398 <__aeabi_dmul>
   d9652:	4680      	mov	r8, r0
   d9654:	4689      	mov	r9, r1
   d9656:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d965a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d965e:	931b      	str	r3, [sp, #108]	; 0x6c
   d9660:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9664:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9668:	e79b      	b.n	d95a2 <_strtod_l+0x9b2>
   d966a:	f1ba 0f01 	cmp.w	sl, #1
   d966e:	d102      	bne.n	d9676 <_strtod_l+0xa86>
   d9670:	2f00      	cmp	r7, #0
   d9672:	f43f ad7e 	beq.w	d9172 <_strtod_l+0x582>
   d9676:	4b61      	ldr	r3, [pc, #388]	; (d97fc <_strtod_l+0xc0c>)
   d9678:	2200      	movs	r2, #0
   d967a:	e78c      	b.n	d9596 <_strtod_l+0x9a6>
   d967c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d97f8 <_strtod_l+0xc08>
   d9680:	f04f 0800 	mov.w	r8, #0
   d9684:	e7e7      	b.n	d9656 <_strtod_l+0xa66>
   d9686:	4b5c      	ldr	r3, [pc, #368]	; (d97f8 <_strtod_l+0xc08>)
   d9688:	4640      	mov	r0, r8
   d968a:	4649      	mov	r1, r9
   d968c:	2200      	movs	r2, #0
   d968e:	f7fe fe83 	bl	d8398 <__aeabi_dmul>
   d9692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9694:	4680      	mov	r8, r0
   d9696:	4689      	mov	r9, r1
   d9698:	b933      	cbnz	r3, d96a8 <_strtod_l+0xab8>
   d969a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d969e:	9012      	str	r0, [sp, #72]	; 0x48
   d96a0:	9313      	str	r3, [sp, #76]	; 0x4c
   d96a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d96a6:	e7dd      	b.n	d9664 <_strtod_l+0xa74>
   d96a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d96ac:	e7f9      	b.n	d96a2 <_strtod_l+0xab2>
   d96ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d96b2:	9b04      	ldr	r3, [sp, #16]
   d96b4:	2b00      	cmp	r3, #0
   d96b6:	d1a8      	bne.n	d960a <_strtod_l+0xa1a>
   d96b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d96bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d96be:	0d1b      	lsrs	r3, r3, #20
   d96c0:	051b      	lsls	r3, r3, #20
   d96c2:	429a      	cmp	r2, r3
   d96c4:	d1a1      	bne.n	d960a <_strtod_l+0xa1a>
   d96c6:	4640      	mov	r0, r8
   d96c8:	4649      	mov	r1, r9
   d96ca:	f001 f873 	bl	da7b4 <__aeabi_d2lz>
   d96ce:	f7fe fe35 	bl	d833c <__aeabi_l2d>
   d96d2:	4602      	mov	r2, r0
   d96d4:	460b      	mov	r3, r1
   d96d6:	4640      	mov	r0, r8
   d96d8:	4649      	mov	r1, r9
   d96da:	f7fe fca5 	bl	d8028 <__aeabi_dsub>
   d96de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d96e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d96e4:	ea43 030a 	orr.w	r3, r3, sl
   d96e8:	4313      	orrs	r3, r2
   d96ea:	4680      	mov	r8, r0
   d96ec:	4689      	mov	r9, r1
   d96ee:	d053      	beq.n	d9798 <_strtod_l+0xba8>
   d96f0:	a335      	add	r3, pc, #212	; (adr r3, d97c8 <_strtod_l+0xbd8>)
   d96f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96f6:	f7ff f8c1 	bl	d887c <__aeabi_dcmplt>
   d96fa:	2800      	cmp	r0, #0
   d96fc:	f47f acce 	bne.w	d909c <_strtod_l+0x4ac>
   d9700:	a333      	add	r3, pc, #204	; (adr r3, d97d0 <_strtod_l+0xbe0>)
   d9702:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9706:	4640      	mov	r0, r8
   d9708:	4649      	mov	r1, r9
   d970a:	f7ff f8d5 	bl	d88b8 <__aeabi_dcmpgt>
   d970e:	2800      	cmp	r0, #0
   d9710:	f43f af7b 	beq.w	d960a <_strtod_l+0xa1a>
   d9714:	e4c2      	b.n	d909c <_strtod_l+0x4ac>
   d9716:	9b04      	ldr	r3, [sp, #16]
   d9718:	b333      	cbz	r3, d9768 <_strtod_l+0xb78>
   d971a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d971c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9720:	d822      	bhi.n	d9768 <_strtod_l+0xb78>
   d9722:	a32d      	add	r3, pc, #180	; (adr r3, d97d8 <_strtod_l+0xbe8>)
   d9724:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9728:	4640      	mov	r0, r8
   d972a:	4649      	mov	r1, r9
   d972c:	f7ff f8b0 	bl	d8890 <__aeabi_dcmple>
   d9730:	b1a0      	cbz	r0, d975c <_strtod_l+0xb6c>
   d9732:	4649      	mov	r1, r9
   d9734:	4640      	mov	r0, r8
   d9736:	f7ff f8c9 	bl	d88cc <__aeabi_d2uiz>
   d973a:	2801      	cmp	r0, #1
   d973c:	bf38      	it	cc
   d973e:	2001      	movcc	r0, #1
   d9740:	f7fe fdb0 	bl	d82a4 <__aeabi_ui2d>
   d9744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9746:	4680      	mov	r8, r0
   d9748:	4689      	mov	r9, r1
   d974a:	bb13      	cbnz	r3, d9792 <_strtod_l+0xba2>
   d974c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9750:	9014      	str	r0, [sp, #80]	; 0x50
   d9752:	9315      	str	r3, [sp, #84]	; 0x54
   d9754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9758:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d975c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d975e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9760:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9764:	1a9b      	subs	r3, r3, r2
   d9766:	930d      	str	r3, [sp, #52]	; 0x34
   d9768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d976c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9770:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9774:	f000 febe 	bl	da4f4 <__ulp>
   d9778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d977c:	ec53 2b10 	vmov	r2, r3, d0
   d9780:	f7fe fe0a 	bl	d8398 <__aeabi_dmul>
   d9784:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9788:	f7fe fc50 	bl	d802c <__adddf3>
   d978c:	4682      	mov	sl, r0
   d978e:	468b      	mov	fp, r1
   d9790:	e78f      	b.n	d96b2 <_strtod_l+0xac2>
   d9792:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9796:	e7dd      	b.n	d9754 <_strtod_l+0xb64>
   d9798:	a311      	add	r3, pc, #68	; (adr r3, d97e0 <_strtod_l+0xbf0>)
   d979a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d979e:	f7ff f86d 	bl	d887c <__aeabi_dcmplt>
   d97a2:	e7b4      	b.n	d970e <_strtod_l+0xb1e>
   d97a4:	2300      	movs	r3, #0
   d97a6:	930e      	str	r3, [sp, #56]	; 0x38
   d97a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d97aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d97ac:	6013      	str	r3, [r2, #0]
   d97ae:	f7ff ba65 	b.w	d8c7c <_strtod_l+0x8c>
   d97b2:	2b65      	cmp	r3, #101	; 0x65
   d97b4:	f43f ab5d 	beq.w	d8e72 <_strtod_l+0x282>
   d97b8:	2b45      	cmp	r3, #69	; 0x45
   d97ba:	f43f ab5a 	beq.w	d8e72 <_strtod_l+0x282>
   d97be:	2201      	movs	r2, #1
   d97c0:	f7ff bb92 	b.w	d8ee8 <_strtod_l+0x2f8>
   d97c4:	f3af 8000 	nop.w
   d97c8:	94a03595 	.word	0x94a03595
   d97cc:	3fdfffff 	.word	0x3fdfffff
   d97d0:	35afe535 	.word	0x35afe535
   d97d4:	3fe00000 	.word	0x3fe00000
   d97d8:	ffc00000 	.word	0xffc00000
   d97dc:	41dfffff 	.word	0x41dfffff
   d97e0:	94a03595 	.word	0x94a03595
   d97e4:	3fcfffff 	.word	0x3fcfffff
   d97e8:	3ff00000 	.word	0x3ff00000
   d97ec:	7ff00000 	.word	0x7ff00000
   d97f0:	7fe00000 	.word	0x7fe00000
   d97f4:	7c9fffff 	.word	0x7c9fffff
   d97f8:	3fe00000 	.word	0x3fe00000
   d97fc:	bff00000 	.word	0xbff00000
   d9800:	7fefffff 	.word	0x7fefffff

000d9804 <strtod>:
   d9804:	460a      	mov	r2, r1
   d9806:	4601      	mov	r1, r0
   d9808:	4802      	ldr	r0, [pc, #8]	; (d9814 <strtod+0x10>)
   d980a:	4b03      	ldr	r3, [pc, #12]	; (d9818 <strtod+0x14>)
   d980c:	6800      	ldr	r0, [r0, #0]
   d980e:	f7ff b9ef 	b.w	d8bf0 <_strtod_l>
   d9812:	bf00      	nop
   d9814:	2003e1e0 	.word	0x2003e1e0
   d9818:	2003e248 	.word	0x2003e248

000d981c <rshift>:
   d981c:	6903      	ldr	r3, [r0, #16]
   d981e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9826:	ea4f 1261 	mov.w	r2, r1, asr #5
   d982a:	f100 0414 	add.w	r4, r0, #20
   d982e:	dd45      	ble.n	d98bc <rshift+0xa0>
   d9830:	f011 011f 	ands.w	r1, r1, #31
   d9834:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9838:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d983c:	d10c      	bne.n	d9858 <rshift+0x3c>
   d983e:	f100 0710 	add.w	r7, r0, #16
   d9842:	4629      	mov	r1, r5
   d9844:	42b1      	cmp	r1, r6
   d9846:	d334      	bcc.n	d98b2 <rshift+0x96>
   d9848:	1a9b      	subs	r3, r3, r2
   d984a:	009b      	lsls	r3, r3, #2
   d984c:	1eea      	subs	r2, r5, #3
   d984e:	4296      	cmp	r6, r2
   d9850:	bf38      	it	cc
   d9852:	2300      	movcc	r3, #0
   d9854:	4423      	add	r3, r4
   d9856:	e015      	b.n	d9884 <rshift+0x68>
   d9858:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d985c:	f1c1 0820 	rsb	r8, r1, #32
   d9860:	40cf      	lsrs	r7, r1
   d9862:	f105 0e04 	add.w	lr, r5, #4
   d9866:	46a1      	mov	r9, r4
   d9868:	4576      	cmp	r6, lr
   d986a:	46f4      	mov	ip, lr
   d986c:	d815      	bhi.n	d989a <rshift+0x7e>
   d986e:	1a9b      	subs	r3, r3, r2
   d9870:	009a      	lsls	r2, r3, #2
   d9872:	3a04      	subs	r2, #4
   d9874:	3501      	adds	r5, #1
   d9876:	42ae      	cmp	r6, r5
   d9878:	bf38      	it	cc
   d987a:	2200      	movcc	r2, #0
   d987c:	18a3      	adds	r3, r4, r2
   d987e:	50a7      	str	r7, [r4, r2]
   d9880:	b107      	cbz	r7, d9884 <rshift+0x68>
   d9882:	3304      	adds	r3, #4
   d9884:	1b1a      	subs	r2, r3, r4
   d9886:	42a3      	cmp	r3, r4
   d9888:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d988c:	bf08      	it	eq
   d988e:	2300      	moveq	r3, #0
   d9890:	6102      	str	r2, [r0, #16]
   d9892:	bf08      	it	eq
   d9894:	6143      	streq	r3, [r0, #20]
   d9896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d989a:	f8dc c000 	ldr.w	ip, [ip]
   d989e:	fa0c fc08 	lsl.w	ip, ip, r8
   d98a2:	ea4c 0707 	orr.w	r7, ip, r7
   d98a6:	f849 7b04 	str.w	r7, [r9], #4
   d98aa:	f85e 7b04 	ldr.w	r7, [lr], #4
   d98ae:	40cf      	lsrs	r7, r1
   d98b0:	e7da      	b.n	d9868 <rshift+0x4c>
   d98b2:	f851 cb04 	ldr.w	ip, [r1], #4
   d98b6:	f847 cf04 	str.w	ip, [r7, #4]!
   d98ba:	e7c3      	b.n	d9844 <rshift+0x28>
   d98bc:	4623      	mov	r3, r4
   d98be:	e7e1      	b.n	d9884 <rshift+0x68>

000d98c0 <__hexdig_fun>:
   d98c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d98c4:	2b09      	cmp	r3, #9
   d98c6:	d802      	bhi.n	d98ce <__hexdig_fun+0xe>
   d98c8:	3820      	subs	r0, #32
   d98ca:	b2c0      	uxtb	r0, r0
   d98cc:	4770      	bx	lr
   d98ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d98d2:	2b05      	cmp	r3, #5
   d98d4:	d801      	bhi.n	d98da <__hexdig_fun+0x1a>
   d98d6:	3847      	subs	r0, #71	; 0x47
   d98d8:	e7f7      	b.n	d98ca <__hexdig_fun+0xa>
   d98da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d98de:	2b05      	cmp	r3, #5
   d98e0:	d801      	bhi.n	d98e6 <__hexdig_fun+0x26>
   d98e2:	3827      	subs	r0, #39	; 0x27
   d98e4:	e7f1      	b.n	d98ca <__hexdig_fun+0xa>
   d98e6:	2000      	movs	r0, #0
   d98e8:	4770      	bx	lr
	...

000d98ec <__gethex>:
   d98ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98f0:	ed2d 8b02 	vpush	{d8}
   d98f4:	b089      	sub	sp, #36	; 0x24
   d98f6:	ee08 0a10 	vmov	s16, r0
   d98fa:	9304      	str	r3, [sp, #16]
   d98fc:	4bbc      	ldr	r3, [pc, #752]	; (d9bf0 <__gethex+0x304>)
   d98fe:	681b      	ldr	r3, [r3, #0]
   d9900:	9301      	str	r3, [sp, #4]
   d9902:	4618      	mov	r0, r3
   d9904:	468b      	mov	fp, r1
   d9906:	4690      	mov	r8, r2
   d9908:	f7ff f93c 	bl	d8b84 <strlen>
   d990c:	9b01      	ldr	r3, [sp, #4]
   d990e:	f8db 2000 	ldr.w	r2, [fp]
   d9912:	4403      	add	r3, r0
   d9914:	4682      	mov	sl, r0
   d9916:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d991a:	9305      	str	r3, [sp, #20]
   d991c:	1c93      	adds	r3, r2, #2
   d991e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9926:	32fe      	adds	r2, #254	; 0xfe
   d9928:	18d1      	adds	r1, r2, r3
   d992a:	461f      	mov	r7, r3
   d992c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9930:	9100      	str	r1, [sp, #0]
   d9932:	2830      	cmp	r0, #48	; 0x30
   d9934:	d0f8      	beq.n	d9928 <__gethex+0x3c>
   d9936:	f7ff ffc3 	bl	d98c0 <__hexdig_fun>
   d993a:	4604      	mov	r4, r0
   d993c:	2800      	cmp	r0, #0
   d993e:	d13a      	bne.n	d99b6 <__gethex+0xca>
   d9940:	9901      	ldr	r1, [sp, #4]
   d9942:	4652      	mov	r2, sl
   d9944:	4638      	mov	r0, r7
   d9946:	f7ff f925 	bl	d8b94 <strncmp>
   d994a:	4605      	mov	r5, r0
   d994c:	2800      	cmp	r0, #0
   d994e:	d168      	bne.n	d9a22 <__gethex+0x136>
   d9950:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9954:	eb07 060a 	add.w	r6, r7, sl
   d9958:	f7ff ffb2 	bl	d98c0 <__hexdig_fun>
   d995c:	2800      	cmp	r0, #0
   d995e:	d062      	beq.n	d9a26 <__gethex+0x13a>
   d9960:	4633      	mov	r3, r6
   d9962:	7818      	ldrb	r0, [r3, #0]
   d9964:	2830      	cmp	r0, #48	; 0x30
   d9966:	461f      	mov	r7, r3
   d9968:	f103 0301 	add.w	r3, r3, #1
   d996c:	d0f9      	beq.n	d9962 <__gethex+0x76>
   d996e:	f7ff ffa7 	bl	d98c0 <__hexdig_fun>
   d9972:	2301      	movs	r3, #1
   d9974:	fab0 f480 	clz	r4, r0
   d9978:	0964      	lsrs	r4, r4, #5
   d997a:	4635      	mov	r5, r6
   d997c:	9300      	str	r3, [sp, #0]
   d997e:	463a      	mov	r2, r7
   d9980:	4616      	mov	r6, r2
   d9982:	3201      	adds	r2, #1
   d9984:	7830      	ldrb	r0, [r6, #0]
   d9986:	f7ff ff9b 	bl	d98c0 <__hexdig_fun>
   d998a:	2800      	cmp	r0, #0
   d998c:	d1f8      	bne.n	d9980 <__gethex+0x94>
   d998e:	9901      	ldr	r1, [sp, #4]
   d9990:	4652      	mov	r2, sl
   d9992:	4630      	mov	r0, r6
   d9994:	f7ff f8fe 	bl	d8b94 <strncmp>
   d9998:	b980      	cbnz	r0, d99bc <__gethex+0xd0>
   d999a:	b94d      	cbnz	r5, d99b0 <__gethex+0xc4>
   d999c:	eb06 050a 	add.w	r5, r6, sl
   d99a0:	462a      	mov	r2, r5
   d99a2:	4616      	mov	r6, r2
   d99a4:	3201      	adds	r2, #1
   d99a6:	7830      	ldrb	r0, [r6, #0]
   d99a8:	f7ff ff8a 	bl	d98c0 <__hexdig_fun>
   d99ac:	2800      	cmp	r0, #0
   d99ae:	d1f8      	bne.n	d99a2 <__gethex+0xb6>
   d99b0:	1bad      	subs	r5, r5, r6
   d99b2:	00ad      	lsls	r5, r5, #2
   d99b4:	e004      	b.n	d99c0 <__gethex+0xd4>
   d99b6:	2400      	movs	r4, #0
   d99b8:	4625      	mov	r5, r4
   d99ba:	e7e0      	b.n	d997e <__gethex+0x92>
   d99bc:	2d00      	cmp	r5, #0
   d99be:	d1f7      	bne.n	d99b0 <__gethex+0xc4>
   d99c0:	7833      	ldrb	r3, [r6, #0]
   d99c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d99c6:	2b50      	cmp	r3, #80	; 0x50
   d99c8:	d13b      	bne.n	d9a42 <__gethex+0x156>
   d99ca:	7873      	ldrb	r3, [r6, #1]
   d99cc:	2b2b      	cmp	r3, #43	; 0x2b
   d99ce:	d02c      	beq.n	d9a2a <__gethex+0x13e>
   d99d0:	2b2d      	cmp	r3, #45	; 0x2d
   d99d2:	d02e      	beq.n	d9a32 <__gethex+0x146>
   d99d4:	1c71      	adds	r1, r6, #1
   d99d6:	f04f 0900 	mov.w	r9, #0
   d99da:	7808      	ldrb	r0, [r1, #0]
   d99dc:	f7ff ff70 	bl	d98c0 <__hexdig_fun>
   d99e0:	1e43      	subs	r3, r0, #1
   d99e2:	b2db      	uxtb	r3, r3
   d99e4:	2b18      	cmp	r3, #24
   d99e6:	d82c      	bhi.n	d9a42 <__gethex+0x156>
   d99e8:	f1a0 0210 	sub.w	r2, r0, #16
   d99ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d99f0:	f7ff ff66 	bl	d98c0 <__hexdig_fun>
   d99f4:	1e43      	subs	r3, r0, #1
   d99f6:	b2db      	uxtb	r3, r3
   d99f8:	2b18      	cmp	r3, #24
   d99fa:	d91d      	bls.n	d9a38 <__gethex+0x14c>
   d99fc:	f1b9 0f00 	cmp.w	r9, #0
   d9a00:	d000      	beq.n	d9a04 <__gethex+0x118>
   d9a02:	4252      	negs	r2, r2
   d9a04:	4415      	add	r5, r2
   d9a06:	f8cb 1000 	str.w	r1, [fp]
   d9a0a:	b1e4      	cbz	r4, d9a46 <__gethex+0x15a>
   d9a0c:	9b00      	ldr	r3, [sp, #0]
   d9a0e:	2b00      	cmp	r3, #0
   d9a10:	bf14      	ite	ne
   d9a12:	2700      	movne	r7, #0
   d9a14:	2706      	moveq	r7, #6
   d9a16:	4638      	mov	r0, r7
   d9a18:	b009      	add	sp, #36	; 0x24
   d9a1a:	ecbd 8b02 	vpop	{d8}
   d9a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a22:	463e      	mov	r6, r7
   d9a24:	4625      	mov	r5, r4
   d9a26:	2401      	movs	r4, #1
   d9a28:	e7ca      	b.n	d99c0 <__gethex+0xd4>
   d9a2a:	f04f 0900 	mov.w	r9, #0
   d9a2e:	1cb1      	adds	r1, r6, #2
   d9a30:	e7d3      	b.n	d99da <__gethex+0xee>
   d9a32:	f04f 0901 	mov.w	r9, #1
   d9a36:	e7fa      	b.n	d9a2e <__gethex+0x142>
   d9a38:	230a      	movs	r3, #10
   d9a3a:	fb03 0202 	mla	r2, r3, r2, r0
   d9a3e:	3a10      	subs	r2, #16
   d9a40:	e7d4      	b.n	d99ec <__gethex+0x100>
   d9a42:	4631      	mov	r1, r6
   d9a44:	e7df      	b.n	d9a06 <__gethex+0x11a>
   d9a46:	1bf3      	subs	r3, r6, r7
   d9a48:	3b01      	subs	r3, #1
   d9a4a:	4621      	mov	r1, r4
   d9a4c:	2b07      	cmp	r3, #7
   d9a4e:	dc52      	bgt.n	d9af6 <__gethex+0x20a>
   d9a50:	ee18 0a10 	vmov	r0, s16
   d9a54:	f000 fa52 	bl	d9efc <_Balloc>
   d9a58:	f04f 0b00 	mov.w	fp, #0
   d9a5c:	f100 0914 	add.w	r9, r0, #20
   d9a60:	f1ca 0301 	rsb	r3, sl, #1
   d9a64:	4604      	mov	r4, r0
   d9a66:	f8cd 9008 	str.w	r9, [sp, #8]
   d9a6a:	f8cd b000 	str.w	fp, [sp]
   d9a6e:	9306      	str	r3, [sp, #24]
   d9a70:	42b7      	cmp	r7, r6
   d9a72:	d343      	bcc.n	d9afc <__gethex+0x210>
   d9a74:	9802      	ldr	r0, [sp, #8]
   d9a76:	9b00      	ldr	r3, [sp, #0]
   d9a78:	f840 3b04 	str.w	r3, [r0], #4
   d9a7c:	eba0 0009 	sub.w	r0, r0, r9
   d9a80:	1080      	asrs	r0, r0, #2
   d9a82:	0146      	lsls	r6, r0, #5
   d9a84:	6120      	str	r0, [r4, #16]
   d9a86:	4618      	mov	r0, r3
   d9a88:	f000 faff 	bl	da08a <__hi0bits>
   d9a8c:	1a30      	subs	r0, r6, r0
   d9a8e:	f8d8 6000 	ldr.w	r6, [r8]
   d9a92:	42b0      	cmp	r0, r6
   d9a94:	dd66      	ble.n	d9b64 <__gethex+0x278>
   d9a96:	1b87      	subs	r7, r0, r6
   d9a98:	4639      	mov	r1, r7
   d9a9a:	4620      	mov	r0, r4
   d9a9c:	f000 fe4c 	bl	da738 <__any_on>
   d9aa0:	4682      	mov	sl, r0
   d9aa2:	b1a8      	cbz	r0, d9ad0 <__gethex+0x1e4>
   d9aa4:	1e7b      	subs	r3, r7, #1
   d9aa6:	1159      	asrs	r1, r3, #5
   d9aa8:	f003 021f 	and.w	r2, r3, #31
   d9aac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9ab0:	f04f 0a01 	mov.w	sl, #1
   d9ab4:	fa0a f202 	lsl.w	r2, sl, r2
   d9ab8:	420a      	tst	r2, r1
   d9aba:	d009      	beq.n	d9ad0 <__gethex+0x1e4>
   d9abc:	4553      	cmp	r3, sl
   d9abe:	dd05      	ble.n	d9acc <__gethex+0x1e0>
   d9ac0:	1eb9      	subs	r1, r7, #2
   d9ac2:	4620      	mov	r0, r4
   d9ac4:	f000 fe38 	bl	da738 <__any_on>
   d9ac8:	2800      	cmp	r0, #0
   d9aca:	d148      	bne.n	d9b5e <__gethex+0x272>
   d9acc:	f04f 0a02 	mov.w	sl, #2
   d9ad0:	4639      	mov	r1, r7
   d9ad2:	4620      	mov	r0, r4
   d9ad4:	f7ff fea2 	bl	d981c <rshift>
   d9ad8:	443d      	add	r5, r7
   d9ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9ade:	42ab      	cmp	r3, r5
   d9ae0:	da4f      	bge.n	d9b82 <__gethex+0x296>
   d9ae2:	ee18 0a10 	vmov	r0, s16
   d9ae6:	4621      	mov	r1, r4
   d9ae8:	f000 fa3c 	bl	d9f64 <_Bfree>
   d9aec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9aee:	2300      	movs	r3, #0
   d9af0:	6013      	str	r3, [r2, #0]
   d9af2:	27a3      	movs	r7, #163	; 0xa3
   d9af4:	e78f      	b.n	d9a16 <__gethex+0x12a>
   d9af6:	3101      	adds	r1, #1
   d9af8:	105b      	asrs	r3, r3, #1
   d9afa:	e7a7      	b.n	d9a4c <__gethex+0x160>
   d9afc:	1e73      	subs	r3, r6, #1
   d9afe:	9a05      	ldr	r2, [sp, #20]
   d9b00:	9303      	str	r3, [sp, #12]
   d9b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9b06:	4293      	cmp	r3, r2
   d9b08:	d019      	beq.n	d9b3e <__gethex+0x252>
   d9b0a:	f1bb 0f20 	cmp.w	fp, #32
   d9b0e:	d107      	bne.n	d9b20 <__gethex+0x234>
   d9b10:	9b02      	ldr	r3, [sp, #8]
   d9b12:	9a00      	ldr	r2, [sp, #0]
   d9b14:	f843 2b04 	str.w	r2, [r3], #4
   d9b18:	9302      	str	r3, [sp, #8]
   d9b1a:	2300      	movs	r3, #0
   d9b1c:	9300      	str	r3, [sp, #0]
   d9b1e:	469b      	mov	fp, r3
   d9b20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9b24:	f7ff fecc 	bl	d98c0 <__hexdig_fun>
   d9b28:	9b00      	ldr	r3, [sp, #0]
   d9b2a:	f000 000f 	and.w	r0, r0, #15
   d9b2e:	fa00 f00b 	lsl.w	r0, r0, fp
   d9b32:	4303      	orrs	r3, r0
   d9b34:	9300      	str	r3, [sp, #0]
   d9b36:	f10b 0b04 	add.w	fp, fp, #4
   d9b3a:	9b03      	ldr	r3, [sp, #12]
   d9b3c:	e00d      	b.n	d9b5a <__gethex+0x26e>
   d9b3e:	9b03      	ldr	r3, [sp, #12]
   d9b40:	9a06      	ldr	r2, [sp, #24]
   d9b42:	4413      	add	r3, r2
   d9b44:	42bb      	cmp	r3, r7
   d9b46:	d3e0      	bcc.n	d9b0a <__gethex+0x21e>
   d9b48:	4618      	mov	r0, r3
   d9b4a:	9901      	ldr	r1, [sp, #4]
   d9b4c:	9307      	str	r3, [sp, #28]
   d9b4e:	4652      	mov	r2, sl
   d9b50:	f7ff f820 	bl	d8b94 <strncmp>
   d9b54:	9b07      	ldr	r3, [sp, #28]
   d9b56:	2800      	cmp	r0, #0
   d9b58:	d1d7      	bne.n	d9b0a <__gethex+0x21e>
   d9b5a:	461e      	mov	r6, r3
   d9b5c:	e788      	b.n	d9a70 <__gethex+0x184>
   d9b5e:	f04f 0a03 	mov.w	sl, #3
   d9b62:	e7b5      	b.n	d9ad0 <__gethex+0x1e4>
   d9b64:	da0a      	bge.n	d9b7c <__gethex+0x290>
   d9b66:	1a37      	subs	r7, r6, r0
   d9b68:	4621      	mov	r1, r4
   d9b6a:	ee18 0a10 	vmov	r0, s16
   d9b6e:	463a      	mov	r2, r7
   d9b70:	f000 fbce 	bl	da310 <__lshift>
   d9b74:	1bed      	subs	r5, r5, r7
   d9b76:	4604      	mov	r4, r0
   d9b78:	f100 0914 	add.w	r9, r0, #20
   d9b7c:	f04f 0a00 	mov.w	sl, #0
   d9b80:	e7ab      	b.n	d9ada <__gethex+0x1ee>
   d9b82:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9b86:	42a8      	cmp	r0, r5
   d9b88:	dd6d      	ble.n	d9c66 <__gethex+0x37a>
   d9b8a:	1b45      	subs	r5, r0, r5
   d9b8c:	42ae      	cmp	r6, r5
   d9b8e:	dc31      	bgt.n	d9bf4 <__gethex+0x308>
   d9b90:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9b94:	2b02      	cmp	r3, #2
   d9b96:	d023      	beq.n	d9be0 <__gethex+0x2f4>
   d9b98:	2b03      	cmp	r3, #3
   d9b9a:	d025      	beq.n	d9be8 <__gethex+0x2fc>
   d9b9c:	2b01      	cmp	r3, #1
   d9b9e:	d115      	bne.n	d9bcc <__gethex+0x2e0>
   d9ba0:	42ae      	cmp	r6, r5
   d9ba2:	d113      	bne.n	d9bcc <__gethex+0x2e0>
   d9ba4:	2e01      	cmp	r6, #1
   d9ba6:	d10b      	bne.n	d9bc0 <__gethex+0x2d4>
   d9ba8:	9a04      	ldr	r2, [sp, #16]
   d9baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9bae:	6013      	str	r3, [r2, #0]
   d9bb0:	2301      	movs	r3, #1
   d9bb2:	6123      	str	r3, [r4, #16]
   d9bb4:	f8c9 3000 	str.w	r3, [r9]
   d9bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9bba:	2762      	movs	r7, #98	; 0x62
   d9bbc:	601c      	str	r4, [r3, #0]
   d9bbe:	e72a      	b.n	d9a16 <__gethex+0x12a>
   d9bc0:	1e71      	subs	r1, r6, #1
   d9bc2:	4620      	mov	r0, r4
   d9bc4:	f000 fdb8 	bl	da738 <__any_on>
   d9bc8:	2800      	cmp	r0, #0
   d9bca:	d1ed      	bne.n	d9ba8 <__gethex+0x2bc>
   d9bcc:	ee18 0a10 	vmov	r0, s16
   d9bd0:	4621      	mov	r1, r4
   d9bd2:	f000 f9c7 	bl	d9f64 <_Bfree>
   d9bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9bd8:	2300      	movs	r3, #0
   d9bda:	6013      	str	r3, [r2, #0]
   d9bdc:	2750      	movs	r7, #80	; 0x50
   d9bde:	e71a      	b.n	d9a16 <__gethex+0x12a>
   d9be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9be2:	2b00      	cmp	r3, #0
   d9be4:	d1f2      	bne.n	d9bcc <__gethex+0x2e0>
   d9be6:	e7df      	b.n	d9ba8 <__gethex+0x2bc>
   d9be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9bea:	2b00      	cmp	r3, #0
   d9bec:	d1dc      	bne.n	d9ba8 <__gethex+0x2bc>
   d9bee:	e7ed      	b.n	d9bcc <__gethex+0x2e0>
   d9bf0:	000db424 	.word	0x000db424
   d9bf4:	1e6f      	subs	r7, r5, #1
   d9bf6:	f1ba 0f00 	cmp.w	sl, #0
   d9bfa:	d131      	bne.n	d9c60 <__gethex+0x374>
   d9bfc:	b127      	cbz	r7, d9c08 <__gethex+0x31c>
   d9bfe:	4639      	mov	r1, r7
   d9c00:	4620      	mov	r0, r4
   d9c02:	f000 fd99 	bl	da738 <__any_on>
   d9c06:	4682      	mov	sl, r0
   d9c08:	117b      	asrs	r3, r7, #5
   d9c0a:	2101      	movs	r1, #1
   d9c0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9c10:	f007 071f 	and.w	r7, r7, #31
   d9c14:	fa01 f707 	lsl.w	r7, r1, r7
   d9c18:	421f      	tst	r7, r3
   d9c1a:	4629      	mov	r1, r5
   d9c1c:	4620      	mov	r0, r4
   d9c1e:	bf18      	it	ne
   d9c20:	f04a 0a02 	orrne.w	sl, sl, #2
   d9c24:	1b76      	subs	r6, r6, r5
   d9c26:	f7ff fdf9 	bl	d981c <rshift>
   d9c2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9c2e:	2702      	movs	r7, #2
   d9c30:	f1ba 0f00 	cmp.w	sl, #0
   d9c34:	d048      	beq.n	d9cc8 <__gethex+0x3dc>
   d9c36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9c3a:	2b02      	cmp	r3, #2
   d9c3c:	d015      	beq.n	d9c6a <__gethex+0x37e>
   d9c3e:	2b03      	cmp	r3, #3
   d9c40:	d017      	beq.n	d9c72 <__gethex+0x386>
   d9c42:	2b01      	cmp	r3, #1
   d9c44:	d109      	bne.n	d9c5a <__gethex+0x36e>
   d9c46:	f01a 0f02 	tst.w	sl, #2
   d9c4a:	d006      	beq.n	d9c5a <__gethex+0x36e>
   d9c4c:	f8d9 0000 	ldr.w	r0, [r9]
   d9c50:	ea4a 0a00 	orr.w	sl, sl, r0
   d9c54:	f01a 0f01 	tst.w	sl, #1
   d9c58:	d10e      	bne.n	d9c78 <__gethex+0x38c>
   d9c5a:	f047 0710 	orr.w	r7, r7, #16
   d9c5e:	e033      	b.n	d9cc8 <__gethex+0x3dc>
   d9c60:	f04f 0a01 	mov.w	sl, #1
   d9c64:	e7d0      	b.n	d9c08 <__gethex+0x31c>
   d9c66:	2701      	movs	r7, #1
   d9c68:	e7e2      	b.n	d9c30 <__gethex+0x344>
   d9c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9c6c:	f1c3 0301 	rsb	r3, r3, #1
   d9c70:	9315      	str	r3, [sp, #84]	; 0x54
   d9c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9c74:	2b00      	cmp	r3, #0
   d9c76:	d0f0      	beq.n	d9c5a <__gethex+0x36e>
   d9c78:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9c7c:	f104 0314 	add.w	r3, r4, #20
   d9c80:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9c84:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9c88:	f04f 0c00 	mov.w	ip, #0
   d9c8c:	4618      	mov	r0, r3
   d9c8e:	f853 2b04 	ldr.w	r2, [r3], #4
   d9c92:	f1b2 3fff 	cmp.w	r2, #4294967295
   d9c96:	d01c      	beq.n	d9cd2 <__gethex+0x3e6>
   d9c98:	3201      	adds	r2, #1
   d9c9a:	6002      	str	r2, [r0, #0]
   d9c9c:	2f02      	cmp	r7, #2
   d9c9e:	f104 0314 	add.w	r3, r4, #20
   d9ca2:	d13a      	bne.n	d9d1a <__gethex+0x42e>
   d9ca4:	f8d8 2000 	ldr.w	r2, [r8]
   d9ca8:	3a01      	subs	r2, #1
   d9caa:	42b2      	cmp	r2, r6
   d9cac:	d10a      	bne.n	d9cc4 <__gethex+0x3d8>
   d9cae:	1171      	asrs	r1, r6, #5
   d9cb0:	2201      	movs	r2, #1
   d9cb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9cb6:	f006 061f 	and.w	r6, r6, #31
   d9cba:	fa02 f606 	lsl.w	r6, r2, r6
   d9cbe:	421e      	tst	r6, r3
   d9cc0:	bf18      	it	ne
   d9cc2:	4617      	movne	r7, r2
   d9cc4:	f047 0720 	orr.w	r7, r7, #32
   d9cc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9cca:	601c      	str	r4, [r3, #0]
   d9ccc:	9b04      	ldr	r3, [sp, #16]
   d9cce:	601d      	str	r5, [r3, #0]
   d9cd0:	e6a1      	b.n	d9a16 <__gethex+0x12a>
   d9cd2:	4299      	cmp	r1, r3
   d9cd4:	f843 cc04 	str.w	ip, [r3, #-4]
   d9cd8:	d8d8      	bhi.n	d9c8c <__gethex+0x3a0>
   d9cda:	68a3      	ldr	r3, [r4, #8]
   d9cdc:	4599      	cmp	r9, r3
   d9cde:	db14      	blt.n	d9d0a <__gethex+0x41e>
   d9ce0:	6861      	ldr	r1, [r4, #4]
   d9ce2:	ee18 0a10 	vmov	r0, s16
   d9ce6:	3101      	adds	r1, #1
   d9ce8:	f000 f908 	bl	d9efc <_Balloc>
   d9cec:	6922      	ldr	r2, [r4, #16]
   d9cee:	3202      	adds	r2, #2
   d9cf0:	f104 010c 	add.w	r1, r4, #12
   d9cf4:	4682      	mov	sl, r0
   d9cf6:	0092      	lsls	r2, r2, #2
   d9cf8:	300c      	adds	r0, #12
   d9cfa:	f7fe fec3 	bl	d8a84 <memcpy>
   d9cfe:	4621      	mov	r1, r4
   d9d00:	ee18 0a10 	vmov	r0, s16
   d9d04:	f000 f92e 	bl	d9f64 <_Bfree>
   d9d08:	4654      	mov	r4, sl
   d9d0a:	6923      	ldr	r3, [r4, #16]
   d9d0c:	1c5a      	adds	r2, r3, #1
   d9d0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9d12:	6122      	str	r2, [r4, #16]
   d9d14:	2201      	movs	r2, #1
   d9d16:	615a      	str	r2, [r3, #20]
   d9d18:	e7c0      	b.n	d9c9c <__gethex+0x3b0>
   d9d1a:	6922      	ldr	r2, [r4, #16]
   d9d1c:	454a      	cmp	r2, r9
   d9d1e:	dd0b      	ble.n	d9d38 <__gethex+0x44c>
   d9d20:	2101      	movs	r1, #1
   d9d22:	4620      	mov	r0, r4
   d9d24:	f7ff fd7a 	bl	d981c <rshift>
   d9d28:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9d2c:	3501      	adds	r5, #1
   d9d2e:	42ab      	cmp	r3, r5
   d9d30:	f6ff aed7 	blt.w	d9ae2 <__gethex+0x1f6>
   d9d34:	2701      	movs	r7, #1
   d9d36:	e7c5      	b.n	d9cc4 <__gethex+0x3d8>
   d9d38:	f016 061f 	ands.w	r6, r6, #31
   d9d3c:	d0fa      	beq.n	d9d34 <__gethex+0x448>
   d9d3e:	449b      	add	fp, r3
   d9d40:	f1c6 0620 	rsb	r6, r6, #32
   d9d44:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d9d48:	f000 f99f 	bl	da08a <__hi0bits>
   d9d4c:	42b0      	cmp	r0, r6
   d9d4e:	dbe7      	blt.n	d9d20 <__gethex+0x434>
   d9d50:	e7f0      	b.n	d9d34 <__gethex+0x448>
   d9d52:	bf00      	nop

000d9d54 <L_shift>:
   d9d54:	f1c2 0208 	rsb	r2, r2, #8
   d9d58:	0092      	lsls	r2, r2, #2
   d9d5a:	b570      	push	{r4, r5, r6, lr}
   d9d5c:	f1c2 0620 	rsb	r6, r2, #32
   d9d60:	6843      	ldr	r3, [r0, #4]
   d9d62:	6804      	ldr	r4, [r0, #0]
   d9d64:	fa03 f506 	lsl.w	r5, r3, r6
   d9d68:	432c      	orrs	r4, r5
   d9d6a:	40d3      	lsrs	r3, r2
   d9d6c:	6004      	str	r4, [r0, #0]
   d9d6e:	f840 3f04 	str.w	r3, [r0, #4]!
   d9d72:	4288      	cmp	r0, r1
   d9d74:	d3f4      	bcc.n	d9d60 <L_shift+0xc>
   d9d76:	bd70      	pop	{r4, r5, r6, pc}

000d9d78 <__match>:
   d9d78:	b530      	push	{r4, r5, lr}
   d9d7a:	6803      	ldr	r3, [r0, #0]
   d9d7c:	3301      	adds	r3, #1
   d9d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9d82:	b914      	cbnz	r4, d9d8a <__match+0x12>
   d9d84:	6003      	str	r3, [r0, #0]
   d9d86:	2001      	movs	r0, #1
   d9d88:	bd30      	pop	{r4, r5, pc}
   d9d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9d92:	2d19      	cmp	r5, #25
   d9d94:	bf98      	it	ls
   d9d96:	3220      	addls	r2, #32
   d9d98:	42a2      	cmp	r2, r4
   d9d9a:	d0f0      	beq.n	d9d7e <__match+0x6>
   d9d9c:	2000      	movs	r0, #0
   d9d9e:	e7f3      	b.n	d9d88 <__match+0x10>

000d9da0 <__hexnan>:
   d9da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9da4:	680b      	ldr	r3, [r1, #0]
   d9da6:	6801      	ldr	r1, [r0, #0]
   d9da8:	115e      	asrs	r6, r3, #5
   d9daa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9dae:	f013 031f 	ands.w	r3, r3, #31
   d9db2:	b087      	sub	sp, #28
   d9db4:	bf18      	it	ne
   d9db6:	3604      	addne	r6, #4
   d9db8:	2500      	movs	r5, #0
   d9dba:	1f37      	subs	r7, r6, #4
   d9dbc:	4682      	mov	sl, r0
   d9dbe:	4690      	mov	r8, r2
   d9dc0:	9301      	str	r3, [sp, #4]
   d9dc2:	f846 5c04 	str.w	r5, [r6, #-4]
   d9dc6:	46b9      	mov	r9, r7
   d9dc8:	463c      	mov	r4, r7
   d9dca:	9502      	str	r5, [sp, #8]
   d9dcc:	46ab      	mov	fp, r5
   d9dce:	784a      	ldrb	r2, [r1, #1]
   d9dd0:	1c4b      	adds	r3, r1, #1
   d9dd2:	9303      	str	r3, [sp, #12]
   d9dd4:	b342      	cbz	r2, d9e28 <__hexnan+0x88>
   d9dd6:	4610      	mov	r0, r2
   d9dd8:	9105      	str	r1, [sp, #20]
   d9dda:	9204      	str	r2, [sp, #16]
   d9ddc:	f7ff fd70 	bl	d98c0 <__hexdig_fun>
   d9de0:	2800      	cmp	r0, #0
   d9de2:	d14f      	bne.n	d9e84 <__hexnan+0xe4>
   d9de4:	9a04      	ldr	r2, [sp, #16]
   d9de6:	9905      	ldr	r1, [sp, #20]
   d9de8:	2a20      	cmp	r2, #32
   d9dea:	d818      	bhi.n	d9e1e <__hexnan+0x7e>
   d9dec:	9b02      	ldr	r3, [sp, #8]
   d9dee:	459b      	cmp	fp, r3
   d9df0:	dd13      	ble.n	d9e1a <__hexnan+0x7a>
   d9df2:	454c      	cmp	r4, r9
   d9df4:	d206      	bcs.n	d9e04 <__hexnan+0x64>
   d9df6:	2d07      	cmp	r5, #7
   d9df8:	dc04      	bgt.n	d9e04 <__hexnan+0x64>
   d9dfa:	462a      	mov	r2, r5
   d9dfc:	4649      	mov	r1, r9
   d9dfe:	4620      	mov	r0, r4
   d9e00:	f7ff ffa8 	bl	d9d54 <L_shift>
   d9e04:	4544      	cmp	r4, r8
   d9e06:	d950      	bls.n	d9eaa <__hexnan+0x10a>
   d9e08:	2300      	movs	r3, #0
   d9e0a:	f1a4 0904 	sub.w	r9, r4, #4
   d9e0e:	f844 3c04 	str.w	r3, [r4, #-4]
   d9e12:	f8cd b008 	str.w	fp, [sp, #8]
   d9e16:	464c      	mov	r4, r9
   d9e18:	461d      	mov	r5, r3
   d9e1a:	9903      	ldr	r1, [sp, #12]
   d9e1c:	e7d7      	b.n	d9dce <__hexnan+0x2e>
   d9e1e:	2a29      	cmp	r2, #41	; 0x29
   d9e20:	d156      	bne.n	d9ed0 <__hexnan+0x130>
   d9e22:	3102      	adds	r1, #2
   d9e24:	f8ca 1000 	str.w	r1, [sl]
   d9e28:	f1bb 0f00 	cmp.w	fp, #0
   d9e2c:	d050      	beq.n	d9ed0 <__hexnan+0x130>
   d9e2e:	454c      	cmp	r4, r9
   d9e30:	d206      	bcs.n	d9e40 <__hexnan+0xa0>
   d9e32:	2d07      	cmp	r5, #7
   d9e34:	dc04      	bgt.n	d9e40 <__hexnan+0xa0>
   d9e36:	462a      	mov	r2, r5
   d9e38:	4649      	mov	r1, r9
   d9e3a:	4620      	mov	r0, r4
   d9e3c:	f7ff ff8a 	bl	d9d54 <L_shift>
   d9e40:	4544      	cmp	r4, r8
   d9e42:	d934      	bls.n	d9eae <__hexnan+0x10e>
   d9e44:	f1a8 0204 	sub.w	r2, r8, #4
   d9e48:	4623      	mov	r3, r4
   d9e4a:	f853 1b04 	ldr.w	r1, [r3], #4
   d9e4e:	f842 1f04 	str.w	r1, [r2, #4]!
   d9e52:	429f      	cmp	r7, r3
   d9e54:	d2f9      	bcs.n	d9e4a <__hexnan+0xaa>
   d9e56:	1b3b      	subs	r3, r7, r4
   d9e58:	f023 0303 	bic.w	r3, r3, #3
   d9e5c:	3304      	adds	r3, #4
   d9e5e:	3401      	adds	r4, #1
   d9e60:	3e03      	subs	r6, #3
   d9e62:	42b4      	cmp	r4, r6
   d9e64:	bf88      	it	hi
   d9e66:	2304      	movhi	r3, #4
   d9e68:	4443      	add	r3, r8
   d9e6a:	2200      	movs	r2, #0
   d9e6c:	f843 2b04 	str.w	r2, [r3], #4
   d9e70:	429f      	cmp	r7, r3
   d9e72:	d2fb      	bcs.n	d9e6c <__hexnan+0xcc>
   d9e74:	683b      	ldr	r3, [r7, #0]
   d9e76:	b91b      	cbnz	r3, d9e80 <__hexnan+0xe0>
   d9e78:	4547      	cmp	r7, r8
   d9e7a:	d127      	bne.n	d9ecc <__hexnan+0x12c>
   d9e7c:	2301      	movs	r3, #1
   d9e7e:	603b      	str	r3, [r7, #0]
   d9e80:	2005      	movs	r0, #5
   d9e82:	e026      	b.n	d9ed2 <__hexnan+0x132>
   d9e84:	3501      	adds	r5, #1
   d9e86:	2d08      	cmp	r5, #8
   d9e88:	f10b 0b01 	add.w	fp, fp, #1
   d9e8c:	dd06      	ble.n	d9e9c <__hexnan+0xfc>
   d9e8e:	4544      	cmp	r4, r8
   d9e90:	d9c3      	bls.n	d9e1a <__hexnan+0x7a>
   d9e92:	2300      	movs	r3, #0
   d9e94:	f844 3c04 	str.w	r3, [r4, #-4]
   d9e98:	2501      	movs	r5, #1
   d9e9a:	3c04      	subs	r4, #4
   d9e9c:	6822      	ldr	r2, [r4, #0]
   d9e9e:	f000 000f 	and.w	r0, r0, #15
   d9ea2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d9ea6:	6022      	str	r2, [r4, #0]
   d9ea8:	e7b7      	b.n	d9e1a <__hexnan+0x7a>
   d9eaa:	2508      	movs	r5, #8
   d9eac:	e7b5      	b.n	d9e1a <__hexnan+0x7a>
   d9eae:	9b01      	ldr	r3, [sp, #4]
   d9eb0:	2b00      	cmp	r3, #0
   d9eb2:	d0df      	beq.n	d9e74 <__hexnan+0xd4>
   d9eb4:	f04f 32ff 	mov.w	r2, #4294967295
   d9eb8:	f1c3 0320 	rsb	r3, r3, #32
   d9ebc:	fa22 f303 	lsr.w	r3, r2, r3
   d9ec0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9ec4:	401a      	ands	r2, r3
   d9ec6:	f846 2c04 	str.w	r2, [r6, #-4]
   d9eca:	e7d3      	b.n	d9e74 <__hexnan+0xd4>
   d9ecc:	3f04      	subs	r7, #4
   d9ece:	e7d1      	b.n	d9e74 <__hexnan+0xd4>
   d9ed0:	2004      	movs	r0, #4
   d9ed2:	b007      	add	sp, #28
   d9ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9ed8 <__ascii_mbtowc>:
   d9ed8:	b082      	sub	sp, #8
   d9eda:	b901      	cbnz	r1, d9ede <__ascii_mbtowc+0x6>
   d9edc:	a901      	add	r1, sp, #4
   d9ede:	b142      	cbz	r2, d9ef2 <__ascii_mbtowc+0x1a>
   d9ee0:	b14b      	cbz	r3, d9ef6 <__ascii_mbtowc+0x1e>
   d9ee2:	7813      	ldrb	r3, [r2, #0]
   d9ee4:	600b      	str	r3, [r1, #0]
   d9ee6:	7812      	ldrb	r2, [r2, #0]
   d9ee8:	1e10      	subs	r0, r2, #0
   d9eea:	bf18      	it	ne
   d9eec:	2001      	movne	r0, #1
   d9eee:	b002      	add	sp, #8
   d9ef0:	4770      	bx	lr
   d9ef2:	4610      	mov	r0, r2
   d9ef4:	e7fb      	b.n	d9eee <__ascii_mbtowc+0x16>
   d9ef6:	f06f 0001 	mvn.w	r0, #1
   d9efa:	e7f8      	b.n	d9eee <__ascii_mbtowc+0x16>

000d9efc <_Balloc>:
   d9efc:	b570      	push	{r4, r5, r6, lr}
   d9efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9f00:	4604      	mov	r4, r0
   d9f02:	460d      	mov	r5, r1
   d9f04:	b93e      	cbnz	r6, d9f16 <_Balloc+0x1a>
   d9f06:	2010      	movs	r0, #16
   d9f08:	f7fc fbfc 	bl	d6704 <malloc>
   d9f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9f10:	6260      	str	r0, [r4, #36]	; 0x24
   d9f12:	6006      	str	r6, [r0, #0]
   d9f14:	60c6      	str	r6, [r0, #12]
   d9f16:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d9f18:	68f3      	ldr	r3, [r6, #12]
   d9f1a:	b183      	cbz	r3, d9f3e <_Balloc+0x42>
   d9f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9f1e:	68db      	ldr	r3, [r3, #12]
   d9f20:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d9f24:	b9b8      	cbnz	r0, d9f56 <_Balloc+0x5a>
   d9f26:	2101      	movs	r1, #1
   d9f28:	fa01 f605 	lsl.w	r6, r1, r5
   d9f2c:	1d72      	adds	r2, r6, #5
   d9f2e:	0092      	lsls	r2, r2, #2
   d9f30:	4620      	mov	r0, r4
   d9f32:	f000 fc22 	bl	da77a <_calloc_r>
   d9f36:	b160      	cbz	r0, d9f52 <_Balloc+0x56>
   d9f38:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9f3c:	e00e      	b.n	d9f5c <_Balloc+0x60>
   d9f3e:	2221      	movs	r2, #33	; 0x21
   d9f40:	2104      	movs	r1, #4
   d9f42:	4620      	mov	r0, r4
   d9f44:	f000 fc19 	bl	da77a <_calloc_r>
   d9f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9f4a:	60f0      	str	r0, [r6, #12]
   d9f4c:	68db      	ldr	r3, [r3, #12]
   d9f4e:	2b00      	cmp	r3, #0
   d9f50:	d1e4      	bne.n	d9f1c <_Balloc+0x20>
   d9f52:	2000      	movs	r0, #0
   d9f54:	bd70      	pop	{r4, r5, r6, pc}
   d9f56:	6802      	ldr	r2, [r0, #0]
   d9f58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9f5c:	2300      	movs	r3, #0
   d9f5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d9f62:	e7f7      	b.n	d9f54 <_Balloc+0x58>

000d9f64 <_Bfree>:
   d9f64:	b570      	push	{r4, r5, r6, lr}
   d9f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9f68:	4605      	mov	r5, r0
   d9f6a:	460c      	mov	r4, r1
   d9f6c:	b93e      	cbnz	r6, d9f7e <_Bfree+0x1a>
   d9f6e:	2010      	movs	r0, #16
   d9f70:	f7fc fbc8 	bl	d6704 <malloc>
   d9f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9f78:	6268      	str	r0, [r5, #36]	; 0x24
   d9f7a:	6006      	str	r6, [r0, #0]
   d9f7c:	60c6      	str	r6, [r0, #12]
   d9f7e:	b13c      	cbz	r4, d9f90 <_Bfree+0x2c>
   d9f80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9f82:	6862      	ldr	r2, [r4, #4]
   d9f84:	68db      	ldr	r3, [r3, #12]
   d9f86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9f8a:	6021      	str	r1, [r4, #0]
   d9f8c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d9f90:	bd70      	pop	{r4, r5, r6, pc}

000d9f92 <__multadd>:
   d9f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9f96:	690e      	ldr	r6, [r1, #16]
   d9f98:	4607      	mov	r7, r0
   d9f9a:	4698      	mov	r8, r3
   d9f9c:	460c      	mov	r4, r1
   d9f9e:	f101 0014 	add.w	r0, r1, #20
   d9fa2:	2300      	movs	r3, #0
   d9fa4:	6805      	ldr	r5, [r0, #0]
   d9fa6:	b2a9      	uxth	r1, r5
   d9fa8:	fb02 8101 	mla	r1, r2, r1, r8
   d9fac:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d9fb0:	0c2d      	lsrs	r5, r5, #16
   d9fb2:	fb02 c505 	mla	r5, r2, r5, ip
   d9fb6:	b289      	uxth	r1, r1
   d9fb8:	3301      	adds	r3, #1
   d9fba:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d9fbe:	429e      	cmp	r6, r3
   d9fc0:	f840 1b04 	str.w	r1, [r0], #4
   d9fc4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d9fc8:	dcec      	bgt.n	d9fa4 <__multadd+0x12>
   d9fca:	f1b8 0f00 	cmp.w	r8, #0
   d9fce:	d01b      	beq.n	da008 <__multadd+0x76>
   d9fd0:	68a3      	ldr	r3, [r4, #8]
   d9fd2:	42b3      	cmp	r3, r6
   d9fd4:	dc12      	bgt.n	d9ffc <__multadd+0x6a>
   d9fd6:	6861      	ldr	r1, [r4, #4]
   d9fd8:	4638      	mov	r0, r7
   d9fda:	3101      	adds	r1, #1
   d9fdc:	f7ff ff8e 	bl	d9efc <_Balloc>
   d9fe0:	6922      	ldr	r2, [r4, #16]
   d9fe2:	3202      	adds	r2, #2
   d9fe4:	f104 010c 	add.w	r1, r4, #12
   d9fe8:	4605      	mov	r5, r0
   d9fea:	0092      	lsls	r2, r2, #2
   d9fec:	300c      	adds	r0, #12
   d9fee:	f7fe fd49 	bl	d8a84 <memcpy>
   d9ff2:	4621      	mov	r1, r4
   d9ff4:	4638      	mov	r0, r7
   d9ff6:	f7ff ffb5 	bl	d9f64 <_Bfree>
   d9ffa:	462c      	mov	r4, r5
   d9ffc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da000:	3601      	adds	r6, #1
   da002:	f8c3 8014 	str.w	r8, [r3, #20]
   da006:	6126      	str	r6, [r4, #16]
   da008:	4620      	mov	r0, r4
   da00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da00e <__s2b>:
   da00e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da012:	460c      	mov	r4, r1
   da014:	4615      	mov	r5, r2
   da016:	461f      	mov	r7, r3
   da018:	2209      	movs	r2, #9
   da01a:	3308      	adds	r3, #8
   da01c:	4606      	mov	r6, r0
   da01e:	fb93 f3f2 	sdiv	r3, r3, r2
   da022:	2100      	movs	r1, #0
   da024:	2201      	movs	r2, #1
   da026:	429a      	cmp	r2, r3
   da028:	db20      	blt.n	da06c <__s2b+0x5e>
   da02a:	4630      	mov	r0, r6
   da02c:	f7ff ff66 	bl	d9efc <_Balloc>
   da030:	9b08      	ldr	r3, [sp, #32]
   da032:	6143      	str	r3, [r0, #20]
   da034:	2d09      	cmp	r5, #9
   da036:	f04f 0301 	mov.w	r3, #1
   da03a:	6103      	str	r3, [r0, #16]
   da03c:	dd19      	ble.n	da072 <__s2b+0x64>
   da03e:	f104 0909 	add.w	r9, r4, #9
   da042:	46c8      	mov	r8, r9
   da044:	442c      	add	r4, r5
   da046:	f818 3b01 	ldrb.w	r3, [r8], #1
   da04a:	4601      	mov	r1, r0
   da04c:	3b30      	subs	r3, #48	; 0x30
   da04e:	220a      	movs	r2, #10
   da050:	4630      	mov	r0, r6
   da052:	f7ff ff9e 	bl	d9f92 <__multadd>
   da056:	45a0      	cmp	r8, r4
   da058:	d1f5      	bne.n	da046 <__s2b+0x38>
   da05a:	f1a5 0408 	sub.w	r4, r5, #8
   da05e:	444c      	add	r4, r9
   da060:	1b2d      	subs	r5, r5, r4
   da062:	1963      	adds	r3, r4, r5
   da064:	42bb      	cmp	r3, r7
   da066:	db07      	blt.n	da078 <__s2b+0x6a>
   da068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da06c:	0052      	lsls	r2, r2, #1
   da06e:	3101      	adds	r1, #1
   da070:	e7d9      	b.n	da026 <__s2b+0x18>
   da072:	340a      	adds	r4, #10
   da074:	2509      	movs	r5, #9
   da076:	e7f3      	b.n	da060 <__s2b+0x52>
   da078:	f814 3b01 	ldrb.w	r3, [r4], #1
   da07c:	4601      	mov	r1, r0
   da07e:	3b30      	subs	r3, #48	; 0x30
   da080:	220a      	movs	r2, #10
   da082:	4630      	mov	r0, r6
   da084:	f7ff ff85 	bl	d9f92 <__multadd>
   da088:	e7eb      	b.n	da062 <__s2b+0x54>

000da08a <__hi0bits>:
   da08a:	0c03      	lsrs	r3, r0, #16
   da08c:	041b      	lsls	r3, r3, #16
   da08e:	b9d3      	cbnz	r3, da0c6 <__hi0bits+0x3c>
   da090:	0400      	lsls	r0, r0, #16
   da092:	2310      	movs	r3, #16
   da094:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da098:	bf04      	itt	eq
   da09a:	0200      	lsleq	r0, r0, #8
   da09c:	3308      	addeq	r3, #8
   da09e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da0a2:	bf04      	itt	eq
   da0a4:	0100      	lsleq	r0, r0, #4
   da0a6:	3304      	addeq	r3, #4
   da0a8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da0ac:	bf04      	itt	eq
   da0ae:	0080      	lsleq	r0, r0, #2
   da0b0:	3302      	addeq	r3, #2
   da0b2:	2800      	cmp	r0, #0
   da0b4:	db05      	blt.n	da0c2 <__hi0bits+0x38>
   da0b6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da0ba:	f103 0301 	add.w	r3, r3, #1
   da0be:	bf08      	it	eq
   da0c0:	2320      	moveq	r3, #32
   da0c2:	4618      	mov	r0, r3
   da0c4:	4770      	bx	lr
   da0c6:	2300      	movs	r3, #0
   da0c8:	e7e4      	b.n	da094 <__hi0bits+0xa>

000da0ca <__lo0bits>:
   da0ca:	6803      	ldr	r3, [r0, #0]
   da0cc:	f013 0207 	ands.w	r2, r3, #7
   da0d0:	4601      	mov	r1, r0
   da0d2:	d00b      	beq.n	da0ec <__lo0bits+0x22>
   da0d4:	07da      	lsls	r2, r3, #31
   da0d6:	d424      	bmi.n	da122 <__lo0bits+0x58>
   da0d8:	0798      	lsls	r0, r3, #30
   da0da:	bf49      	itett	mi
   da0dc:	085b      	lsrmi	r3, r3, #1
   da0de:	089b      	lsrpl	r3, r3, #2
   da0e0:	2001      	movmi	r0, #1
   da0e2:	600b      	strmi	r3, [r1, #0]
   da0e4:	bf5c      	itt	pl
   da0e6:	600b      	strpl	r3, [r1, #0]
   da0e8:	2002      	movpl	r0, #2
   da0ea:	4770      	bx	lr
   da0ec:	b298      	uxth	r0, r3
   da0ee:	b9b0      	cbnz	r0, da11e <__lo0bits+0x54>
   da0f0:	0c1b      	lsrs	r3, r3, #16
   da0f2:	2010      	movs	r0, #16
   da0f4:	f013 0fff 	tst.w	r3, #255	; 0xff
   da0f8:	bf04      	itt	eq
   da0fa:	0a1b      	lsreq	r3, r3, #8
   da0fc:	3008      	addeq	r0, #8
   da0fe:	071a      	lsls	r2, r3, #28
   da100:	bf04      	itt	eq
   da102:	091b      	lsreq	r3, r3, #4
   da104:	3004      	addeq	r0, #4
   da106:	079a      	lsls	r2, r3, #30
   da108:	bf04      	itt	eq
   da10a:	089b      	lsreq	r3, r3, #2
   da10c:	3002      	addeq	r0, #2
   da10e:	07da      	lsls	r2, r3, #31
   da110:	d403      	bmi.n	da11a <__lo0bits+0x50>
   da112:	085b      	lsrs	r3, r3, #1
   da114:	f100 0001 	add.w	r0, r0, #1
   da118:	d005      	beq.n	da126 <__lo0bits+0x5c>
   da11a:	600b      	str	r3, [r1, #0]
   da11c:	4770      	bx	lr
   da11e:	4610      	mov	r0, r2
   da120:	e7e8      	b.n	da0f4 <__lo0bits+0x2a>
   da122:	2000      	movs	r0, #0
   da124:	4770      	bx	lr
   da126:	2020      	movs	r0, #32
   da128:	4770      	bx	lr

000da12a <__i2b>:
   da12a:	b510      	push	{r4, lr}
   da12c:	460c      	mov	r4, r1
   da12e:	2101      	movs	r1, #1
   da130:	f7ff fee4 	bl	d9efc <_Balloc>
   da134:	2201      	movs	r2, #1
   da136:	6144      	str	r4, [r0, #20]
   da138:	6102      	str	r2, [r0, #16]
   da13a:	bd10      	pop	{r4, pc}

000da13c <__multiply>:
   da13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da140:	4615      	mov	r5, r2
   da142:	690a      	ldr	r2, [r1, #16]
   da144:	692b      	ldr	r3, [r5, #16]
   da146:	429a      	cmp	r2, r3
   da148:	bfb8      	it	lt
   da14a:	460b      	movlt	r3, r1
   da14c:	460c      	mov	r4, r1
   da14e:	bfbc      	itt	lt
   da150:	462c      	movlt	r4, r5
   da152:	461d      	movlt	r5, r3
   da154:	6927      	ldr	r7, [r4, #16]
   da156:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da15a:	68a3      	ldr	r3, [r4, #8]
   da15c:	6861      	ldr	r1, [r4, #4]
   da15e:	eb07 0609 	add.w	r6, r7, r9
   da162:	42b3      	cmp	r3, r6
   da164:	bfb8      	it	lt
   da166:	3101      	addlt	r1, #1
   da168:	b085      	sub	sp, #20
   da16a:	f7ff fec7 	bl	d9efc <_Balloc>
   da16e:	f100 0114 	add.w	r1, r0, #20
   da172:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da176:	460b      	mov	r3, r1
   da178:	2200      	movs	r2, #0
   da17a:	4543      	cmp	r3, r8
   da17c:	d31d      	bcc.n	da1ba <__multiply+0x7e>
   da17e:	f104 0314 	add.w	r3, r4, #20
   da182:	f105 0214 	add.w	r2, r5, #20
   da186:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da18a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da18e:	9302      	str	r3, [sp, #8]
   da190:	1b3b      	subs	r3, r7, r4
   da192:	3b15      	subs	r3, #21
   da194:	f023 0303 	bic.w	r3, r3, #3
   da198:	3304      	adds	r3, #4
   da19a:	f104 0515 	add.w	r5, r4, #21
   da19e:	42af      	cmp	r7, r5
   da1a0:	bf38      	it	cc
   da1a2:	2304      	movcc	r3, #4
   da1a4:	9301      	str	r3, [sp, #4]
   da1a6:	9b02      	ldr	r3, [sp, #8]
   da1a8:	9203      	str	r2, [sp, #12]
   da1aa:	4293      	cmp	r3, r2
   da1ac:	d808      	bhi.n	da1c0 <__multiply+0x84>
   da1ae:	2e00      	cmp	r6, #0
   da1b0:	dc5a      	bgt.n	da268 <__multiply+0x12c>
   da1b2:	6106      	str	r6, [r0, #16]
   da1b4:	b005      	add	sp, #20
   da1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da1ba:	f843 2b04 	str.w	r2, [r3], #4
   da1be:	e7dc      	b.n	da17a <__multiply+0x3e>
   da1c0:	f8b2 a000 	ldrh.w	sl, [r2]
   da1c4:	f1ba 0f00 	cmp.w	sl, #0
   da1c8:	d024      	beq.n	da214 <__multiply+0xd8>
   da1ca:	f104 0e14 	add.w	lr, r4, #20
   da1ce:	4689      	mov	r9, r1
   da1d0:	f04f 0c00 	mov.w	ip, #0
   da1d4:	f85e 5b04 	ldr.w	r5, [lr], #4
   da1d8:	f8d9 b000 	ldr.w	fp, [r9]
   da1dc:	b2ab      	uxth	r3, r5
   da1de:	fa1f fb8b 	uxth.w	fp, fp
   da1e2:	fb0a b303 	mla	r3, sl, r3, fp
   da1e6:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da1ea:	f8d9 5000 	ldr.w	r5, [r9]
   da1ee:	4463      	add	r3, ip
   da1f0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da1f4:	fb0a c50b 	mla	r5, sl, fp, ip
   da1f8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da1fc:	b29b      	uxth	r3, r3
   da1fe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da202:	4577      	cmp	r7, lr
   da204:	f849 3b04 	str.w	r3, [r9], #4
   da208:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da20c:	d8e2      	bhi.n	da1d4 <__multiply+0x98>
   da20e:	9b01      	ldr	r3, [sp, #4]
   da210:	f841 c003 	str.w	ip, [r1, r3]
   da214:	9b03      	ldr	r3, [sp, #12]
   da216:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da21a:	3204      	adds	r2, #4
   da21c:	f1b9 0f00 	cmp.w	r9, #0
   da220:	d020      	beq.n	da264 <__multiply+0x128>
   da222:	680b      	ldr	r3, [r1, #0]
   da224:	f104 0c14 	add.w	ip, r4, #20
   da228:	468e      	mov	lr, r1
   da22a:	f04f 0a00 	mov.w	sl, #0
   da22e:	f8bc 5000 	ldrh.w	r5, [ip]
   da232:	f8be b002 	ldrh.w	fp, [lr, #2]
   da236:	fb09 b505 	mla	r5, r9, r5, fp
   da23a:	44aa      	add	sl, r5
   da23c:	b29b      	uxth	r3, r3
   da23e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da242:	f84e 3b04 	str.w	r3, [lr], #4
   da246:	f85c 3b04 	ldr.w	r3, [ip], #4
   da24a:	f8be 5000 	ldrh.w	r5, [lr]
   da24e:	0c1b      	lsrs	r3, r3, #16
   da250:	fb09 5303 	mla	r3, r9, r3, r5
   da254:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da258:	4567      	cmp	r7, ip
   da25a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da25e:	d8e6      	bhi.n	da22e <__multiply+0xf2>
   da260:	9d01      	ldr	r5, [sp, #4]
   da262:	514b      	str	r3, [r1, r5]
   da264:	3104      	adds	r1, #4
   da266:	e79e      	b.n	da1a6 <__multiply+0x6a>
   da268:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da26c:	2b00      	cmp	r3, #0
   da26e:	d1a0      	bne.n	da1b2 <__multiply+0x76>
   da270:	3e01      	subs	r6, #1
   da272:	e79c      	b.n	da1ae <__multiply+0x72>

000da274 <__pow5mult>:
   da274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da278:	4615      	mov	r5, r2
   da27a:	f012 0203 	ands.w	r2, r2, #3
   da27e:	4606      	mov	r6, r0
   da280:	460f      	mov	r7, r1
   da282:	d007      	beq.n	da294 <__pow5mult+0x20>
   da284:	4c21      	ldr	r4, [pc, #132]	; (da30c <__pow5mult+0x98>)
   da286:	3a01      	subs	r2, #1
   da288:	2300      	movs	r3, #0
   da28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da28e:	f7ff fe80 	bl	d9f92 <__multadd>
   da292:	4607      	mov	r7, r0
   da294:	10ad      	asrs	r5, r5, #2
   da296:	d035      	beq.n	da304 <__pow5mult+0x90>
   da298:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da29a:	b93c      	cbnz	r4, da2ac <__pow5mult+0x38>
   da29c:	2010      	movs	r0, #16
   da29e:	f7fc fa31 	bl	d6704 <malloc>
   da2a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da2a6:	6270      	str	r0, [r6, #36]	; 0x24
   da2a8:	6004      	str	r4, [r0, #0]
   da2aa:	60c4      	str	r4, [r0, #12]
   da2ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da2b4:	b94c      	cbnz	r4, da2ca <__pow5mult+0x56>
   da2b6:	f240 2171 	movw	r1, #625	; 0x271
   da2ba:	4630      	mov	r0, r6
   da2bc:	f7ff ff35 	bl	da12a <__i2b>
   da2c0:	2300      	movs	r3, #0
   da2c2:	f8c8 0008 	str.w	r0, [r8, #8]
   da2c6:	4604      	mov	r4, r0
   da2c8:	6003      	str	r3, [r0, #0]
   da2ca:	f04f 0900 	mov.w	r9, #0
   da2ce:	07eb      	lsls	r3, r5, #31
   da2d0:	d50a      	bpl.n	da2e8 <__pow5mult+0x74>
   da2d2:	4639      	mov	r1, r7
   da2d4:	4622      	mov	r2, r4
   da2d6:	4630      	mov	r0, r6
   da2d8:	f7ff ff30 	bl	da13c <__multiply>
   da2dc:	4639      	mov	r1, r7
   da2de:	4680      	mov	r8, r0
   da2e0:	4630      	mov	r0, r6
   da2e2:	f7ff fe3f 	bl	d9f64 <_Bfree>
   da2e6:	4647      	mov	r7, r8
   da2e8:	106d      	asrs	r5, r5, #1
   da2ea:	d00b      	beq.n	da304 <__pow5mult+0x90>
   da2ec:	6820      	ldr	r0, [r4, #0]
   da2ee:	b938      	cbnz	r0, da300 <__pow5mult+0x8c>
   da2f0:	4622      	mov	r2, r4
   da2f2:	4621      	mov	r1, r4
   da2f4:	4630      	mov	r0, r6
   da2f6:	f7ff ff21 	bl	da13c <__multiply>
   da2fa:	6020      	str	r0, [r4, #0]
   da2fc:	f8c0 9000 	str.w	r9, [r0]
   da300:	4604      	mov	r4, r0
   da302:	e7e4      	b.n	da2ce <__pow5mult+0x5a>
   da304:	4638      	mov	r0, r7
   da306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da30a:	bf00      	nop
   da30c:	000db528 	.word	0x000db528

000da310 <__lshift>:
   da310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da314:	460c      	mov	r4, r1
   da316:	6849      	ldr	r1, [r1, #4]
   da318:	6923      	ldr	r3, [r4, #16]
   da31a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da31e:	68a3      	ldr	r3, [r4, #8]
   da320:	4607      	mov	r7, r0
   da322:	4691      	mov	r9, r2
   da324:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da328:	f108 0601 	add.w	r6, r8, #1
   da32c:	42b3      	cmp	r3, r6
   da32e:	db3f      	blt.n	da3b0 <__lshift+0xa0>
   da330:	4638      	mov	r0, r7
   da332:	f7ff fde3 	bl	d9efc <_Balloc>
   da336:	2300      	movs	r3, #0
   da338:	4605      	mov	r5, r0
   da33a:	f100 0114 	add.w	r1, r0, #20
   da33e:	f100 0210 	add.w	r2, r0, #16
   da342:	4618      	mov	r0, r3
   da344:	4553      	cmp	r3, sl
   da346:	db36      	blt.n	da3b6 <__lshift+0xa6>
   da348:	6920      	ldr	r0, [r4, #16]
   da34a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da34e:	f104 0314 	add.w	r3, r4, #20
   da352:	f019 091f 	ands.w	r9, r9, #31
   da356:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da35a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da35e:	d02e      	beq.n	da3be <__lshift+0xae>
   da360:	f1c9 0e20 	rsb	lr, r9, #32
   da364:	468a      	mov	sl, r1
   da366:	2200      	movs	r2, #0
   da368:	6818      	ldr	r0, [r3, #0]
   da36a:	fa00 f009 	lsl.w	r0, r0, r9
   da36e:	4302      	orrs	r2, r0
   da370:	f84a 2b04 	str.w	r2, [sl], #4
   da374:	f853 2b04 	ldr.w	r2, [r3], #4
   da378:	459c      	cmp	ip, r3
   da37a:	fa22 f20e 	lsr.w	r2, r2, lr
   da37e:	d8f3      	bhi.n	da368 <__lshift+0x58>
   da380:	ebac 0304 	sub.w	r3, ip, r4
   da384:	3b15      	subs	r3, #21
   da386:	f023 0303 	bic.w	r3, r3, #3
   da38a:	3304      	adds	r3, #4
   da38c:	f104 0015 	add.w	r0, r4, #21
   da390:	4560      	cmp	r0, ip
   da392:	bf88      	it	hi
   da394:	2304      	movhi	r3, #4
   da396:	50ca      	str	r2, [r1, r3]
   da398:	b10a      	cbz	r2, da39e <__lshift+0x8e>
   da39a:	f108 0602 	add.w	r6, r8, #2
   da39e:	3e01      	subs	r6, #1
   da3a0:	4638      	mov	r0, r7
   da3a2:	612e      	str	r6, [r5, #16]
   da3a4:	4621      	mov	r1, r4
   da3a6:	f7ff fddd 	bl	d9f64 <_Bfree>
   da3aa:	4628      	mov	r0, r5
   da3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da3b0:	3101      	adds	r1, #1
   da3b2:	005b      	lsls	r3, r3, #1
   da3b4:	e7ba      	b.n	da32c <__lshift+0x1c>
   da3b6:	f842 0f04 	str.w	r0, [r2, #4]!
   da3ba:	3301      	adds	r3, #1
   da3bc:	e7c2      	b.n	da344 <__lshift+0x34>
   da3be:	3904      	subs	r1, #4
   da3c0:	f853 2b04 	ldr.w	r2, [r3], #4
   da3c4:	f841 2f04 	str.w	r2, [r1, #4]!
   da3c8:	459c      	cmp	ip, r3
   da3ca:	d8f9      	bhi.n	da3c0 <__lshift+0xb0>
   da3cc:	e7e7      	b.n	da39e <__lshift+0x8e>

000da3ce <__mcmp>:
   da3ce:	b530      	push	{r4, r5, lr}
   da3d0:	6902      	ldr	r2, [r0, #16]
   da3d2:	690c      	ldr	r4, [r1, #16]
   da3d4:	1b12      	subs	r2, r2, r4
   da3d6:	d10e      	bne.n	da3f6 <__mcmp+0x28>
   da3d8:	f100 0314 	add.w	r3, r0, #20
   da3dc:	3114      	adds	r1, #20
   da3de:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da3e2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da3e6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da3ea:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da3ee:	42a5      	cmp	r5, r4
   da3f0:	d003      	beq.n	da3fa <__mcmp+0x2c>
   da3f2:	d305      	bcc.n	da400 <__mcmp+0x32>
   da3f4:	2201      	movs	r2, #1
   da3f6:	4610      	mov	r0, r2
   da3f8:	bd30      	pop	{r4, r5, pc}
   da3fa:	4283      	cmp	r3, r0
   da3fc:	d3f3      	bcc.n	da3e6 <__mcmp+0x18>
   da3fe:	e7fa      	b.n	da3f6 <__mcmp+0x28>
   da400:	f04f 32ff 	mov.w	r2, #4294967295
   da404:	e7f7      	b.n	da3f6 <__mcmp+0x28>

000da406 <__mdiff>:
   da406:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da40a:	460c      	mov	r4, r1
   da40c:	4606      	mov	r6, r0
   da40e:	4611      	mov	r1, r2
   da410:	4620      	mov	r0, r4
   da412:	4617      	mov	r7, r2
   da414:	f7ff ffdb 	bl	da3ce <__mcmp>
   da418:	1e05      	subs	r5, r0, #0
   da41a:	d108      	bne.n	da42e <__mdiff+0x28>
   da41c:	4629      	mov	r1, r5
   da41e:	4630      	mov	r0, r6
   da420:	f7ff fd6c 	bl	d9efc <_Balloc>
   da424:	2301      	movs	r3, #1
   da426:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da42e:	bfa4      	itt	ge
   da430:	463b      	movge	r3, r7
   da432:	4627      	movge	r7, r4
   da434:	4630      	mov	r0, r6
   da436:	6879      	ldr	r1, [r7, #4]
   da438:	bfa6      	itte	ge
   da43a:	461c      	movge	r4, r3
   da43c:	2500      	movge	r5, #0
   da43e:	2501      	movlt	r5, #1
   da440:	f7ff fd5c 	bl	d9efc <_Balloc>
   da444:	693e      	ldr	r6, [r7, #16]
   da446:	60c5      	str	r5, [r0, #12]
   da448:	6925      	ldr	r5, [r4, #16]
   da44a:	f107 0114 	add.w	r1, r7, #20
   da44e:	f104 0914 	add.w	r9, r4, #20
   da452:	f100 0e14 	add.w	lr, r0, #20
   da456:	f107 0210 	add.w	r2, r7, #16
   da45a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da45e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da462:	46f2      	mov	sl, lr
   da464:	2700      	movs	r7, #0
   da466:	f859 3b04 	ldr.w	r3, [r9], #4
   da46a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da46e:	fa1f f883 	uxth.w	r8, r3
   da472:	fa17 f78b 	uxtah	r7, r7, fp
   da476:	0c1b      	lsrs	r3, r3, #16
   da478:	eba7 0808 	sub.w	r8, r7, r8
   da47c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da480:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da484:	fa1f f888 	uxth.w	r8, r8
   da488:	141f      	asrs	r7, r3, #16
   da48a:	454d      	cmp	r5, r9
   da48c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da490:	f84a 3b04 	str.w	r3, [sl], #4
   da494:	d8e7      	bhi.n	da466 <__mdiff+0x60>
   da496:	1b2b      	subs	r3, r5, r4
   da498:	3b15      	subs	r3, #21
   da49a:	f023 0303 	bic.w	r3, r3, #3
   da49e:	3304      	adds	r3, #4
   da4a0:	3415      	adds	r4, #21
   da4a2:	42a5      	cmp	r5, r4
   da4a4:	bf38      	it	cc
   da4a6:	2304      	movcc	r3, #4
   da4a8:	4419      	add	r1, r3
   da4aa:	4473      	add	r3, lr
   da4ac:	469e      	mov	lr, r3
   da4ae:	460d      	mov	r5, r1
   da4b0:	4565      	cmp	r5, ip
   da4b2:	d30e      	bcc.n	da4d2 <__mdiff+0xcc>
   da4b4:	f10c 0203 	add.w	r2, ip, #3
   da4b8:	1a52      	subs	r2, r2, r1
   da4ba:	f022 0203 	bic.w	r2, r2, #3
   da4be:	3903      	subs	r1, #3
   da4c0:	458c      	cmp	ip, r1
   da4c2:	bf38      	it	cc
   da4c4:	2200      	movcc	r2, #0
   da4c6:	441a      	add	r2, r3
   da4c8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da4cc:	b17b      	cbz	r3, da4ee <__mdiff+0xe8>
   da4ce:	6106      	str	r6, [r0, #16]
   da4d0:	e7ab      	b.n	da42a <__mdiff+0x24>
   da4d2:	f855 8b04 	ldr.w	r8, [r5], #4
   da4d6:	fa17 f488 	uxtah	r4, r7, r8
   da4da:	1422      	asrs	r2, r4, #16
   da4dc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da4e0:	b2a4      	uxth	r4, r4
   da4e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da4e6:	f84e 4b04 	str.w	r4, [lr], #4
   da4ea:	1417      	asrs	r7, r2, #16
   da4ec:	e7e0      	b.n	da4b0 <__mdiff+0xaa>
   da4ee:	3e01      	subs	r6, #1
   da4f0:	e7ea      	b.n	da4c8 <__mdiff+0xc2>
	...

000da4f4 <__ulp>:
   da4f4:	b082      	sub	sp, #8
   da4f6:	ed8d 0b00 	vstr	d0, [sp]
   da4fa:	9b01      	ldr	r3, [sp, #4]
   da4fc:	4912      	ldr	r1, [pc, #72]	; (da548 <__ulp+0x54>)
   da4fe:	4019      	ands	r1, r3
   da500:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da504:	2900      	cmp	r1, #0
   da506:	dd05      	ble.n	da514 <__ulp+0x20>
   da508:	2200      	movs	r2, #0
   da50a:	460b      	mov	r3, r1
   da50c:	ec43 2b10 	vmov	d0, r2, r3
   da510:	b002      	add	sp, #8
   da512:	4770      	bx	lr
   da514:	4249      	negs	r1, r1
   da516:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da51a:	ea4f 5021 	mov.w	r0, r1, asr #20
   da51e:	f04f 0200 	mov.w	r2, #0
   da522:	f04f 0300 	mov.w	r3, #0
   da526:	da04      	bge.n	da532 <__ulp+0x3e>
   da528:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da52c:	fa41 f300 	asr.w	r3, r1, r0
   da530:	e7ec      	b.n	da50c <__ulp+0x18>
   da532:	f1a0 0114 	sub.w	r1, r0, #20
   da536:	291e      	cmp	r1, #30
   da538:	bfda      	itte	le
   da53a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da53e:	fa20 f101 	lsrle.w	r1, r0, r1
   da542:	2101      	movgt	r1, #1
   da544:	460a      	mov	r2, r1
   da546:	e7e1      	b.n	da50c <__ulp+0x18>
   da548:	7ff00000 	.word	0x7ff00000

000da54c <__b2d>:
   da54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da54e:	6905      	ldr	r5, [r0, #16]
   da550:	f100 0714 	add.w	r7, r0, #20
   da554:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da558:	1f2e      	subs	r6, r5, #4
   da55a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da55e:	4620      	mov	r0, r4
   da560:	f7ff fd93 	bl	da08a <__hi0bits>
   da564:	f1c0 0320 	rsb	r3, r0, #32
   da568:	280a      	cmp	r0, #10
   da56a:	f8df c07c 	ldr.w	ip, [pc, #124]	; da5e8 <__b2d+0x9c>
   da56e:	600b      	str	r3, [r1, #0]
   da570:	dc14      	bgt.n	da59c <__b2d+0x50>
   da572:	f1c0 0e0b 	rsb	lr, r0, #11
   da576:	fa24 f10e 	lsr.w	r1, r4, lr
   da57a:	42b7      	cmp	r7, r6
   da57c:	ea41 030c 	orr.w	r3, r1, ip
   da580:	bf34      	ite	cc
   da582:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da586:	2100      	movcs	r1, #0
   da588:	3015      	adds	r0, #21
   da58a:	fa04 f000 	lsl.w	r0, r4, r0
   da58e:	fa21 f10e 	lsr.w	r1, r1, lr
   da592:	ea40 0201 	orr.w	r2, r0, r1
   da596:	ec43 2b10 	vmov	d0, r2, r3
   da59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da59c:	42b7      	cmp	r7, r6
   da59e:	bf3a      	itte	cc
   da5a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da5a4:	f1a5 0608 	subcc.w	r6, r5, #8
   da5a8:	2100      	movcs	r1, #0
   da5aa:	380b      	subs	r0, #11
   da5ac:	d017      	beq.n	da5de <__b2d+0x92>
   da5ae:	f1c0 0c20 	rsb	ip, r0, #32
   da5b2:	fa04 f500 	lsl.w	r5, r4, r0
   da5b6:	42be      	cmp	r6, r7
   da5b8:	fa21 f40c 	lsr.w	r4, r1, ip
   da5bc:	ea45 0504 	orr.w	r5, r5, r4
   da5c0:	bf8c      	ite	hi
   da5c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da5c6:	2400      	movls	r4, #0
   da5c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da5cc:	fa01 f000 	lsl.w	r0, r1, r0
   da5d0:	fa24 f40c 	lsr.w	r4, r4, ip
   da5d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da5d8:	ea40 0204 	orr.w	r2, r0, r4
   da5dc:	e7db      	b.n	da596 <__b2d+0x4a>
   da5de:	ea44 030c 	orr.w	r3, r4, ip
   da5e2:	460a      	mov	r2, r1
   da5e4:	e7d7      	b.n	da596 <__b2d+0x4a>
   da5e6:	bf00      	nop
   da5e8:	3ff00000 	.word	0x3ff00000

000da5ec <__d2b>:
   da5ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da5f0:	4689      	mov	r9, r1
   da5f2:	2101      	movs	r1, #1
   da5f4:	ec57 6b10 	vmov	r6, r7, d0
   da5f8:	4690      	mov	r8, r2
   da5fa:	f7ff fc7f 	bl	d9efc <_Balloc>
   da5fe:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da602:	4604      	mov	r4, r0
   da604:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da608:	bb35      	cbnz	r5, da658 <__d2b+0x6c>
   da60a:	2e00      	cmp	r6, #0
   da60c:	9301      	str	r3, [sp, #4]
   da60e:	d028      	beq.n	da662 <__d2b+0x76>
   da610:	4668      	mov	r0, sp
   da612:	9600      	str	r6, [sp, #0]
   da614:	f7ff fd59 	bl	da0ca <__lo0bits>
   da618:	9900      	ldr	r1, [sp, #0]
   da61a:	b300      	cbz	r0, da65e <__d2b+0x72>
   da61c:	9a01      	ldr	r2, [sp, #4]
   da61e:	f1c0 0320 	rsb	r3, r0, #32
   da622:	fa02 f303 	lsl.w	r3, r2, r3
   da626:	430b      	orrs	r3, r1
   da628:	40c2      	lsrs	r2, r0
   da62a:	6163      	str	r3, [r4, #20]
   da62c:	9201      	str	r2, [sp, #4]
   da62e:	9b01      	ldr	r3, [sp, #4]
   da630:	61a3      	str	r3, [r4, #24]
   da632:	2b00      	cmp	r3, #0
   da634:	bf14      	ite	ne
   da636:	2202      	movne	r2, #2
   da638:	2201      	moveq	r2, #1
   da63a:	6122      	str	r2, [r4, #16]
   da63c:	b1d5      	cbz	r5, da674 <__d2b+0x88>
   da63e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da642:	4405      	add	r5, r0
   da644:	f8c9 5000 	str.w	r5, [r9]
   da648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da64c:	f8c8 0000 	str.w	r0, [r8]
   da650:	4620      	mov	r0, r4
   da652:	b003      	add	sp, #12
   da654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da65c:	e7d5      	b.n	da60a <__d2b+0x1e>
   da65e:	6161      	str	r1, [r4, #20]
   da660:	e7e5      	b.n	da62e <__d2b+0x42>
   da662:	a801      	add	r0, sp, #4
   da664:	f7ff fd31 	bl	da0ca <__lo0bits>
   da668:	9b01      	ldr	r3, [sp, #4]
   da66a:	6163      	str	r3, [r4, #20]
   da66c:	2201      	movs	r2, #1
   da66e:	6122      	str	r2, [r4, #16]
   da670:	3020      	adds	r0, #32
   da672:	e7e3      	b.n	da63c <__d2b+0x50>
   da674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da67c:	f8c9 0000 	str.w	r0, [r9]
   da680:	6918      	ldr	r0, [r3, #16]
   da682:	f7ff fd02 	bl	da08a <__hi0bits>
   da686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da68a:	e7df      	b.n	da64c <__d2b+0x60>

000da68c <__ratio>:
   da68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da690:	4688      	mov	r8, r1
   da692:	4669      	mov	r1, sp
   da694:	4681      	mov	r9, r0
   da696:	f7ff ff59 	bl	da54c <__b2d>
   da69a:	a901      	add	r1, sp, #4
   da69c:	4640      	mov	r0, r8
   da69e:	ec55 4b10 	vmov	r4, r5, d0
   da6a2:	f7ff ff53 	bl	da54c <__b2d>
   da6a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da6aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da6ae:	eba3 0c02 	sub.w	ip, r3, r2
   da6b2:	e9dd 3200 	ldrd	r3, r2, [sp]
   da6b6:	1a9b      	subs	r3, r3, r2
   da6b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da6bc:	ec51 0b10 	vmov	r0, r1, d0
   da6c0:	2b00      	cmp	r3, #0
   da6c2:	bfd6      	itet	le
   da6c4:	460a      	movle	r2, r1
   da6c6:	462a      	movgt	r2, r5
   da6c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da6cc:	468b      	mov	fp, r1
   da6ce:	462f      	mov	r7, r5
   da6d0:	bfd4      	ite	le
   da6d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da6d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da6da:	4620      	mov	r0, r4
   da6dc:	ee10 2a10 	vmov	r2, s0
   da6e0:	465b      	mov	r3, fp
   da6e2:	4639      	mov	r1, r7
   da6e4:	f7fd ff82 	bl	d85ec <__aeabi_ddiv>
   da6e8:	ec41 0b10 	vmov	d0, r0, r1
   da6ec:	b003      	add	sp, #12
   da6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da6f2 <__copybits>:
   da6f2:	3901      	subs	r1, #1
   da6f4:	b570      	push	{r4, r5, r6, lr}
   da6f6:	1149      	asrs	r1, r1, #5
   da6f8:	6914      	ldr	r4, [r2, #16]
   da6fa:	3101      	adds	r1, #1
   da6fc:	f102 0314 	add.w	r3, r2, #20
   da700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da708:	1f05      	subs	r5, r0, #4
   da70a:	42a3      	cmp	r3, r4
   da70c:	d30c      	bcc.n	da728 <__copybits+0x36>
   da70e:	1aa3      	subs	r3, r4, r2
   da710:	3b11      	subs	r3, #17
   da712:	f023 0303 	bic.w	r3, r3, #3
   da716:	3211      	adds	r2, #17
   da718:	42a2      	cmp	r2, r4
   da71a:	bf88      	it	hi
   da71c:	2300      	movhi	r3, #0
   da71e:	4418      	add	r0, r3
   da720:	2300      	movs	r3, #0
   da722:	4288      	cmp	r0, r1
   da724:	d305      	bcc.n	da732 <__copybits+0x40>
   da726:	bd70      	pop	{r4, r5, r6, pc}
   da728:	f853 6b04 	ldr.w	r6, [r3], #4
   da72c:	f845 6f04 	str.w	r6, [r5, #4]!
   da730:	e7eb      	b.n	da70a <__copybits+0x18>
   da732:	f840 3b04 	str.w	r3, [r0], #4
   da736:	e7f4      	b.n	da722 <__copybits+0x30>

000da738 <__any_on>:
   da738:	f100 0214 	add.w	r2, r0, #20
   da73c:	6900      	ldr	r0, [r0, #16]
   da73e:	114b      	asrs	r3, r1, #5
   da740:	4298      	cmp	r0, r3
   da742:	b510      	push	{r4, lr}
   da744:	db11      	blt.n	da76a <__any_on+0x32>
   da746:	dd0a      	ble.n	da75e <__any_on+0x26>
   da748:	f011 011f 	ands.w	r1, r1, #31
   da74c:	d007      	beq.n	da75e <__any_on+0x26>
   da74e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da752:	fa24 f001 	lsr.w	r0, r4, r1
   da756:	fa00 f101 	lsl.w	r1, r0, r1
   da75a:	428c      	cmp	r4, r1
   da75c:	d10b      	bne.n	da776 <__any_on+0x3e>
   da75e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da762:	4293      	cmp	r3, r2
   da764:	d803      	bhi.n	da76e <__any_on+0x36>
   da766:	2000      	movs	r0, #0
   da768:	bd10      	pop	{r4, pc}
   da76a:	4603      	mov	r3, r0
   da76c:	e7f7      	b.n	da75e <__any_on+0x26>
   da76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da772:	2900      	cmp	r1, #0
   da774:	d0f5      	beq.n	da762 <__any_on+0x2a>
   da776:	2001      	movs	r0, #1
   da778:	e7f6      	b.n	da768 <__any_on+0x30>

000da77a <_calloc_r>:
   da77a:	b513      	push	{r0, r1, r4, lr}
   da77c:	434a      	muls	r2, r1
   da77e:	4611      	mov	r1, r2
   da780:	9201      	str	r2, [sp, #4]
   da782:	f7fb ffe7 	bl	d6754 <_malloc_r>
   da786:	4604      	mov	r4, r0
   da788:	b118      	cbz	r0, da792 <_calloc_r+0x18>
   da78a:	9a01      	ldr	r2, [sp, #4]
   da78c:	2100      	movs	r1, #0
   da78e:	f7fe f987 	bl	d8aa0 <memset>
   da792:	4620      	mov	r0, r4
   da794:	b002      	add	sp, #8
   da796:	bd10      	pop	{r4, pc}

000da798 <__ascii_wctomb>:
   da798:	b149      	cbz	r1, da7ae <__ascii_wctomb+0x16>
   da79a:	2aff      	cmp	r2, #255	; 0xff
   da79c:	bf85      	ittet	hi
   da79e:	238a      	movhi	r3, #138	; 0x8a
   da7a0:	6003      	strhi	r3, [r0, #0]
   da7a2:	700a      	strbls	r2, [r1, #0]
   da7a4:	f04f 30ff 	movhi.w	r0, #4294967295
   da7a8:	bf98      	it	ls
   da7aa:	2001      	movls	r0, #1
   da7ac:	4770      	bx	lr
   da7ae:	4608      	mov	r0, r1
   da7b0:	4770      	bx	lr
	...

000da7b4 <__aeabi_d2lz>:
   da7b4:	b538      	push	{r3, r4, r5, lr}
   da7b6:	2200      	movs	r2, #0
   da7b8:	2300      	movs	r3, #0
   da7ba:	4604      	mov	r4, r0
   da7bc:	460d      	mov	r5, r1
   da7be:	f7fe f85d 	bl	d887c <__aeabi_dcmplt>
   da7c2:	b928      	cbnz	r0, da7d0 <__aeabi_d2lz+0x1c>
   da7c4:	4620      	mov	r0, r4
   da7c6:	4629      	mov	r1, r5
   da7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da7cc:	f7fe b922 	b.w	d8a14 <__aeabi_d2ulz>
   da7d0:	4620      	mov	r0, r4
   da7d2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   da7d6:	f7fe f91d 	bl	d8a14 <__aeabi_d2ulz>
   da7da:	4240      	negs	r0, r0
   da7dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7e0:	bd38      	pop	{r3, r4, r5, pc}
   da7e2:	bf00      	nop

000da7e4 <dynalib_user>:
   da7e4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   da7f4:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
   da804:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
   da814:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
   da824:	6974 6e6f 6620 6961 656c 0064 6f46 6e75     tion failed.Foun
   da834:	2064 6461 7264 7365 3a73 2520 3330 2069     d address: %03i 
   da844:	3028 2578 3230 2958 0a20 4400 6e6f 3a65     (0x%02X) ..Done:
   da854:	4620 756f 646e 2520 2069 6564 6976 6563      Found %i device
   da864:	7328 2e29 0a20 4300 4259 5245 4142 5353     (s). ..CYBERBASS
   da874:	4220 4f4f 4954 474e 5520 2150 4300 6e6f      BOOTING UP!.Con
   da884:	656e 7463 6e69 2067 6f74 4920 746e 7265     necting to Inter
   da894:	656e 2074 000a 6f43 6e6e 6365 6974 676e     net ..Connecting
   da8a4:	7420 206f 6e49 6f66 656e 0a74 4900 696e      to Infonet..Ini
   da8b4:	6974 6c61 7a69 6e69 2067 3249 2043 6564     tializing I2C de
   da8c4:	6976 6563 2e73 2e2e 5400 7365 6974 676e     vices....Testing
   da8d4:	6420 7665 6369 2065 6f63 6e6e 6365 6974      device connecti
   da8e4:	6e6f 2e73 2e2e 4200 5455 4f54 204e 5250     ons....BUTTON PR
   da8f4:	5345 4553 0044 694d 7473 7265 6c46 7865     ESSED.MisterFlex
   da904:	6900 2e6f 6461 6661 7572 7469 632e 6d6f     .io.adafruit.com
   da914:	6100 6f69 655f 455a 364c 4c34 6c72 4353     .aio_eZEL64LrlSC
   da924:	7550 6733 676a 6178 754b 7248 645a 3473     Pu3gjgxaKuHrZds4
   da934:	0041 694d 7473 7265 6c46 7865 662f 6565     A.MisterFlex/fee
   da944:	7364 482f 6d75 6469 7469 0079 694d 7473     ds/Humidity.Mist
   da954:	7265 6c46 7865 662f 6565 7364 502f 6572     erFlex/feeds/Pre
   da964:	7373 7275 0065 694d 7473 7265 6c46 7865     ssure.MisterFlex
   da974:	662f 6565 7364 542f 6d65 6570 6172 7574     /feeds/Temperatu
   da984:	6572 4d00 7369 6574 4672 656c 2f78 6566     re.MisterFlex/fe
   da994:	6465 2f73 6f4e 6574 6400 6665 7561 746c     eds/Note.default
   da9a4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   da9b4:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   da9c4:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   da9d4:	2075 7325 4d20 444f 2545 3e75 0000 0000     u %s MODE%u>....

000da9e4 <_ZTVN8particle11SPISettingsE>:
	...
   da9ec:	4909 000d 48f9 000d 48fb 000d c000 4001     .I...H...H.....@
   da9fc:	1000 4002 2000 4002                         ...@. .@

000daa04 <CSWTCH.60>:
   daa04:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   daa14:	0050 0000                                   P...

000daa18 <_ZTV16Adafruit_SSD1306>:
	...
   daa20:	40c9 000d 479d 000d 5fd5 000d 6c69 000d     .@...G..._..il..
   daa30:	58ed 000d 5ced 000d 577d 000d 5611 000d     .X...\..}W...V..
   daa40:	5da9 000d 5e47 000d 5e7d 000d 5e99 000d     .]..G^..}^...^..

000daa50 <_ZL4font>:
   daa50:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   daa60:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   daa70:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   daa80:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   daa90:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   daaa0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   daab0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   daac0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   daad0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   daae0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   daaf0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dab00:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dab10:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dab20:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dab30:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dab40:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dab50:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dab60:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dab70:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dab80:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dab90:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   daba0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dabb0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dabc0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dabd0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dabe0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dabf0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dac00:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dac10:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dac20:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dac30:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dac40:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dac50:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dac60:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dac70:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dac80:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dac90:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   daca0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dacb0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dacc0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dacd0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dace0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   dacf0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dad00:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dad10:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   dad20:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dad30:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   dad40:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   dad50:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   dad60:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dad70:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dad80:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dad90:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dada0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dadb0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dadc0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   dadd0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   dade0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   dadf0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   dae00:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   dae10:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   dae20:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   dae30:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   dae40:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   dae50:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   dae60:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   dae70:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   dae80:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   dae90:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   daea0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   daeb0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   daec0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   daed0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   daee0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   daef0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   daf00:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   daf10:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   daf20:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   daf30:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   daf40:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000daf4c <_ZTV12Adafruit_GFX>:
	...
   daf5c:	5fd5 000d 6c69 000d 40a5 000d 5ced 000d     ._..il...@...\..
   daf6c:	5e11 000d 5e2d 000d 5da9 000d 5e47 000d     .^..-^...]..G^..
   daf7c:	5e7d 000d 5e99 000d                         }^...^..

000daf84 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   daf8c:	40cb 000d 47ab 000d 607b 000d 6127 000d     .@...G..{`..'a..
   daf9c:	6159 000d 608f 000d 60cf 000d               Ya...`...`..

000dafa8 <_ZTV13Adafruit_MQTT>:
	...
   dafb8:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   dafc8:	40a5 000d                                   .@..

000dafcc <_ZTVN5spark13EthernetClassE>:
	...
   dafd4:	67e3 000d 67d9 000d 67cf 000d 67c5 000d     .g...g...g...g..
   dafe4:	67b9 000d 67ad 000d 7aed 000d 7af5 000d     .g...g...z...z..
   daff4:	67a1 000d 6799 000d 678f 000d 6785 000d     .g...g...g...g..
   db004:	7b25 000d                                   %{..

000db008 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db008:	0800 1810 2820 3830                         .... (08

000db010 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   db018:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   db028:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000db038 <_ZTV9IPAddress>:
	...
   db040:	6fc1 000d 6fb1 000d 6fb3 000d               .o...o...o..

000db04c <_ZTV9USBSerial>:
	...
   db054:	70cd 000d 7135 000d 710b 000d 6c69 000d     .p..5q...q..il..
   db064:	70fd 000d 70cf 000d 70df 000d 712f 000d     .p...p...p../q..
   db074:	70ef 000d 70c9 000d                         .p...p..

000db07c <_ZTV11USARTSerial>:
	...
   db084:	72a5 000d 7311 000d 72e9 000d 6c69 000d     .r...s...r..il..
   db094:	72b9 000d 72d5 000d 72c7 000d 72e3 000d     .r...r...r...r..
   db0a4:	72a7 000d 72ab 000d                         .r...r..

000db0ac <_ZTV7TwoWire>:
	...
   db0b4:	73b1 000d 73fb 000d 73d3 000d 73b3 000d     .s...s...s...s..
   db0c4:	73db 000d 73e3 000d 73eb 000d 73f3 000d     .s...s...s...s..
   db0d4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   db0e4:	2072 203d 6425 0000                         r = %d..

000db0ec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db0f4:	7545 000d 7569 000d 793b 000d 7577 000d     Eu..iu..;y..wu..
   db104:	7549 000d                                   Iu..

000db108 <_ZTV9TCPClient>:
	...
   db110:	4245 000d 4303 000d 74c3 000d 74dd 000d     EB...C...t...t..
   db120:	77d1 000d 7643 000d 7615 000d 7507 000d     .w..Cv...v...u..
   db130:	76db 000d 7941 000d 7677 000d 7885 000d     .v..Ay..wv...x..
   db140:	7509 000d 753b 000d 74ef 000d 757b 000d     .u..;u...t..{u..
   db150:	75f5 000d                                   .u..

000db154 <_ZTVN5spark9WiFiClassE>:
	...
   db15c:	7a8f 000d 7a85 000d 7a7b 000d 7a3d 000d     .z...z..{z..=z..
   db16c:	6deb 000d 7a6f 000d 7aed 000d 7af5 000d     .m..oz...z...z..
   db17c:	7a63 000d 7a5b 000d 7a51 000d 7a47 000d     cz..[z..Qz..Gz..
   db18c:	7b25 000d                                   %{..

000db190 <_ZTVN5spark12NetworkClassE>:
	...
   db198:	7aad 000d 7ab7 000d 7ac1 000d 7acb 000d     .z...z...z...z..
   db1a8:	7ad5 000d 7ae1 000d 7aed 000d 7af5 000d     .z...z...z...z..
   db1b8:	7afd 000d 7b09 000d 7b11 000d 7b1b 000d     .z...{...{...{..
   db1c8:	7b25 000d                                   %{..

000db1cc <_ZSt7nothrow>:
	...

000db1cd <_ZTSSt19_Sp_make_shared_tag>:
   db1cd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   db1dd:	6572 5f64 6174 0067 0000                     red_tag....

000db1e8 <_ZTISt19_Sp_make_shared_tag>:
   db1e8:	b228 000d b1cd 000d                         (.......

000db1f0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   db1f0:	b288 000d b1fc 000d b2ac 000d               ............

000db1fc <_ZTSN10__cxxabiv117__class_type_infoE>:
   db1fc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   db20c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   db21c:	0045 0000                                   E...

000db220 <_ZTVN10__cxxabiv117__class_type_infoE>:
   db220:	0000 0000 b1f0 000d 7e39 000d 7e4d 000d     ........9~..M~..
   db230:	7fe1 000d 7fe1 000d 7eb7 000d 7df9 000d     .........~...}..
   db240:	7e9f 000d 7e61 000d 7e2d 000d               .~..a~..-~..

000db24c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   db24c:	b288 000d b258 000d b1f0 000d               ....X.......

000db258 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   db258:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   db268:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   db278:	666e 456f 0000 0000                         nfoE....

000db280 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   db280:	0000 0000 b24c 000d 7ee1 000d 7ef5 000d     ....L....~...~..
   db290:	7fe1 000d 7fe1 000d 7eb7 000d 7df9 000d     .........~...}..
   db2a0:	7fb5 000d 7f41 000d 7f09 000d               ....A.......

000db2ac <_ZTISt9type_info>:
   db2ac:	b228 000d b2b4 000d                         (.......

000db2b4 <_ZTSSt9type_info>:
   db2b4:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   db2c4:	6e69 7469 0079 6e61 0000 0000               inity.an....

000db2d0 <fpi.7566>:
   db2d0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db2e0:	0000 0000                                   ....

000db2e4 <fpinan.7602>:
   db2e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db2f4:	0000 0000                                   ....

000db2f8 <tinytens>:
   db2f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db308:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db318:	6f43 64ac 0628 1168                         Co.d(.h.

000db320 <_ctype_>:
   db320:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db330:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db340:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db350:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db360:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db370:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db380:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db390:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db3a0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db424 <_C_numeric_locale>:
   db424:	a8cb 000d a84e 000d e244 2003 0043 4f50     ....N...D.. C.PO
   db434:	4953 0058                                   SIX.

000db438 <__mprec_bigtens>:
   db438:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db448:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db458:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db460 <__mprec_tens>:
   db460:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db470:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db480:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db490:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db4a0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db4b0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db4c0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db4d0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db4e0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db4f0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db500:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db510:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db520:	9db4 79d9 7843 44ea                         ...yCx.D

000db528 <p05.7490>:
   db528:	0005 0000 0019 0000 007d 0000               ........}...

000db534 <link_const_variable_data_end>:
   db534:	000d47b9 	.word	0x000d47b9
   db538:	000d5351 	.word	0x000d5351
   db53c:	000d67ed 	.word	0x000d67ed
   db540:	000d6a59 	.word	0x000d6a59
   db544:	000d6c41 	.word	0x000d6c41
   db548:	000d6df9 	.word	0x000d6df9
   db54c:	000d6e49 	.word	0x000d6e49
   db550:	000d6e71 	.word	0x000d6e71
   db554:	000d7a99 	.word	0x000d7a99
   db558:	000d7c05 	.word	0x000d7c05

000db55c <link_constructors_end>:
   db55c:	00000000 	.word	0x00000000

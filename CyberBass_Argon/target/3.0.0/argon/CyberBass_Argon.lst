
c:/Users/jake/Documents/IoT/CyberBass/CyberBass_Argon/target/3.0.0/argon/CyberBass_Argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004404  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8420  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e01c  000d8424  0001e01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000035c  2003e498  2003e498  0002e498  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d889c  000d889c  0002889c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d88c4  000d88c4  000288c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001edfc9  00000000  00000000  000288c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001cd00  00000000  00000000  00216891  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b123  00000000  00000000  00233591  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003088  00000000  00000000  0026e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009cc0  00000000  00000000  0027173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004196a  00000000  00000000  0027b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b183  00000000  00000000  002bcd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012eff7  00000000  00000000  00307ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008a80  00000000  00000000  00436ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fc6b 	bl	d7908 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fc73 	bl	d7924 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e01c 	.word	0x2003e01c
   d4048:	000d8424 	.word	0x000d8424
   d404c:	2003e494 	.word	0x2003e494
   d4050:	2003e498 	.word	0x2003e498
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f835 	bl	d60cc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d83f0 	.word	0x000d83f0
   d407c:	000d8418 	.word	0x000d8418

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b85c 	b.w	d413c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f923 	bl	d42d0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bfdf 	b.w	d6050 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bcf3 	b.w	d5a7c <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bcf1 	b.w	d5a7c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bcf7 	b.w	d5a8c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fc3c 	bl	d5924 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d55f5 	.word	0x000d55f5

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr

000d40c6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c6:	4770      	bx	lr

000d40c8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40c8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ca:	6984      	ldr	r4, [r0, #24]
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN9TCPClientD1Ev+0x30>)
   d40ce:	6003      	str	r3, [r0, #0]
   d40d0:	4605      	mov	r5, r0
   d40d2:	b17c      	cbz	r4, d40f4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	3b01      	subs	r3, #1
   d40d8:	6063      	str	r3, [r4, #4]
   d40da:	b95b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	4620      	mov	r0, r4
   d40e0:	689b      	ldr	r3, [r3, #8]
   d40e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e4:	68a3      	ldr	r3, [r4, #8]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	60a3      	str	r3, [r4, #8]
   d40ea:	b91b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	68db      	ldr	r3, [r3, #12]
   d40f2:	4798      	blx	r3
   d40f4:	4628      	mov	r0, r5
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	000d823c 	.word	0x000d823c

000d40fc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40fc:	b510      	push	{r4, lr}
   d40fe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4100:	6800      	ldr	r0, [r0, #0]
   d4102:	b108      	cbz	r0, d4108 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4104:	f001 fcc2 	bl	d5a8c <free>
class SystemClass {
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d410c:	b40e      	push	{r1, r2, r3}
   d410e:	b503      	push	{r0, r1, lr}
   d4110:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4112:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4114:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4118:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d411a:	f001 fef6 	bl	d5f0a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d411e:	b002      	add	sp, #8
   d4120:	f85d eb04 	ldr.w	lr, [sp], #4
   d4124:	b003      	add	sp, #12
   d4126:	4770      	bx	lr

000d4128 <_ZN9TCPClientD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f7ff ffcc 	bl	d40c8 <_ZN9TCPClientD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	211c      	movs	r1, #28
   d4134:	f002 fea1 	bl	d6e7a <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <setup>:
Adafruit_MQTT_Publish temperaturePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Temperature");
Adafruit_MQTT_Publish NotePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Note");


// setup() runs once, when the device is first turned on.
void setup() {
   d413c:	b570      	push	{r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d413e:	f002 f8e1 	bl	d6304 <_Z16_fetch_usbserialv>
   d4142:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4146:	f002 f8d1 	bl	d62ec <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d414a:	f002 f961 	bl	d6410 <_Z22__fetch_global_Serial1v>
   d414e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4152:	f002 f959 	bl	d6408 <_ZN11USARTSerial5beginEm>

  pinMode(GREENPIN, OUTPUT);
   d4156:	2101      	movs	r1, #1
   d4158:	200b      	movs	r0, #11
   d415a:	f002 fde9 	bl	d6d30 <pinMode>
  pinMode(REDPIN, OUTPUT);
   d415e:	2101      	movs	r1, #1
   d4160:	200c      	movs	r0, #12
   d4162:	f002 fde5 	bl	d6d30 <pinMode>
  pinMode (ENCODERSWITCH, INPUT);
   d4166:	2100      	movs	r1, #0
   d4168:	200d      	movs	r0, #13
   d416a:	f002 fde1 	bl	d6d30 <pinMode>
  pinMode (PUMPBUTTON, INPUT_PULLDOWN);
   d416e:	2103      	movs	r1, #3
   d4170:	200e      	movs	r0, #14
   d4172:	f002 fddd 	bl	d6d30 <pinMode>
  pinMode(PUMPOUT, OUTPUT);

  for (i = 0; i <= 127; i++)
   d4176:	4c4b      	ldr	r4, [pc, #300]	; (d42a4 <setup+0x168>)
  {
    Wire.beginTransmission (i);
    //Serial.printf("Wire transmission end returned: %i \n",Wire.endTransmission());
    if (Wire.endTransmission () == 0)
      {
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d4178:	4e4b      	ldr	r6, [pc, #300]	; (d42a8 <setup+0x16c>)
      count++;
   d417a:	4d4c      	ldr	r5, [pc, #304]	; (d42ac <setup+0x170>)
  pinMode(PUMPOUT, OUTPUT);
   d417c:	2101      	movs	r1, #1
   d417e:	2011      	movs	r0, #17
   d4180:	f002 fdd6 	bl	d6d30 <pinMode>
  for (i = 0; i <= 127; i++)
   d4184:	2300      	movs	r3, #0
   d4186:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission (i);
   d4188:	f002 fe4a 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d418c:	6821      	ldr	r1, [r4, #0]
   d418e:	f002 f9dd 	bl	d654c <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission () == 0)
   d4192:	f002 fe45 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4196:	f002 f9e0 	bl	d655a <_ZN7TwoWire15endTransmissionEv>
   d419a:	b960      	cbnz	r0, d41b6 <setup+0x7a>
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d419c:	f002 f8b2 	bl	d6304 <_Z16_fetch_usbserialv>
   d41a0:	6823      	ldr	r3, [r4, #0]
   d41a2:	4631      	mov	r1, r6
   d41a4:	461a      	mov	r2, r3
   d41a6:	f7ff ffb1 	bl	d410c <_ZN5Print6printfEPKcz>
      count++;
   d41aa:	682b      	ldr	r3, [r5, #0]
      delay (1);
   d41ac:	2001      	movs	r0, #1
      count++;
   d41ae:	3301      	adds	r3, #1
   d41b0:	602b      	str	r3, [r5, #0]
      delay (1);
   d41b2:	f001 ff13 	bl	d5fdc <delay>
  for (i = 0; i <= 127; i++)
   d41b6:	6823      	ldr	r3, [r4, #0]
   d41b8:	3301      	adds	r3, #1
   d41ba:	2b7f      	cmp	r3, #127	; 0x7f
   d41bc:	6023      	str	r3, [r4, #0]
   d41be:	dde3      	ble.n	d4188 <setup+0x4c>
      } 
  }
  Serial.printf("Done: Found %i device(s). \n",count);
   d41c0:	f002 f8a0 	bl	d6304 <_Z16_fetch_usbserialv>
   d41c4:	4b39      	ldr	r3, [pc, #228]	; (d42ac <setup+0x170>)
   d41c6:	493a      	ldr	r1, [pc, #232]	; (d42b0 <setup+0x174>)
   d41c8:	681a      	ldr	r2, [r3, #0]
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d41ca:	4d3a      	ldr	r5, [pc, #232]	; (d42b4 <setup+0x178>)
  display.setCursor(0,0);
  display.printf("Connecting to Infonet\n");
  display.display();
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   d41cc:	4e3a      	ldr	r6, [pc, #232]	; (d42b8 <setup+0x17c>)
  Serial.printf("Done: Found %i device(s). \n",count);
   d41ce:	f7ff ff9d 	bl	d410c <_ZN5Print6printfEPKcz>
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
   d41d2:	223c      	movs	r2, #60	; 0x3c
   d41d4:	2102      	movs	r1, #2
   d41d6:	4839      	ldr	r0, [pc, #228]	; (d42bc <setup+0x180>)
   d41d8:	f000 fe84 	bl	d4ee4 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d41dc:	4837      	ldr	r0, [pc, #220]	; (d42bc <setup+0x180>)
   d41de:	f000 fe11 	bl	d4e04 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
   d41e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41e6:	f001 fef9 	bl	d5fdc <delay>
  display.clearDisplay();
   d41ea:	4834      	ldr	r0, [pc, #208]	; (d42bc <setup+0x180>)
   d41ec:	f000 fdae 	bl	d4d4c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(2);
   d41f0:	4832      	ldr	r0, [pc, #200]	; (d42bc <setup+0x180>)
   d41f2:	2102      	movs	r1, #2
   d41f4:	f001 f901 	bl	d53fa <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);             // Normal 1:1 pixel scale
   d41f8:	4830      	ldr	r0, [pc, #192]	; (d42bc <setup+0x180>)
   d41fa:	2101      	movs	r1, #1
   d41fc:	f001 f8f3 	bl	d53e6 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   d4200:	482e      	ldr	r0, [pc, #184]	; (d42bc <setup+0x180>)
   d4202:	2101      	movs	r1, #1
   d4204:	f001 f8f4 	bl	d53f0 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d4208:	2200      	movs	r2, #0
   d420a:	4611      	mov	r1, r2
   d420c:	482b      	ldr	r0, [pc, #172]	; (d42bc <setup+0x180>)
   d420e:	f001 f8e7 	bl	d53e0 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("CYBERBASS BOOTING UP!");
   d4212:	492b      	ldr	r1, [pc, #172]	; (d42c0 <setup+0x184>)
   d4214:	4829      	ldr	r0, [pc, #164]	; (d42bc <setup+0x180>)
   d4216:	f001 fe50 	bl	d5eba <_ZN5Print7printlnEPKc>
  display.display();
   d421a:	4828      	ldr	r0, [pc, #160]	; (d42bc <setup+0x180>)
   d421c:	f000 fdf2 	bl	d4e04 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d4220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4224:	f001 feda 	bl	d5fdc <delay>
  Serial.printf("Connecting to Internet \n");
   d4228:	f002 f86c 	bl	d6304 <_Z16_fetch_usbserialv>
   d422c:	4925      	ldr	r1, [pc, #148]	; (d42c4 <setup+0x188>)
   d422e:	f7ff ff6d 	bl	d410c <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   d4232:	4822      	ldr	r0, [pc, #136]	; (d42bc <setup+0x180>)
   d4234:	f000 fd8a 	bl	d4d4c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);
   d4238:	2200      	movs	r2, #0
   d423a:	4611      	mov	r1, r2
   d423c:	481f      	ldr	r0, [pc, #124]	; (d42bc <setup+0x180>)
   d423e:	f001 f8cf 	bl	d53e0 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Connecting to Infonet\n");
   d4242:	4921      	ldr	r1, [pc, #132]	; (d42c8 <setup+0x18c>)
   d4244:	481d      	ldr	r0, [pc, #116]	; (d42bc <setup+0x180>)
   d4246:	f7ff ff61 	bl	d410c <_ZN5Print6printfEPKcz>
  display.display();
   d424a:	481c      	ldr	r0, [pc, #112]	; (d42bc <setup+0x180>)
   d424c:	f000 fdda 	bl	d4e04 <_ZN16Adafruit_SSD13067displayEv>
   d4250:	2300      	movs	r3, #0
   d4252:	6868      	ldr	r0, [r5, #4]
   d4254:	461a      	mov	r2, r3
   d4256:	4619      	mov	r1, r3
   d4258:	f001 fb98 	bl	d598c <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d425c:	2200      	movs	r2, #0
   d425e:	6868      	ldr	r0, [r5, #4]
   d4260:	4611      	mov	r1, r2
   d4262:	f001 fb9b 	bl	d599c <network_connecting>
  while(WiFi.connecting()) {
   d4266:	4604      	mov	r4, r0
   d4268:	b140      	cbz	r0, d427c <setup+0x140>
    Serial.printf(".");
   d426a:	f002 f84b 	bl	d6304 <_Z16_fetch_usbserialv>
   d426e:	4631      	mov	r1, r6
   d4270:	f7ff ff4c 	bl	d410c <_ZN5Print6printfEPKcz>
    delay(100);
   d4274:	2064      	movs	r0, #100	; 0x64
   d4276:	f001 feb1 	bl	d5fdc <delay>
  while(WiFi.connecting()) {
   d427a:	e7ef      	b.n	d425c <setup+0x120>
  }
  Time.zone(-6);
   d427c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4280:	f001 fe82 	bl	d5f88 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4284:	f001 fbe2 	bl	d5a4c <spark_cloud_flag_connected>
        if (!connected()) {
   d4288:	b110      	cbz	r0, d4290 <setup+0x154>
        return spark_sync_time(NULL);
   d428a:	4620      	mov	r0, r4
   d428c:	f001 fbe6 	bl	d5a5c <spark_sync_time>
  Particle.syncTime();
  delay(100); //wait for Serial Monitor to startup
   d4290:	2064      	movs	r0, #100	; 0x64
   d4292:	f001 fea3 	bl	d5fdc <delay>

  //Setup BME
  bme.begin(0x76);


}
   d4296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bme.begin(0x76);
   d429a:	480c      	ldr	r0, [pc, #48]	; (d42cc <setup+0x190>)
   d429c:	2176      	movs	r1, #118	; 0x76
   d429e:	f000 bb78 	b.w	d4992 <_ZN15Adafruit_BME2805beginEh>
   d42a2:	bf00      	nop
   d42a4:	2003e548 	.word	0x2003e548
   d42a8:	000d79c4 	.word	0x000d79c4
   d42ac:	2003e514 	.word	0x2003e514
   d42b0:	000d79e3 	.word	0x000d79e3
   d42b4:	2003e7c8 	.word	0x2003e7c8
   d42b8:	000d7a45 	.word	0x000d7a45
   d42bc:	2003e518 	.word	0x2003e518
   d42c0:	000d79ff 	.word	0x000d79ff
   d42c4:	000d7a15 	.word	0x000d7a15
   d42c8:	000d7a2e 	.word	0x000d7a2e
   d42cc:	2003e4d0 	.word	0x2003e4d0

000d42d0 <loop>:
  operate pump.

*/

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42d0:	b508      	push	{r3, lr}
  

  //enable blood spewing
  bool bloody = digitalRead(PUMPBUTTON);
   d42d2:	200e      	movs	r0, #14
   d42d4:	f002 fd56 	bl	d6d84 <digitalRead>
  if(bloody){
   d42d8:	4601      	mov	r1, r0
   d42da:	b128      	cbz	r0, d42e8 <loop+0x18>
  else{
    digitalWrite(PUMPOUT, LOW);
  }

  
}
   d42dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(PUMPOUT, HIGH);
   d42e0:	2101      	movs	r1, #1
   d42e2:	2011      	movs	r0, #17
   d42e4:	f002 bd35 	b.w	d6d52 <digitalWrite>
}
   d42e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(PUMPOUT, LOW);
   d42ec:	2011      	movs	r0, #17
   d42ee:	f002 bd30 	b.w	d6d52 <digitalWrite>

000d42f2 <_ZN16Adafruit_SSD1306D0Ev>:
   d42f2:	b510      	push	{r4, lr}
   d42f4:	2124      	movs	r1, #36	; 0x24
   d42f6:	4604      	mov	r4, r0
   d42f8:	f002 fdbf 	bl	d6e7a <_ZdlPvj>
   d42fc:	4620      	mov	r0, r4
   d42fe:	bd10      	pop	{r4, pc}

000d4300 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4300:	b510      	push	{r4, lr}
   d4302:	21d4      	movs	r1, #212	; 0xd4
   d4304:	4604      	mov	r4, r0
   d4306:	f002 fdb8 	bl	d6e7a <_ZdlPvj>
   d430a:	4620      	mov	r0, r4
   d430c:	bd10      	pop	{r4, pc}
	...

000d4310 <_GLOBAL__sub_I_SystemMode>:
}
   d4310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4312:	4c2a      	ldr	r4, [pc, #168]	; (d43bc <_GLOBAL__sub_I_SystemMode+0xac>)
    SleepResult() {}
   d4314:	4b2a      	ldr	r3, [pc, #168]	; (d43c0 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4316:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4318:	2500      	movs	r5, #0
SYSTEM_MODE(SEMI_AUTOMATIC);
   d431a:	4e2a      	ldr	r6, [pc, #168]	; (d43c4 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d431c:	6025      	str	r5, [r4, #0]
   d431e:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d4320:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4322:	2002      	movs	r0, #2
   d4324:	f001 fb0e 	bl	d5944 <set_system_mode>
   d4328:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   d432a:	4c27      	ldr	r4, [pc, #156]	; (d43c8 <_GLOBAL__sub_I_SystemMode+0xb8>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d432c:	4927      	ldr	r1, [pc, #156]	; (d43cc <_GLOBAL__sub_I_SystemMode+0xbc>)
TCPClient TheClient; 
   d432e:	4f28      	ldr	r7, [pc, #160]	; (d43d0 <_GLOBAL__sub_I_SystemMode+0xc0>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4330:	4632      	mov	r2, r6
   d4332:	f002 fd9d 	bl	d6e70 <__aeabi_atexit>
Adafruit_SSD1306 display(OLED_RESET);
   d4336:	2104      	movs	r1, #4
   d4338:	4620      	mov	r0, r4
   d433a:	f000 fcf1 	bl	d4d20 <_ZN16Adafruit_SSD1306C1Ea>
   d433e:	4632      	mov	r2, r6
   d4340:	4924      	ldr	r1, [pc, #144]	; (d43d4 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d4342:	4620      	mov	r0, r4
   d4344:	f002 fd94 	bl	d6e70 <__aeabi_atexit>
Adafruit_BME280 bme;
   d4348:	4823      	ldr	r0, [pc, #140]	; (d43d8 <_GLOBAL__sub_I_SystemMode+0xc8>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d434a:	4c24      	ldr	r4, [pc, #144]	; (d43dc <_GLOBAL__sub_I_SystemMode+0xcc>)
   d434c:	f000 f896 	bl	d447c <_ZN15Adafruit_BME280C1Ev>
TCPClient TheClient; 
   d4350:	4638      	mov	r0, r7
   d4352:	f002 fb2f 	bl	d69b4 <_ZN9TCPClientC1Ev>
   d4356:	4632      	mov	r2, r6
   d4358:	4921      	ldr	r1, [pc, #132]	; (d43e0 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d435a:	4638      	mov	r0, r7
   d435c:	f002 fd88 	bl	d6e70 <__aeabi_atexit>
   d4360:	4b20      	ldr	r3, [pc, #128]	; (d43e4 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d4362:	9300      	str	r3, [sp, #0]
   d4364:	4920      	ldr	r1, [pc, #128]	; (d43e8 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d4366:	4b21      	ldr	r3, [pc, #132]	; (d43ec <_GLOBAL__sub_I_SystemMode+0xdc>)
   d4368:	f240 725b 	movw	r2, #1883	; 0x75b
   d436c:	4620      	mov	r0, r4
   d436e:	f001 f8d7 	bl	d5520 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4372:	4b1f      	ldr	r3, [pc, #124]	; (d43f0 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4374:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4376:	4632      	mov	r2, r6
   d4378:	491e      	ldr	r1, [pc, #120]	; (d43f4 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d437a:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
   d437e:	4620      	mov	r0, r4
   d4380:	f002 fd76 	bl	d6e70 <__aeabi_atexit>
Adafruit_MQTT_Publish humidityPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Humidity");
   d4384:	462b      	mov	r3, r5
   d4386:	4621      	mov	r1, r4
   d4388:	4a1b      	ldr	r2, [pc, #108]	; (d43f8 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d438a:	481c      	ldr	r0, [pc, #112]	; (d43fc <_GLOBAL__sub_I_SystemMode+0xec>)
   d438c:	f001 f8e4 	bl	d5558 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pressurePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Pressure");
   d4390:	462b      	mov	r3, r5
   d4392:	4621      	mov	r1, r4
   d4394:	4a1a      	ldr	r2, [pc, #104]	; (d4400 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d4396:	481b      	ldr	r0, [pc, #108]	; (d4404 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d4398:	f001 f8de 	bl	d5558 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish temperaturePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Temperature");
   d439c:	462b      	mov	r3, r5
   d439e:	4621      	mov	r1, r4
   d43a0:	4a19      	ldr	r2, [pc, #100]	; (d4408 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d43a2:	481a      	ldr	r0, [pc, #104]	; (d440c <_GLOBAL__sub_I_SystemMode+0xfc>)
   d43a4:	f001 f8d8 	bl	d5558 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish NotePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Note");
   d43a8:	4a19      	ldr	r2, [pc, #100]	; (d4410 <_GLOBAL__sub_I_SystemMode+0x100>)
   d43aa:	481a      	ldr	r0, [pc, #104]	; (d4414 <_GLOBAL__sub_I_SystemMode+0x104>)
   d43ac:	462b      	mov	r3, r5
   d43ae:	4621      	mov	r1, r4
}
   d43b0:	b003      	add	sp, #12
   d43b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Adafruit_MQTT_Publish NotePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Note");
   d43b6:	f001 b8cf 	b.w	d5558 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d43ba:	bf00      	nop
   d43bc:	2003e4a8 	.word	0x2003e4a8
   d43c0:	ffff0000 	.word	0xffff0000
   d43c4:	2003e498 	.word	0x2003e498
   d43c8:	2003e518 	.word	0x2003e518
   d43cc:	000d40fd 	.word	0x000d40fd
   d43d0:	2003e4b4 	.word	0x2003e4b4
   d43d4:	000d40c5 	.word	0x000d40c5
   d43d8:	2003e4d0 	.word	0x2003e4d0
   d43dc:	2003e54c 	.word	0x2003e54c
   d43e0:	000d40c9 	.word	0x000d40c9
   d43e4:	000d7a62 	.word	0x000d7a62
   d43e8:	000d7a52 	.word	0x000d7a52
   d43ec:	000d7a47 	.word	0x000d7a47
   d43f0:	000d80b8 	.word	0x000d80b8
   d43f4:	000d40c7 	.word	0x000d40c7
   d43f8:	000d7a83 	.word	0x000d7a83
   d43fc:	2003e53c 	.word	0x2003e53c
   d4400:	000d7a9d 	.word	0x000d7a9d
   d4404:	2003e620 	.word	0x2003e620
   d4408:	000d7ab7 	.word	0x000d7ab7
   d440c:	2003e62c 	.word	0x2003e62c
   d4410:	000d7ad4 	.word	0x000d7ad4
   d4414:	2003e49c 	.word	0x2003e49c

000d4418 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4418:	4770      	bx	lr

000d441a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d441a:	b510      	push	{r4, lr}
  }
   d441c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d441e:	4604      	mov	r4, r0
  }
   d4420:	f002 fd2b 	bl	d6e7a <_ZdlPvj>
   d4424:	4620      	mov	r0, r4
   d4426:	bd10      	pop	{r4, pc}

000d4428 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4428:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d442a:	4604      	mov	r4, r0
   d442c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d442e:	7922      	ldrb	r2, [r4, #4]
   d4430:	68a3      	ldr	r3, [r4, #8]
   d4432:	b132      	cbz	r2, d4442 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4434:	b9a3      	cbnz	r3, d4460 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4436:	490b      	ldr	r1, [pc, #44]	; (d4464 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4438:	b002      	add	sp, #8
   d443a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d443e:	f001 bd29 	b.w	d5e94 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4442:	4a09      	ldr	r2, [pc, #36]	; (d4468 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4444:	7b26      	ldrb	r6, [r4, #12]
   d4446:	4d09      	ldr	r5, [pc, #36]	; (d446c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4448:	4909      	ldr	r1, [pc, #36]	; (d4470 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d444a:	7b64      	ldrb	r4, [r4, #13]
   d444c:	2e01      	cmp	r6, #1
   d444e:	bf18      	it	ne
   d4450:	4629      	movne	r1, r5
   d4452:	e9cd 1400 	strd	r1, r4, [sp]
   d4456:	4907      	ldr	r1, [pc, #28]	; (d4474 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4458:	f7ff fe58 	bl	d410c <_ZN5Print6printfEPKcz>
  }
   d445c:	b002      	add	sp, #8
   d445e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4460:	4a05      	ldr	r2, [pc, #20]	; (d4478 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4462:	e7ef      	b.n	d4444 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4464:	000d7afb 	.word	0x000d7afb
   d4468:	000d79e2 	.word	0x000d79e2
   d446c:	000d7af7 	.word	0x000d7af7
   d4470:	000d7af3 	.word	0x000d7af3
   d4474:	000d7b11 	.word	0x000d7b11
   d4478:	000d7aea 	.word	0x000d7aea

000d447c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d447c:	f04f 33ff 	mov.w	r3, #4294967295
   d4480:	6103      	str	r3, [r0, #16]
{ }
   d4482:	4770      	bx	lr

000d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4484:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4486:	4c0b      	ldr	r4, [pc, #44]	; (d44b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4488:	7821      	ldrb	r1, [r4, #0]
   d448a:	f3bf 8f5b 	dmb	ish
   d448e:	f011 0101 	ands.w	r1, r1, #1
   d4492:	d10b      	bne.n	d44ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4494:	4620      	mov	r0, r4
   d4496:	9101      	str	r1, [sp, #4]
   d4498:	f7ff fe0c 	bl	d40b4 <__cxa_guard_acquire>
   d449c:	9901      	ldr	r1, [sp, #4]
   d449e:	b128      	cbz	r0, d44ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d44a0:	4805      	ldr	r0, [pc, #20]	; (d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d44a2:	f001 fb57 	bl	d5b54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d44a6:	4620      	mov	r0, r4
   d44a8:	f7ff fe09 	bl	d40be <__cxa_guard_release>
        return instance;
    }
   d44ac:	4802      	ldr	r0, [pc, #8]	; (d44b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d44ae:	b002      	add	sp, #8
   d44b0:	bd10      	pop	{r4, pc}
   d44b2:	bf00      	nop
   d44b4:	2003e638 	.word	0x2003e638
   d44b8:	2003e63c 	.word	0x2003e63c

000d44bc <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d44bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d44c0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44c4:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d44c6:	4605      	mov	r5, r0
   d44c8:	460f      	mov	r7, r1
    if (_sck == -1)
   d44ca:	d106      	bne.n	d44da <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d44cc:	f7ff ffda 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d44d0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d44d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d44d6:	f001 bc5d 	b.w	d5d94 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d44da:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d44dc:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d44de:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d44e2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d44e6:	2100      	movs	r1, #0
   d44e8:	b280      	uxth	r0, r0
   d44ea:	f002 fc32 	bl	d6d52 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d44ee:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d44f2:	fa08 f106 	lsl.w	r1, r8, r6
   d44f6:	4039      	ands	r1, r7
   d44f8:	b280      	uxth	r0, r0
   d44fa:	f002 fc2a 	bl	d6d52 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d44fe:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4502:	2101      	movs	r1, #1
   d4504:	b280      	uxth	r0, r0
   d4506:	f002 fc24 	bl	d6d52 <digitalWrite>
        if (digitalRead(_miso))
   d450a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d450e:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4510:	b280      	uxth	r0, r0
        reply <<= 1;
   d4512:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4514:	f002 fc36 	bl	d6d84 <digitalRead>
   d4518:	b108      	cbz	r0, d451e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d451a:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d451e:	3e01      	subs	r6, #1
   d4520:	d2df      	bcs.n	d44e2 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4522:	4620      	mov	r0, r4
   d4524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4528:	b508      	push	{r3, lr}
        instance().endTransaction();
   d452a:	f7ff ffab 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d452e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4532:	f001 bb50 	b.w	d5bd6 <_ZN8SPIClass14endTransactionEv>

000d4536 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4536:	b507      	push	{r0, r1, r2, lr}
   d4538:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d453a:	f7ff ffa3 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d453e:	9901      	ldr	r1, [sp, #4]
    }
   d4540:	b003      	add	sp, #12
   d4542:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4546:	f001 bb5f 	b.w	d5c08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d454c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d454c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d454e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4552:	3301      	adds	r3, #1
{
   d4554:	b085      	sub	sp, #20
   d4556:	4604      	mov	r4, r0
   d4558:	460d      	mov	r5, r1
    if (_cs == -1) {
   d455a:	d11f      	bne.n	d459c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d455c:	7901      	ldrb	r1, [r0, #4]
   d455e:	6800      	ldr	r0, [r0, #0]
   d4560:	f001 fff0 	bl	d6544 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4564:	6820      	ldr	r0, [r4, #0]
   d4566:	6803      	ldr	r3, [r0, #0]
   d4568:	4629      	mov	r1, r5
   d456a:	689b      	ldr	r3, [r3, #8]
   d456c:	4798      	blx	r3
        _wire -> endTransmission();
   d456e:	6820      	ldr	r0, [r4, #0]
   d4570:	f001 fff3 	bl	d655a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4574:	7921      	ldrb	r1, [r4, #4]
   d4576:	6820      	ldr	r0, [r4, #0]
   d4578:	2202      	movs	r2, #2
   d457a:	f001 ffe0 	bl	d653e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d457e:	6820      	ldr	r0, [r4, #0]
   d4580:	6803      	ldr	r3, [r0, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	4798      	blx	r3
   d4586:	4605      	mov	r5, r0
   d4588:	6820      	ldr	r0, [r4, #0]
   d458a:	6803      	ldr	r3, [r0, #0]
   d458c:	695b      	ldr	r3, [r3, #20]
   d458e:	4798      	blx	r3
   d4590:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4594:	b285      	uxth	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4596:	4628      	mov	r0, r5
   d4598:	b005      	add	sp, #20
   d459a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d459c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45a0:	3301      	adds	r3, #1
   d45a2:	d10c      	bne.n	d45be <_ZN15Adafruit_BME2806read16Eh+0x72>
      dataMode_{dataMode}
   d45a4:	4b18      	ldr	r3, [pc, #96]	; (d4608 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d45a6:	9300      	str	r3, [sp, #0]
   d45a8:	2300      	movs	r3, #0
   d45aa:	f88d 3004 	strb.w	r3, [sp, #4]
   d45ae:	4b17      	ldr	r3, [pc, #92]	; (d460c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d45b0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45b2:	4668      	mov	r0, sp
   d45b4:	2301      	movs	r3, #1
   d45b6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d45ba:	f7ff ffbc 	bl	d4536 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d45be:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45c2:	2100      	movs	r1, #0
   d45c4:	b280      	uxth	r0, r0
   d45c6:	f002 fbc4 	bl	d6d52 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45ca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d45ce:	4620      	mov	r0, r4
   d45d0:	f7ff ff74 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d45d4:	2100      	movs	r1, #0
   d45d6:	4620      	mov	r0, r4
   d45d8:	f7ff ff70 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
   d45dc:	2100      	movs	r1, #0
   d45de:	4605      	mov	r5, r0
   d45e0:	4620      	mov	r0, r4
   d45e2:	f7ff ff6b 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
   d45e6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d45ea:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d45ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45f0:	2101      	movs	r1, #1
   d45f2:	b280      	uxth	r0, r0
   d45f4:	f002 fbad 	bl	d6d52 <digitalWrite>
        if (_sck == -1)
   d45f8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d45fc:	3301      	adds	r3, #1
   d45fe:	d1ca      	bne.n	d4596 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d4600:	f7ff ff92 	bl	d4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4604:	e7c7      	b.n	d4596 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d4606:	bf00      	nop
   d4608:	000d7b38 	.word	0x000d7b38
   d460c:	0007a120 	.word	0x0007a120

000d4610 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4610:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4612:	f7ff ff9b 	bl	d454c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4616:	ba40      	rev16	r0, r0
}
   d4618:	b280      	uxth	r0, r0
   d461a:	bd08      	pop	{r3, pc}

000d461c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d461c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d461e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4622:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d4624:	b085      	sub	sp, #20
   d4626:	4604      	mov	r4, r0
   d4628:	460d      	mov	r5, r1
    if (_cs == -1) {
   d462a:	d118      	bne.n	d465e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d462c:	7901      	ldrb	r1, [r0, #4]
   d462e:	6800      	ldr	r0, [r0, #0]
   d4630:	f001 ff88 	bl	d6544 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4634:	6820      	ldr	r0, [r4, #0]
   d4636:	6803      	ldr	r3, [r0, #0]
   d4638:	4629      	mov	r1, r5
   d463a:	689b      	ldr	r3, [r3, #8]
   d463c:	4798      	blx	r3
        _wire -> endTransmission();
   d463e:	6820      	ldr	r0, [r4, #0]
   d4640:	f001 ff8b 	bl	d655a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4644:	7921      	ldrb	r1, [r4, #4]
   d4646:	6820      	ldr	r0, [r4, #0]
   d4648:	2201      	movs	r2, #1
   d464a:	f001 ff78 	bl	d653e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d464e:	6820      	ldr	r0, [r4, #0]
   d4650:	6803      	ldr	r3, [r0, #0]
   d4652:	695b      	ldr	r3, [r3, #20]
   d4654:	4798      	blx	r3
   d4656:	b2c5      	uxtb	r5, r0
}
   d4658:	4628      	mov	r0, r5
   d465a:	b005      	add	sp, #20
   d465c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d465e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4662:	3301      	adds	r3, #1
   d4664:	d10c      	bne.n	d4680 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4666:	4b15      	ldr	r3, [pc, #84]	; (d46bc <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d4668:	9300      	str	r3, [sp, #0]
   d466a:	2300      	movs	r3, #0
   d466c:	f88d 3004 	strb.w	r3, [sp, #4]
   d4670:	4b13      	ldr	r3, [pc, #76]	; (d46c0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4672:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4674:	4668      	mov	r0, sp
   d4676:	2301      	movs	r3, #1
   d4678:	f8ad 300c 	strh.w	r3, [sp, #12]
   d467c:	f7ff ff5b 	bl	d4536 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4680:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4684:	2100      	movs	r1, #0
   d4686:	b280      	uxth	r0, r0
   d4688:	f002 fb63 	bl	d6d52 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d468c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4690:	4620      	mov	r0, r4
   d4692:	f7ff ff13 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4696:	2100      	movs	r1, #0
   d4698:	4620      	mov	r0, r4
   d469a:	f7ff ff0f 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
   d469e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d46a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46a4:	2101      	movs	r1, #1
   d46a6:	b280      	uxth	r0, r0
   d46a8:	f002 fb53 	bl	d6d52 <digitalWrite>
        if (_sck == -1)
   d46ac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46b0:	3301      	adds	r3, #1
   d46b2:	d1d1      	bne.n	d4658 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d46b4:	f7ff ff38 	bl	d4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d46b8:	e7ce      	b.n	d4658 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d46ba:	bf00      	nop
   d46bc:	000d7b38 	.word	0x000d7b38
   d46c0:	0007a120 	.word	0x0007a120

000d46c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d46c4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d46c6:	21f3      	movs	r1, #243	; 0xf3
   d46c8:	f7ff ffa8 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d46cc:	f000 0001 	and.w	r0, r0, #1
   d46d0:	bd08      	pop	{r3, pc}

000d46d2 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d46d2:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d46d4:	2188      	movs	r1, #136	; 0x88
{
   d46d6:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d46d8:	f7ff ff9a 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d46dc:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d46de:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d46e0:	4620      	mov	r0, r4
   d46e2:	f7ff ff95 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d46e6:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d46e8:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d46ea:	4620      	mov	r0, r4
   d46ec:	f7ff ff90 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d46f0:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d46f2:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d46f4:	4620      	mov	r0, r4
   d46f6:	f7ff ff8b 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d46fa:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d46fc:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d46fe:	4620      	mov	r0, r4
   d4700:	f7ff ff86 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d4704:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4706:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d4708:	4620      	mov	r0, r4
   d470a:	f7ff ff81 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d470e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4710:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d4712:	4620      	mov	r0, r4
   d4714:	f7ff ff7c 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d4718:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d471a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d471c:	4620      	mov	r0, r4
   d471e:	f7ff ff77 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d4722:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4724:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d4726:	4620      	mov	r0, r4
   d4728:	f7ff ff72 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d472c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d472e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d4730:	4620      	mov	r0, r4
   d4732:	f7ff ff6d 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d4736:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4738:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d473a:	4620      	mov	r0, r4
   d473c:	f7ff ff68 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
   d4740:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4742:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d4744:	4620      	mov	r0, r4
   d4746:	f7ff ff63 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d474a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d474c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d474e:	4620      	mov	r0, r4
   d4750:	f7ff ff64 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d4754:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4756:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d475a:	4620      	mov	r0, r4
   d475c:	f7ff ff58 	bl	d4610 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4760:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4762:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4764:	4620      	mov	r0, r4
   d4766:	f7ff ff59 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d476a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d476c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4770:	4620      	mov	r0, r4
   d4772:	f7ff ff53 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
   d4776:	21e5      	movs	r1, #229	; 0xe5
   d4778:	4605      	mov	r5, r0
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff ff4e 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
   d4780:	f000 030f 	and.w	r3, r0, #15
   d4784:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d4788:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d478a:	21e6      	movs	r1, #230	; 0xe6
   d478c:	4620      	mov	r0, r4
   d478e:	f7ff ff45 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
   d4792:	21e5      	movs	r1, #229	; 0xe5
   d4794:	4605      	mov	r5, r0
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff ff40 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
   d479c:	1103      	asrs	r3, r0, #4
   d479e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d47a2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d47a4:	21e7      	movs	r1, #231	; 0xe7
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff ff38 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
   d47ac:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d47b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47b4 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d47b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d47b6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d47ba:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d47bc:	4604      	mov	r4, r0
   d47be:	460e      	mov	r6, r1
   d47c0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d47c2:	d112      	bne.n	d47ea <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d47c4:	7901      	ldrb	r1, [r0, #4]
   d47c6:	6800      	ldr	r0, [r0, #0]
   d47c8:	f001 febc 	bl	d6544 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d47cc:	6820      	ldr	r0, [r4, #0]
   d47ce:	6803      	ldr	r3, [r0, #0]
   d47d0:	4631      	mov	r1, r6
   d47d2:	689b      	ldr	r3, [r3, #8]
   d47d4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d47d6:	6820      	ldr	r0, [r4, #0]
   d47d8:	6803      	ldr	r3, [r0, #0]
   d47da:	4629      	mov	r1, r5
   d47dc:	689b      	ldr	r3, [r3, #8]
   d47de:	4798      	blx	r3
        _wire -> endTransmission();
   d47e0:	6820      	ldr	r0, [r4, #0]
   d47e2:	f001 feba 	bl	d655a <_ZN7TwoWire15endTransmissionEv>
}
   d47e6:	b004      	add	sp, #16
   d47e8:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d47ea:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47ee:	3301      	adds	r3, #1
   d47f0:	d10c      	bne.n	d480c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d47f2:	4b14      	ldr	r3, [pc, #80]	; (d4844 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d47f4:	9300      	str	r3, [sp, #0]
   d47f6:	2300      	movs	r3, #0
   d47f8:	f88d 3004 	strb.w	r3, [sp, #4]
   d47fc:	4b12      	ldr	r3, [pc, #72]	; (d4848 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d47fe:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4800:	4668      	mov	r0, sp
   d4802:	2301      	movs	r3, #1
   d4804:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4808:	f7ff fe95 	bl	d4536 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d480c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4810:	2100      	movs	r1, #0
   d4812:	b280      	uxth	r0, r0
   d4814:	f002 fa9d 	bl	d6d52 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4818:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d481c:	4620      	mov	r0, r4
   d481e:	f7ff fe4d 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4822:	4629      	mov	r1, r5
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff fe49 	bl	d44bc <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d482a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d482e:	2101      	movs	r1, #1
   d4830:	b280      	uxth	r0, r0
   d4832:	f002 fa8e 	bl	d6d52 <digitalWrite>
    if (_sck == -1)
   d4836:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d483a:	3301      	adds	r3, #1
   d483c:	d1d3      	bne.n	d47e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d483e:	f7ff fe73 	bl	d4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d4842:	e7d0      	b.n	d47e6 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d4844:	000d7b38 	.word	0x000d7b38
   d4848:	0007a120 	.word	0x0007a120

000d484c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d484e:	00db      	lsls	r3, r3, #3
   d4850:	f002 0207 	and.w	r2, r2, #7
   d4854:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d4858:	4313      	orrs	r3, r2
   d485a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d485e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d4862:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d4866:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d486a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d486e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d4872:	f366 1347 	bfi	r3, r6, #5, #3
   d4876:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d487a:	00ed      	lsls	r5, r5, #3
   d487c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4880:	f007 0707 	and.w	r7, r7, #7
   d4884:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d4888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d488c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d488e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d4890:	431d      	orrs	r5, r3
   d4892:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4896:	f006 0207 	and.w	r2, r6, #7
   d489a:	21f2      	movs	r1, #242	; 0xf2
   d489c:	f7ff ff8a 	bl	d47b4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d48a0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d48a4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d48a8:	f002 0107 	and.w	r1, r2, #7
   d48ac:	009b      	lsls	r3, r3, #2
   d48ae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d48b2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d48b6:	4620      	mov	r0, r4
   d48b8:	21f5      	movs	r1, #245	; 0xf5
   d48ba:	f7ff ff7b 	bl	d47b4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d48be:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d48c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d48c6:	f002 0107 	and.w	r1, r2, #7
   d48ca:	009b      	lsls	r3, r3, #2
   d48cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d48d0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d48d4:	4620      	mov	r0, r4
   d48d6:	21f4      	movs	r1, #244	; 0xf4
}
   d48d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d48dc:	f7ff bf6a 	b.w	d47b4 <_ZN15Adafruit_BME2806write8Ehh>

000d48e0 <_ZN15Adafruit_BME2804initEv>:
{
   d48e0:	b530      	push	{r4, r5, lr}
   d48e2:	4604      	mov	r4, r0
    if (_cs == -1) {
   d48e4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d48e8:	1c42      	adds	r2, r0, #1
{
   d48ea:	b085      	sub	sp, #20
    if (_cs == -1) {
   d48ec:	d119      	bne.n	d4922 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d48ee:	6820      	ldr	r0, [r4, #0]
   d48f0:	f001 fdf6 	bl	d64e0 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d48f4:	21d0      	movs	r1, #208	; 0xd0
   d48f6:	4620      	mov	r0, r4
   d48f8:	f7ff fe90 	bl	d461c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d48fc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d48fe:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4900:	d145      	bne.n	d498e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4902:	4620      	mov	r0, r4
   d4904:	22b6      	movs	r2, #182	; 0xb6
   d4906:	21e0      	movs	r1, #224	; 0xe0
   d4908:	f7ff ff54 	bl	d47b4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d490c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4910:	f001 fb64 	bl	d5fdc <delay>
    while (isReadingCalibration())
   d4914:	4620      	mov	r0, r4
   d4916:	f7ff fed5 	bl	d46c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d491a:	4605      	mov	r5, r0
   d491c:	b328      	cbz	r0, d496a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d491e:	2064      	movs	r0, #100	; 0x64
   d4920:	e7f6      	b.n	d4910 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d4922:	2101      	movs	r1, #1
   d4924:	b280      	uxth	r0, r0
   d4926:	f002 fa14 	bl	d6d52 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d492a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d492e:	2101      	movs	r1, #1
   d4930:	b280      	uxth	r0, r0
   d4932:	f002 f9fd 	bl	d6d30 <pinMode>
        if (_sck == -1) {
   d4936:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d493a:	1c43      	adds	r3, r0, #1
   d493c:	d104      	bne.n	d4948 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d493e:	f7ff fda1 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4942:	f001 f911 	bl	d5b68 <_ZN8SPIClass5beginEv>
    }
   d4946:	e7d5      	b.n	d48f4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d4948:	2101      	movs	r1, #1
   d494a:	b280      	uxth	r0, r0
   d494c:	f002 f9f0 	bl	d6d30 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4950:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4954:	2101      	movs	r1, #1
   d4956:	b280      	uxth	r0, r0
   d4958:	f002 f9ea 	bl	d6d30 <pinMode>
            pinMode(_miso, INPUT);
   d495c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4960:	2100      	movs	r1, #0
   d4962:	b280      	uxth	r0, r0
   d4964:	f002 f9e4 	bl	d6d30 <pinMode>
   d4968:	e7c4      	b.n	d48f4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d496a:	4620      	mov	r0, r4
   d496c:	f7ff feb1 	bl	d46d2 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d4970:	2305      	movs	r3, #5
   d4972:	9300      	str	r3, [sp, #0]
   d4974:	461a      	mov	r2, r3
   d4976:	2103      	movs	r1, #3
   d4978:	4620      	mov	r0, r4
   d497a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d497e:	f7ff ff65 	bl	d484c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d4982:	2064      	movs	r0, #100	; 0x64
   d4984:	f001 fb2a 	bl	d5fdc <delay>
   d4988:	2001      	movs	r0, #1
}
   d498a:	b005      	add	sp, #20
   d498c:	bd30      	pop	{r4, r5, pc}
        return false;
   d498e:	2000      	movs	r0, #0
   d4990:	e7fb      	b.n	d498a <_ZN15Adafruit_BME2804initEv+0xaa>

000d4992 <_ZN15Adafruit_BME2805beginEh>:
{
   d4992:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4994:	7101      	strb	r1, [r0, #4]
{
   d4996:	4604      	mov	r4, r0
	_wire = &Wire;
   d4998:	f002 fa42 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d499c:	6020      	str	r0, [r4, #0]
	return init();
   d499e:	4620      	mov	r0, r4
}
   d49a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   d49a4:	f7ff bf9c 	b.w	d48e0 <_ZN15Adafruit_BME2804initEv>

000d49a8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d49a8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d49aa:	f000 fdeb 	bl	d5584 <HAL_Pin_Map>
   d49ae:	4b01      	ldr	r3, [pc, #4]	; (d49b4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d49b0:	6018      	str	r0, [r3, #0]
}
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	2003e644 	.word	0x2003e644

000d49b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d49ba:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d49bc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d49c0:	2d02      	cmp	r5, #2
   d49c2:	d067      	beq.n	d4a94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d49c4:	2d03      	cmp	r5, #3
   d49c6:	f000 8097 	beq.w	d4af8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d49ca:	2d01      	cmp	r5, #1
   d49cc:	d16a      	bne.n	d4aa4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d49ce:	8905      	ldrh	r5, [r0, #8]
   d49d0:	43d2      	mvns	r2, r2
   d49d2:	442a      	add	r2, r5
   d49d4:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d49d6:	2a00      	cmp	r2, #0
   d49d8:	db5b      	blt.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d49da:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d49de:	4295      	cmp	r5, r2
   d49e0:	dd57      	ble.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d49e2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d49e4:	bfbe      	ittt	lt
   d49e6:	185b      	addlt	r3, r3, r1
   d49e8:	b21b      	sxthlt	r3, r3
    __y = 0;
   d49ea:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d49ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d49f0:	18cd      	adds	r5, r1, r3
   d49f2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d49f4:	bfc4      	itt	gt
   d49f6:	1a43      	subgt	r3, r0, r1
   d49f8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d49fa:	2b00      	cmp	r3, #0
   d49fc:	dd49      	ble.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d49fe:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d4a02:	f8df c11c 	ldr.w	ip, [pc, #284]	; d4b20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d4a06:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4a0a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d4a0e:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4a10:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d4a14:	d01a      	beq.n	d4a4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4a16:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4a1a:	4e3f      	ldr	r6, [pc, #252]	; (d4b18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d4a1c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4a1e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4a20:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4a22:	bf3f      	itttt	cc
   d4a24:	eba5 0e03 	subcc.w	lr, r5, r3
   d4a28:	26ff      	movcc	r6, #255	; 0xff
   d4a2a:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4a2e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d4a30:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d4a34:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4a36:	bf0c      	ite	eq
   d4a38:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d4a3a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4a3c:	42ab      	cmp	r3, r5
   d4a3e:	f80c 6002 	strb.w	r6, [ip, r2]
   d4a42:	d326      	bcc.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d4a44:	3908      	subs	r1, #8
   d4a46:	440b      	add	r3, r1
   d4a48:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d4a4a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4a4c:	2b07      	cmp	r3, #7
   d4a4e:	d917      	bls.n	d4a80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4a50:	2c01      	cmp	r4, #1
   d4a52:	bf0c      	ite	eq
   d4a54:	25ff      	moveq	r5, #255	; 0xff
   d4a56:	2500      	movne	r5, #0
   d4a58:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4a5c:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4a5e:	3a08      	subs	r2, #8
   d4a60:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4a62:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4a64:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4a68:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4a6c:	d8f7      	bhi.n	d4a5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d4a6e:	f1a3 0208 	sub.w	r2, r3, #8
   d4a72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4a76:	3201      	adds	r2, #1
   d4a78:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4a7c:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4a80:	b13b      	cbz	r3, d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a82:	4a26      	ldr	r2, [pc, #152]	; (d4b1c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d4a84:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4a86:	7803      	ldrb	r3, [r0, #0]
   d4a88:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4a8a:	bf0c      	ite	eq
   d4a8c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4a8e:	4393      	bicne	r3, r2
   d4a90:	7003      	strb	r3, [r0, #0]
}
   d4a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4a94:	8945      	ldrh	r5, [r0, #10]
   d4a96:	43d2      	mvns	r2, r2
   d4a98:	442a      	add	r2, r5
      x -= (w-1);
   d4a9a:	18cd      	adds	r5, r1, r3
   d4a9c:	8901      	ldrh	r1, [r0, #8]
   d4a9e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4aa0:	b212      	sxth	r2, r2
      x -= (w-1);
   d4aa2:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d4aa4:	2a00      	cmp	r2, #0
   d4aa6:	dbf4      	blt.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4aa8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4aac:	4295      	cmp	r5, r2
   d4aae:	ddf0      	ble.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4ab0:	2900      	cmp	r1, #0
    w += x;
   d4ab2:	bfbe      	ittt	lt
   d4ab4:	185b      	addlt	r3, r3, r1
   d4ab6:	b21b      	sxthlt	r3, r3
    x = 0;
   d4ab8:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d4aba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4abe:	18ce      	adds	r6, r1, r3
   d4ac0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4ac2:	bfc4      	itt	gt
   d4ac4:	1a6b      	subgt	r3, r5, r1
   d4ac6:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4ac8:	2b00      	cmp	r3, #0
   d4aca:	dde2      	ble.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4acc:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d4ace:	2580      	movs	r5, #128	; 0x80
   d4ad0:	fb10 1105 	smlabb	r1, r0, r5, r1
   d4ad4:	4812      	ldr	r0, [pc, #72]	; (d4b20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4ad6:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4ad8:	f002 0107 	and.w	r1, r2, #7
   d4adc:	2201      	movs	r2, #1
   d4ade:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4ae0:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4ae2:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d4ae4:	4403      	add	r3, r0
   d4ae6:	d10c      	bne.n	d4b02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4ae8:	4283      	cmp	r3, r0
   d4aea:	d0d2      	beq.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4aec:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4af0:	4314      	orrs	r4, r2
   d4af2:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4af6:	e7f7      	b.n	d4ae8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4af8:	18cd      	adds	r5, r1, r3
   d4afa:	8941      	ldrh	r1, [r0, #10]
   d4afc:	1b49      	subs	r1, r1, r5
   d4afe:	b209      	sxth	r1, r1
      break;
   d4b00:	e769      	b.n	d49d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d4b02:	43d2      	mvns	r2, r2
   d4b04:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d4b06:	4283      	cmp	r3, r0
   d4b08:	d0c3      	beq.n	d4a92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4b0a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4b0e:	4014      	ands	r4, r2
   d4b10:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4b14:	e7f7      	b.n	d4b06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4b16:	bf00      	nop
   d4b18:	2003e024 	.word	0x2003e024
   d4b1c:	2003e01c 	.word	0x2003e01c
   d4b20:	2003e02c 	.word	0x2003e02c

000d4b24 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d4b26:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4b28:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4b2c:	2d02      	cmp	r5, #2
   d4b2e:	d034      	beq.n	d4b9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d4b30:	2d03      	cmp	r5, #3
   d4b32:	f000 8099 	beq.w	d4c68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d4b36:	2d01      	cmp	r5, #1
   d4b38:	d137      	bne.n	d4baa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d4b3a:	18d5      	adds	r5, r2, r3
   d4b3c:	8902      	ldrh	r2, [r0, #8]
   d4b3e:	1b52      	subs	r2, r2, r5
   d4b40:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d4b42:	2900      	cmp	r1, #0
   d4b44:	f2c0 808f 	blt.w	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4b48:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4b4c:	428d      	cmp	r5, r1
   d4b4e:	f340 808a 	ble.w	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d4b52:	2a00      	cmp	r2, #0
    w += x;
   d4b54:	bfbe      	ittt	lt
   d4b56:	189b      	addlt	r3, r3, r2
   d4b58:	b21b      	sxthlt	r3, r3
    x = 0;
   d4b5a:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d4b5c:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4b60:	18d6      	adds	r6, r2, r3
   d4b62:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4b64:	bfc4      	itt	gt
   d4b66:	1aab      	subgt	r3, r5, r2
   d4b68:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4b6a:	2b00      	cmp	r3, #0
   d4b6c:	dd7b      	ble.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4b6e:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d4b70:	2580      	movs	r5, #128	; 0x80
   d4b72:	fb10 2205 	smlabb	r2, r0, r5, r2
   d4b76:	4844      	ldr	r0, [pc, #272]	; (d4c88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d4b78:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d4b7a:	f001 0207 	and.w	r2, r1, #7
   d4b7e:	2101      	movs	r1, #1
   d4b80:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d4b82:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4b84:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d4b86:	4403      	add	r3, r0
   d4b88:	d173      	bne.n	d4c72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d4b8a:	4298      	cmp	r0, r3
   d4b8c:	d06b      	beq.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4b8e:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4b92:	430c      	orrs	r4, r1
   d4b94:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4b98:	e7f7      	b.n	d4b8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d4b9a:	8905      	ldrh	r5, [r0, #8]
   d4b9c:	43c9      	mvns	r1, r1
   d4b9e:	4429      	add	r1, r5
      y -= (h-1);
   d4ba0:	18d5      	adds	r5, r2, r3
   d4ba2:	8942      	ldrh	r2, [r0, #10]
   d4ba4:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4ba6:	b209      	sxth	r1, r1
      y -= (h-1);
   d4ba8:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d4baa:	2900      	cmp	r1, #0
   d4bac:	db5b      	blt.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4bae:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4bb2:	428d      	cmp	r5, r1
   d4bb4:	dd57      	ble.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4bb6:	2a00      	cmp	r2, #0
    __h += __y;
   d4bb8:	bfbe      	ittt	lt
   d4bba:	189b      	addlt	r3, r3, r2
   d4bbc:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4bbe:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4bc0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4bc4:	18d5      	adds	r5, r2, r3
   d4bc6:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4bc8:	bfc4      	itt	gt
   d4bca:	1a83      	subgt	r3, r0, r2
   d4bcc:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d4bce:	2b00      	cmp	r3, #0
   d4bd0:	dd49      	ble.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4bd2:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4bd6:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d4c88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d4bda:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d4bde:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4be2:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4be4:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4be8:	d01a      	beq.n	d4c20 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d4bea:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d4bee:	4e27      	ldr	r6, [pc, #156]	; (d4c8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4bf0:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4bf2:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4bf4:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4bf6:	bf3f      	itttt	cc
   d4bf8:	eba5 0e03 	subcc.w	lr, r5, r3
   d4bfc:	26ff      	movcc	r6, #255	; 0xff
   d4bfe:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4c02:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4c04:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4c08:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4c0a:	bf0c      	ite	eq
   d4c0c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d4c0e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4c10:	42ab      	cmp	r3, r5
   d4c12:	f80c 6001 	strb.w	r6, [ip, r1]
   d4c16:	d326      	bcc.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4c18:	3a08      	subs	r2, #8
   d4c1a:	4413      	add	r3, r2
   d4c1c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d4c1e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d4c20:	2b07      	cmp	r3, #7
   d4c22:	d917      	bls.n	d4c54 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4c24:	2c01      	cmp	r4, #1
   d4c26:	bf0c      	ite	eq
   d4c28:	25ff      	moveq	r5, #255	; 0xff
   d4c2a:	2500      	movne	r5, #0
   d4c2c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4c30:	461a      	mov	r2, r3
      h -= 8;
   d4c32:	3a08      	subs	r2, #8
   d4c34:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4c36:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4c38:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4c3c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4c40:	d8f7      	bhi.n	d4c32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d4c42:	f1a3 0208 	sub.w	r2, r3, #8
   d4c46:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4c4a:	3201      	adds	r2, #1
   d4c4c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4c50:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d4c54:	b13b      	cbz	r3, d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d4c56:	4a0e      	ldr	r2, [pc, #56]	; (d4c90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d4c58:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4c5a:	7803      	ldrb	r3, [r0, #0]
   d4c5c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4c5e:	bf0c      	ite	eq
   d4c60:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d4c62:	4393      	bicne	r3, r2
   d4c64:	7003      	strb	r3, [r0, #0]
}
   d4c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4c68:	8945      	ldrh	r5, [r0, #10]
   d4c6a:	43c9      	mvns	r1, r1
   d4c6c:	4429      	add	r1, r5
   d4c6e:	b209      	sxth	r1, r1
      break;
   d4c70:	e767      	b.n	d4b42 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d4c72:	43c9      	mvns	r1, r1
   d4c74:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d4c76:	4298      	cmp	r0, r3
   d4c78:	d0f5      	beq.n	d4c66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4c7a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4c7e:	400c      	ands	r4, r1
   d4c80:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4c84:	e7f7      	b.n	d4c76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4c86:	bf00      	nop
   d4c88:	2003e02c 	.word	0x2003e02c
   d4c8c:	2003e024 	.word	0x2003e024
   d4c90:	2003e01c 	.word	0x2003e01c

000d4c94 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4c96:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c98:	4606      	mov	r6, r0
   d4c9a:	4614      	mov	r4, r2
   d4c9c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4c9e:	db2d      	blt.n	d4cfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4ca0:	f000 fbb9 	bl	d5416 <_ZN12Adafruit_GFX5widthEv>
   d4ca4:	42a8      	cmp	r0, r5
   d4ca6:	dd29      	ble.n	d4cfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4ca8:	2c00      	cmp	r4, #0
   d4caa:	db27      	blt.n	d4cfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4cac:	4630      	mov	r0, r6
   d4cae:	f000 fbb5 	bl	d541c <_ZN12Adafruit_GFX6heightEv>
   d4cb2:	42a0      	cmp	r0, r4
   d4cb4:	dd22      	ble.n	d4cfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4cb6:	4630      	mov	r0, r6
   d4cb8:	f000 fb9d 	bl	d53f6 <_ZN12Adafruit_GFX11getRotationEv>
   d4cbc:	2802      	cmp	r0, #2
   d4cbe:	d01e      	beq.n	d4cfe <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4cc0:	2803      	cmp	r0, #3
   d4cc2:	d025      	beq.n	d4d10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4cc4:	2801      	cmp	r0, #1
   d4cc6:	d104      	bne.n	d4cd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4cc8:	8932      	ldrh	r2, [r6, #8]
   d4cca:	43e4      	mvns	r4, r4
   d4ccc:	4422      	add	r2, r4
    break;
   d4cce:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4cd0:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4cd2:	2c00      	cmp	r4, #0
   d4cd4:	4621      	mov	r1, r4
   d4cd6:	bfb8      	it	lt
   d4cd8:	1de1      	addlt	r1, r4, #7
   d4cda:	10c9      	asrs	r1, r1, #3
   d4cdc:	2380      	movs	r3, #128	; 0x80
   d4cde:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4ce2:	490e      	ldr	r1, [pc, #56]	; (d4d1c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4ce4:	2201      	movs	r2, #1
   d4ce6:	f004 0407 	and.w	r4, r4, #7
   d4cea:	574b      	ldrsb	r3, [r1, r5]
   d4cec:	fa02 f404 	lsl.w	r4, r2, r4
   d4cf0:	b264      	sxtb	r4, r4
   d4cf2:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4cf4:	bf0c      	ite	eq
   d4cf6:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4cf8:	43a3      	bicne	r3, r4
   d4cfa:	554b      	strb	r3, [r1, r5]
}
   d4cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d4cfe:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4d00:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4d02:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4d04:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4d06:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4d08:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d4d0a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d4d0c:	b224      	sxth	r4, r4
    break;
   d4d0e:	e7e0      	b.n	d4cd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4d10:	8973      	ldrh	r3, [r6, #10]
   d4d12:	3b01      	subs	r3, #1
   d4d14:	1b5b      	subs	r3, r3, r5
    break;
   d4d16:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4d18:	b21c      	sxth	r4, r3
    break;
   d4d1a:	e7da      	b.n	d4cd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d4d1c:	2003e02c 	.word	0x2003e02c

000d4d20 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4d20:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4d22:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4d24:	4604      	mov	r4, r0
   d4d26:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4d28:	2180      	movs	r1, #128	; 0x80
   d4d2a:	f000 fa8b 	bl	d5244 <_ZN12Adafruit_GFXC1Ess>
   d4d2e:	4b06      	ldr	r3, [pc, #24]	; (d4d48 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4d30:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4d32:	23ff      	movs	r3, #255	; 0xff
   d4d34:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4d38:	7763      	strb	r3, [r4, #29]
   d4d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4d3e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d4d40:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd38      	pop	{r3, r4, r5, pc}
   d4d48:	000d7b4c 	.word	0x000d7b4c

000d4d4c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4d4c:	4802      	ldr	r0, [pc, #8]	; (d4d58 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4d52:	2100      	movs	r1, #0
   d4d54:	f002 bde6 	b.w	d7924 <memset>
   d4d58:	2003e02c 	.word	0x2003e02c

000d4d5c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4d5c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4d5e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d4d62:	b143      	cbz	r3, d4d76 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d4d64:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   d4d66:	f7ff fb8d 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d6a:	9901      	ldr	r1, [sp, #4]
}
   d4d6c:	b003      	add	sp, #12
   d4d6e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4d72:	f001 b80f 	b.w	d5d94 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4d76:	460b      	mov	r3, r1
   d4d78:	7f81      	ldrb	r1, [r0, #30]
   d4d7a:	7f40      	ldrb	r0, [r0, #29]
   d4d7c:	2201      	movs	r2, #1
}
   d4d7e:	b003      	add	sp, #12
   d4d80:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4d84:	f002 b811 	b.w	d6daa <shiftOut>

000d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4d88:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4d8a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4d8e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4d90:	4604      	mov	r4, r0
   d4d92:	460d      	mov	r5, r1
  if (sid != -1)
   d4d94:	d01d      	beq.n	d4dd2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d4d96:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4d9a:	2101      	movs	r1, #1
   d4d9c:	b280      	uxth	r0, r0
   d4d9e:	f001 ffd8 	bl	d6d52 <digitalWrite>
    digitalWrite(dc, LOW);
   d4da2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4da6:	2100      	movs	r1, #0
   d4da8:	b280      	uxth	r0, r0
   d4daa:	f001 ffd2 	bl	d6d52 <digitalWrite>
    digitalWrite(cs, LOW);
   d4dae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4db2:	2100      	movs	r1, #0
   d4db4:	b280      	uxth	r0, r0
   d4db6:	f001 ffcc 	bl	d6d52 <digitalWrite>
    fastSPIwrite(c);
   d4dba:	4629      	mov	r1, r5
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	f7ff ffcd 	bl	d4d5c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d4dc2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4dc6:	2101      	movs	r1, #1
}
   d4dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4dcc:	b280      	uxth	r0, r0
   d4dce:	f001 bfc0 	b.w	d6d52 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d4dd2:	f002 f825 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4dd6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4dda:	f001 fbb7 	bl	d654c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4dde:	f002 f81f 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4de2:	6803      	ldr	r3, [r0, #0]
   d4de4:	2100      	movs	r1, #0
   d4de6:	689b      	ldr	r3, [r3, #8]
   d4de8:	4798      	blx	r3
    Wire.write(c);
   d4dea:	f002 f819 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4dee:	6803      	ldr	r3, [r0, #0]
   d4df0:	4629      	mov	r1, r5
   d4df2:	689b      	ldr	r3, [r3, #8]
   d4df4:	4798      	blx	r3
    Wire.endTransmission();
   d4df6:	f002 f813 	bl	d6e20 <_Z19__fetch_global_Wirev>
}
   d4dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d4dfe:	f001 bbac 	b.w	d655a <_ZN7TwoWire15endTransmissionEv>
	...

000d4e04 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d4e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4e06:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d4e08:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4e0a:	f7ff ffbd 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4e0e:	2100      	movs	r1, #0
   d4e10:	4620      	mov	r0, r4
   d4e12:	f7ff ffb9 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4e16:	217f      	movs	r1, #127	; 0x7f
   d4e18:	4620      	mov	r0, r4
   d4e1a:	f7ff ffb5 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d4e1e:	2122      	movs	r1, #34	; 0x22
   d4e20:	4620      	mov	r0, r4
   d4e22:	f7ff ffb1 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4e26:	2100      	movs	r1, #0
   d4e28:	4620      	mov	r0, r4
   d4e2a:	f7ff ffad 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4e2e:	2107      	movs	r1, #7
   d4e30:	4620      	mov	r0, r4
   d4e32:	f7ff ffa9 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d4e36:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4e3a:	4f29      	ldr	r7, [pc, #164]	; (d4ee0 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d4e3c:	3301      	adds	r3, #1
   d4e3e:	d02a      	beq.n	d4e96 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d4e40:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e44:	2101      	movs	r1, #1
   d4e46:	b280      	uxth	r0, r0
   d4e48:	f001 ff83 	bl	d6d52 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4e4c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e50:	2101      	movs	r1, #1
   d4e52:	b280      	uxth	r0, r0
   d4e54:	f001 ff7d 	bl	d6d52 <digitalWrite>
    digitalWrite(cs, LOW);
   d4e58:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e5c:	2100      	movs	r1, #0
   d4e5e:	b280      	uxth	r0, r0
   d4e60:	f001 ff77 	bl	d6d52 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4e64:	2001      	movs	r0, #1
   d4e66:	f000 fbc5 	bl	d55f4 <HAL_Delay_Microseconds>
   d4e6a:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4e6e:	3d01      	subs	r5, #1
   d4e70:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4e74:	4620      	mov	r0, r4
   d4e76:	b2ad      	uxth	r5, r5
   d4e78:	f7ff ff70 	bl	d4d5c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4e7c:	2d00      	cmp	r5, #0
   d4e7e:	d1f6      	bne.n	d4e6e <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4e80:	2001      	movs	r0, #1
   d4e82:	f000 fbb7 	bl	d55f4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d4e86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e8a:	2101      	movs	r1, #1
}
   d4e8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4e90:	b280      	uxth	r0, r0
   d4e92:	f001 bf5e 	b.w	d6d52 <digitalWrite>
   d4e96:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4e98:	f001 ffc2 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4e9c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4ea0:	f001 fb54 	bl	d654c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4ea4:	f001 ffbc 	bl	d6e20 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4ea8:	6803      	ldr	r3, [r0, #0]
   d4eaa:	f1a6 0510 	sub.w	r5, r6, #16
   d4eae:	689b      	ldr	r3, [r3, #8]
   d4eb0:	2140      	movs	r1, #64	; 0x40
   d4eb2:	b2ad      	uxth	r5, r5
   d4eb4:	4798      	blx	r3
		Wire.write(buffer[i]);
   d4eb6:	f001 ffb3 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4eba:	6803      	ldr	r3, [r0, #0]
   d4ebc:	5d79      	ldrb	r1, [r7, r5]
   d4ebe:	689b      	ldr	r3, [r3, #8]
		i++;
   d4ec0:	3501      	adds	r5, #1
   d4ec2:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d4ec4:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d4ec6:	42ae      	cmp	r6, r5
   d4ec8:	d1f5      	bne.n	d4eb6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4eca:	f001 ffa9 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d4ece:	f001 fb44 	bl	d655a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4ed2:	f106 0310 	add.w	r3, r6, #16
   d4ed6:	b29e      	uxth	r6, r3
   d4ed8:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4edc:	d1dc      	bne.n	d4e98 <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ee0:	2003e02c 	.word	0x2003e02c

000d4ee4 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4ee4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d4ee6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d4eea:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d4eec:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4eee:	4604      	mov	r4, r0
   d4ef0:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d4ef2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d4ef4:	f000 80c9 	beq.w	d508a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d4ef8:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4efc:	2101      	movs	r1, #1
   d4efe:	b280      	uxth	r0, r0
   d4f00:	f001 ff16 	bl	d6d30 <pinMode>
    pinMode(cs, OUTPUT);
   d4f04:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f08:	2101      	movs	r1, #1
   d4f0a:	b280      	uxth	r0, r0
   d4f0c:	f001 ff10 	bl	d6d30 <pinMode>
    if (!hwSPI){
   d4f10:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4f14:	2b00      	cmp	r3, #0
   d4f16:	f000 80a6 	beq.w	d5066 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d4f1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f1e:	2101      	movs	r1, #1
   d4f20:	b280      	uxth	r0, r0
   d4f22:	f001 ff16 	bl	d6d52 <digitalWrite>
        instance().setBitOrder(order);
   d4f26:	f7ff faad 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f2a:	2101      	movs	r1, #1
   d4f2c:	f000 fe2d 	bl	d5b8a <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d4f30:	f7ff faa8 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f34:	2110      	movs	r1, #16
   d4f36:	f000 ff07 	bl	d5d48 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d4f3a:	f7ff faa3 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f3e:	2100      	movs	r1, #0
   d4f40:	f000 fe36 	bl	d5bb0 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d4f44:	f7ff fa9e 	bl	d4484 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4f48:	f000 fe0e 	bl	d5b68 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d4f4c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f50:	2101      	movs	r1, #1
   d4f52:	b280      	uxth	r0, r0
   d4f54:	f001 feec 	bl	d6d30 <pinMode>
  digitalWrite(rst, HIGH);
   d4f58:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f5c:	2101      	movs	r1, #1
   d4f5e:	b280      	uxth	r0, r0
   d4f60:	f001 fef7 	bl	d6d52 <digitalWrite>
  delay(1);
   d4f64:	2001      	movs	r0, #1
   d4f66:	f001 f839 	bl	d5fdc <delay>
  digitalWrite(rst, LOW);
   d4f6a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f6e:	2100      	movs	r1, #0
   d4f70:	b280      	uxth	r0, r0
   d4f72:	f001 feee 	bl	d6d52 <digitalWrite>
  delay(10);
   d4f76:	200a      	movs	r0, #10
   d4f78:	f001 f830 	bl	d5fdc <delay>
  digitalWrite(rst, HIGH);
   d4f7c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4f80:	2101      	movs	r1, #1
   d4f82:	b280      	uxth	r0, r0
   d4f84:	f001 fee5 	bl	d6d52 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4f88:	4620      	mov	r0, r4
   d4f8a:	21ae      	movs	r1, #174	; 0xae
   d4f8c:	f7ff fefc 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4f90:	4620      	mov	r0, r4
   d4f92:	21d5      	movs	r1, #213	; 0xd5
   d4f94:	f7ff fef8 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4f98:	4620      	mov	r0, r4
   d4f9a:	2180      	movs	r1, #128	; 0x80
   d4f9c:	f7ff fef4 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4fa0:	4620      	mov	r0, r4
   d4fa2:	21a8      	movs	r1, #168	; 0xa8
   d4fa4:	f7ff fef0 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4fa8:	4620      	mov	r0, r4
   d4faa:	213f      	movs	r1, #63	; 0x3f
   d4fac:	f7ff feec 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	21d3      	movs	r1, #211	; 0xd3
   d4fb4:	f7ff fee8 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4fb8:	4620      	mov	r0, r4
   d4fba:	2100      	movs	r1, #0
   d4fbc:	f7ff fee4 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	2140      	movs	r1, #64	; 0x40
   d4fc4:	f7ff fee0 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4fc8:	218d      	movs	r1, #141	; 0x8d
   d4fca:	4620      	mov	r0, r4
   d4fcc:	f7ff fedc 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4fd0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4fd2:	bf0c      	ite	eq
   d4fd4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d4fd6:	2114      	movne	r1, #20
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff fed5 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4fde:	4620      	mov	r0, r4
   d4fe0:	2120      	movs	r1, #32
   d4fe2:	f7ff fed1 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	2100      	movs	r1, #0
   d4fea:	f7ff fecd 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4fee:	4620      	mov	r0, r4
   d4ff0:	21a1      	movs	r1, #161	; 0xa1
   d4ff2:	f7ff fec9 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	21c8      	movs	r1, #200	; 0xc8
   d4ffa:	f7ff fec5 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4ffe:	4620      	mov	r0, r4
   d5000:	21da      	movs	r1, #218	; 0xda
   d5002:	f7ff fec1 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5006:	4620      	mov	r0, r4
   d5008:	2112      	movs	r1, #18
   d500a:	f7ff febd 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d500e:	2181      	movs	r1, #129	; 0x81
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff feb9 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5016:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5018:	bf0c      	ite	eq
   d501a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d501c:	21cf      	movne	r1, #207	; 0xcf
   d501e:	4620      	mov	r0, r4
   d5020:	f7ff feb2 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5024:	21d9      	movs	r1, #217	; 0xd9
   d5026:	4620      	mov	r0, r4
   d5028:	f7ff feae 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d502c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d502e:	bf0c      	ite	eq
   d5030:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d5032:	21f1      	movne	r1, #241	; 0xf1
   d5034:	4620      	mov	r0, r4
   d5036:	f7ff fea7 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d503a:	4620      	mov	r0, r4
   d503c:	21db      	movs	r1, #219	; 0xdb
   d503e:	f7ff fea3 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5042:	4620      	mov	r0, r4
   d5044:	2140      	movs	r1, #64	; 0x40
   d5046:	f7ff fe9f 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d504a:	4620      	mov	r0, r4
   d504c:	21a4      	movs	r1, #164	; 0xa4
   d504e:	f7ff fe9b 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5052:	4620      	mov	r0, r4
   d5054:	21a6      	movs	r1, #166	; 0xa6
   d5056:	f7ff fe97 	bl	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d505a:	4620      	mov	r0, r4
   d505c:	21af      	movs	r1, #175	; 0xaf
}
   d505e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5062:	f7ff be91 	b.w	d4d88 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d5066:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d506a:	2101      	movs	r1, #1
   d506c:	b280      	uxth	r0, r0
   d506e:	f001 fe5f 	bl	d6d30 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5072:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d5076:	2101      	movs	r1, #1
   d5078:	b280      	uxth	r0, r0
   d507a:	f001 fe59 	bl	d6d30 <pinMode>
    if (hwSPI){
   d507e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5082:	2b00      	cmp	r3, #0
   d5084:	f43f af62 	beq.w	d4f4c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d5088:	e747      	b.n	d4f1a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d508a:	f001 fec9 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d508e:	f001 fa27 	bl	d64e0 <_ZN7TwoWire5beginEv>
   d5092:	e75b      	b.n	d4f4c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d5094 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5098:	b085      	sub	sp, #20
   d509a:	461f      	mov	r7, r3
   d509c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d50a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d50a4:	eba8 0902 	sub.w	r9, r8, r2
   d50a8:	eba7 0a01 	sub.w	sl, r7, r1
   d50ac:	f1b9 0f00 	cmp.w	r9, #0
   d50b0:	bfb8      	it	lt
   d50b2:	f1c9 0900 	rsblt	r9, r9, #0
   d50b6:	f1ba 0f00 	cmp.w	sl, #0
   d50ba:	bfb8      	it	lt
   d50bc:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d50c0:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d50c2:	4683      	mov	fp, r0
   d50c4:	460c      	mov	r4, r1
   d50c6:	4615      	mov	r5, r2
  if (steep) {
   d50c8:	dd04      	ble.n	d50d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d50ca:	463a      	mov	r2, r7
    swap(x0, y0);
   d50cc:	462c      	mov	r4, r5
    swap(x1, y1);
   d50ce:	4647      	mov	r7, r8
    swap(x0, y0);
   d50d0:	460d      	mov	r5, r1
    swap(x1, y1);
   d50d2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d50d4:	42bc      	cmp	r4, r7
   d50d6:	dd05      	ble.n	d50e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d50d8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d50da:	4645      	mov	r5, r8
   d50dc:	4690      	mov	r8, r2
  if (x0 > x1) {
   d50de:	4622      	mov	r2, r4
   d50e0:	463c      	mov	r4, r7
   d50e2:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d50e4:	1b3e      	subs	r6, r7, r4
   d50e6:	b2b2      	uxth	r2, r6
   d50e8:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d50ea:	eba8 0205 	sub.w	r2, r8, r5
   d50ee:	2a00      	cmp	r2, #0
   d50f0:	bfb8      	it	lt
   d50f2:	4252      	neglt	r2, r2
   d50f4:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d50f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d50fa:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d50fe:	4545      	cmp	r5, r8
   d5100:	bfb4      	ite	lt
   d5102:	2201      	movlt	r2, #1
   d5104:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d5108:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d510a:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d510c:	42bc      	cmp	r4, r7
   d510e:	dc1c      	bgt.n	d514a <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d5110:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d5114:	9303      	str	r3, [sp, #12]
    if (steep) {
   d5116:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d5118:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d511c:	bfc7      	ittee	gt
   d511e:	4629      	movgt	r1, r5
   d5120:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d5122:	462a      	movle	r2, r5
   d5124:	4621      	movle	r1, r4
   d5126:	4658      	mov	r0, fp
   d5128:	47c0      	blx	r8
    }
    err -= dy;
   d512a:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d512c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d512e:	1ab6      	subs	r6, r6, r2
   d5130:	b2b1      	uxth	r1, r6
   d5132:	b236      	sxth	r6, r6
    if (err < 0) {
   d5134:	2e00      	cmp	r6, #0
   d5136:	da05      	bge.n	d5144 <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d5138:	9a02      	ldr	r2, [sp, #8]
   d513a:	4415      	add	r5, r2
      err += dx;
   d513c:	9a00      	ldr	r2, [sp, #0]
   d513e:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d5140:	b22d      	sxth	r5, r5
      err += dx;
   d5142:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d5144:	3401      	adds	r4, #1
   d5146:	b224      	sxth	r4, r4
   d5148:	e7e0      	b.n	d510c <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d514a:	b005      	add	sp, #20
   d514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5150 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5150:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5154:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5158:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d515a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d515e:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d5162:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5164:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d5166:	4616      	mov	r6, r2
   d5168:	468a      	mov	sl, r1
   d516a:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d516c:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d516e:	6823      	ldr	r3, [r4, #0]
   d5170:	f8cd 8000 	str.w	r8, [sp]
   d5174:	f109 32ff 	add.w	r2, r9, #4294967295
   d5178:	4432      	add	r2, r6
   d517a:	69df      	ldr	r7, [r3, #28]
   d517c:	4651      	mov	r1, sl
   d517e:	462b      	mov	r3, r5
   d5180:	4620      	mov	r0, r4
   d5182:	b212      	sxth	r2, r2
   d5184:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5186:	6823      	ldr	r3, [r4, #0]
   d5188:	f8cd 8000 	str.w	r8, [sp]
   d518c:	699f      	ldr	r7, [r3, #24]
   d518e:	4632      	mov	r2, r6
   d5190:	464b      	mov	r3, r9
   d5192:	4651      	mov	r1, sl
   d5194:	4620      	mov	r0, r4
   d5196:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5198:	1e6b      	subs	r3, r5, #1
   d519a:	eb03 010a 	add.w	r1, r3, sl
   d519e:	6823      	ldr	r3, [r4, #0]
   d51a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d51a4:	699d      	ldr	r5, [r3, #24]
   d51a6:	4632      	mov	r2, r6
   d51a8:	464b      	mov	r3, r9
   d51aa:	b209      	sxth	r1, r1
   d51ac:	4620      	mov	r0, r4
   d51ae:	46ac      	mov	ip, r5
}
   d51b0:	b002      	add	sp, #8
   d51b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d51b6:	4760      	bx	ip

000d51b8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d51b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d51ba:	3b01      	subs	r3, #1
   d51bc:	4413      	add	r3, r2
   d51be:	6804      	ldr	r4, [r0, #0]
   d51c0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d51c4:	9501      	str	r5, [sp, #4]
   d51c6:	b21b      	sxth	r3, r3
   d51c8:	9300      	str	r3, [sp, #0]
   d51ca:	6964      	ldr	r4, [r4, #20]
   d51cc:	460b      	mov	r3, r1
   d51ce:	47a0      	blx	r4
}
   d51d0:	b003      	add	sp, #12
   d51d2:	bd30      	pop	{r4, r5, pc}

000d51d4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d51d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d51d6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d51da:	6804      	ldr	r4, [r0, #0]
   d51dc:	e9cd 2500 	strd	r2, r5, [sp]
   d51e0:	3b01      	subs	r3, #1
   d51e2:	440b      	add	r3, r1
   d51e4:	6964      	ldr	r4, [r4, #20]
   d51e6:	b21b      	sxth	r3, r3
   d51e8:	47a0      	blx	r4
}
   d51ea:	b003      	add	sp, #12
   d51ec:	bd30      	pop	{r4, r5, pc}

000d51ee <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d51ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d51f2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d51f6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d51fa:	4605      	mov	r5, r0
   d51fc:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d51fe:	460c      	mov	r4, r1
   d5200:	18ce      	adds	r6, r1, r3
   d5202:	42b4      	cmp	r4, r6
   d5204:	da0b      	bge.n	d521e <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d5206:	682b      	ldr	r3, [r5, #0]
   d5208:	f8cd 8000 	str.w	r8, [sp]
   d520c:	699f      	ldr	r7, [r3, #24]
   d520e:	4621      	mov	r1, r4
   d5210:	464b      	mov	r3, r9
   d5212:	4652      	mov	r2, sl
   d5214:	4628      	mov	r0, r5
   d5216:	3401      	adds	r4, #1
   d5218:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d521a:	b224      	sxth	r4, r4
   d521c:	e7f1      	b.n	d5202 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d521e:	b002      	add	sp, #8
   d5220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5224 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5224:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5226:	6802      	ldr	r2, [r0, #0]
   d5228:	9101      	str	r1, [sp, #4]
   d522a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d522e:	9100      	str	r1, [sp, #0]
   d5230:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d5232:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5236:	2200      	movs	r2, #0
   d5238:	4611      	mov	r1, r2
   d523a:	47a0      	blx	r4
}
   d523c:	b002      	add	sp, #8
   d523e:	bd10      	pop	{r4, pc}

000d5240 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d5240:	4770      	bx	lr
	...

000d5244 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5244:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5246:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d5248:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d524a:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d524e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d5250:	4d05      	ldr	r5, [pc, #20]	; (d5268 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d5252:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d5254:	2201      	movs	r2, #1
   d5256:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d5258:	6005      	str	r5, [r0, #0]
   d525a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d525c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d525e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d5260:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d5262:	7682      	strb	r2, [r0, #26]
}
   d5264:	bd30      	pop	{r4, r5, pc}
   d5266:	bf00      	nop
   d5268:	000d8080 	.word	0x000d8080

000d526c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5270:	ed2d 8b02 	vpush	{d8}
   d5274:	b08b      	sub	sp, #44	; 0x2c
   d5276:	4606      	mov	r6, r0
   d5278:	9103      	str	r1, [sp, #12]
   d527a:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d527e:	9105      	str	r1, [sp, #20]
   d5280:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d5284:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d5286:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d528a:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d528c:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5290:	4281      	cmp	r1, r0
   d5292:	dd51      	ble.n	d5338 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d5294:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d5298:	4291      	cmp	r1, r2
   d529a:	dd4d      	ble.n	d5338 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d529c:	2106      	movs	r1, #6
   d529e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d52a2:	2c00      	cmp	r4, #0
   d52a4:	dd48      	ble.n	d5338 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d52a6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d52aa:	2c00      	cmp	r4, #0
   d52ac:	dd44      	ble.n	d5338 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d52ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d52b2:	9309      	str	r3, [sp, #36]	; 0x24
   d52b4:	b293      	uxth	r3, r2
   d52b6:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d52b8:	2400      	movs	r4, #0
   d52ba:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d52bc:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d52be:	bf1c      	itt	ne
   d52c0:	4b2d      	ldrne	r3, [pc, #180]	; (d5378 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d52c2:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d52c4:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d52c6:	bf16      	itet	ne
   d52c8:	191b      	addne	r3, r3, r4
      line = 0x0;
   d52ca:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d52cc:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d52ce:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d52d0:	9a03      	ldr	r2, [sp, #12]
   d52d2:	b2ab      	uxth	r3, r5
   d52d4:	9308      	str	r3, [sp, #32]
   d52d6:	fb04 f305 	mul.w	r3, r4, r5
   d52da:	fa13 f382 	uxtah	r3, r3, r2
   d52de:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d52e0:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d52e4:	ee08 3a10 	vmov	s16, r3
   d52e8:	f04f 0800 	mov.w	r8, #0
   d52ec:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d52f0:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d52f4:	9b02      	ldr	r3, [sp, #8]
   d52f6:	07db      	lsls	r3, r3, #31
   d52f8:	d52f      	bpl.n	d535a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d52fa:	2d01      	cmp	r5, #1
   d52fc:	6833      	ldr	r3, [r6, #0]
   d52fe:	d120      	bne.n	d5342 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d5300:	9a04      	ldr	r2, [sp, #16]
   d5302:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5306:	9b05      	ldr	r3, [sp, #20]
   d5308:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d530a:	b212      	sxth	r2, r2
   d530c:	4651      	mov	r1, sl
   d530e:	4630      	mov	r0, r6
   d5310:	47d8      	blx	fp
      line >>= 1;
   d5312:	9b02      	ldr	r3, [sp, #8]
   d5314:	085b      	lsrs	r3, r3, #1
   d5316:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d5318:	9b08      	ldr	r3, [sp, #32]
   d531a:	f108 0801 	add.w	r8, r8, #1
   d531e:	441f      	add	r7, r3
   d5320:	f1b8 0f08 	cmp.w	r8, #8
   d5324:	b2bf      	uxth	r7, r7
   d5326:	d1e5      	bne.n	d52f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d5328:	9b07      	ldr	r3, [sp, #28]
   d532a:	3b01      	subs	r3, #1
   d532c:	3401      	adds	r4, #1
   d532e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5332:	b264      	sxtb	r4, r4
   d5334:	9307      	str	r3, [sp, #28]
   d5336:	d1c1      	bne.n	d52bc <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d5338:	b00b      	add	sp, #44	; 0x2c
   d533a:	ecbd 8b02 	vpop	{d8}
   d533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5342:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5344:	e9cd 9200 	strd	r9, r2, [sp]
   d5348:	ee18 1a10 	vmov	r1, s16
   d534c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5350:	b23a      	sxth	r2, r7
   d5352:	464b      	mov	r3, r9
   d5354:	4630      	mov	r0, r6
   d5356:	47d8      	blx	fp
   d5358:	e7db      	b.n	d5312 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d535a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d535e:	4293      	cmp	r3, r2
   d5360:	d0d7      	beq.n	d5312 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d5362:	2d01      	cmp	r5, #1
   d5364:	6833      	ldr	r3, [r6, #0]
   d5366:	d105      	bne.n	d5374 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d5368:	9a04      	ldr	r2, [sp, #16]
   d536a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d536e:	9b06      	ldr	r3, [sp, #24]
   d5370:	4442      	add	r2, r8
   d5372:	e7ca      	b.n	d530a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5374:	9a06      	ldr	r2, [sp, #24]
   d5376:	e7e5      	b.n	d5344 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d5378:	000d7b7c 	.word	0x000d7b7c

000d537c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d537c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d537e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d5380:	b085      	sub	sp, #20
   d5382:	4604      	mov	r4, r0
  if (c == '\n') {
   d5384:	d107      	bne.n	d5396 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d5386:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d5388:	8a63      	ldrh	r3, [r4, #18]
   d538a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d538e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5390:	2300      	movs	r3, #0
   d5392:	8223      	strh	r3, [r4, #16]
   d5394:	e021      	b.n	d53da <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d5396:	290d      	cmp	r1, #13
   d5398:	d01f      	beq.n	d53da <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d539a:	7e03      	ldrb	r3, [r0, #24]
   d539c:	9302      	str	r3, [sp, #8]
   d539e:	8ac3      	ldrh	r3, [r0, #22]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	8a83      	ldrh	r3, [r0, #20]
   d53a4:	9300      	str	r3, [sp, #0]
   d53a6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d53aa:	460b      	mov	r3, r1
   d53ac:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d53b0:	f7ff ff5c 	bl	d526c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d53b4:	7e21      	ldrb	r1, [r4, #24]
   d53b6:	8a23      	ldrh	r3, [r4, #16]
   d53b8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d53bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d53c0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d53c2:	b21b      	sxth	r3, r3
   d53c4:	460a      	mov	r2, r1
   d53c6:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d53c8:	b138      	cbz	r0, d53da <_ZN12Adafruit_GFX5writeEh+0x5e>
   d53ca:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d53ce:	f06f 0505 	mvn.w	r5, #5
   d53d2:	fb05 0101 	mla	r1, r5, r1, r0
   d53d6:	428b      	cmp	r3, r1
   d53d8:	dcd6      	bgt.n	d5388 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d53da:	2001      	movs	r0, #1
   d53dc:	b005      	add	sp, #20
   d53de:	bd30      	pop	{r4, r5, pc}

000d53e0 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d53e0:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d53e2:	8242      	strh	r2, [r0, #18]
}
   d53e4:	4770      	bx	lr

000d53e6 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d53e6:	2901      	cmp	r1, #1
   d53e8:	bf38      	it	cc
   d53ea:	2101      	movcc	r1, #1
   d53ec:	7601      	strb	r1, [r0, #24]
}
   d53ee:	4770      	bx	lr

000d53f0 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d53f0:	82c1      	strh	r1, [r0, #22]
   d53f2:	8281      	strh	r1, [r0, #20]
}
   d53f4:	4770      	bx	lr

000d53f6 <_ZN12Adafruit_GFX11getRotationEv>:
}
   d53f6:	7e40      	ldrb	r0, [r0, #25]
   d53f8:	4770      	bx	lr

000d53fa <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d53fa:	f001 0303 	and.w	r3, r1, #3
   d53fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5402:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   d5404:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   d5406:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d540a:	bf59      	ittee	pl
   d540c:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d540e:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   d5410:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d5412:	81c3      	strhmi	r3, [r0, #14]
}
   d5414:	4770      	bx	lr

000d5416 <_ZN12Adafruit_GFX5widthEv>:
}
   d5416:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d541a:	4770      	bx	lr

000d541c <_ZN12Adafruit_GFX6heightEv>:
}
   d541c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5420:	4770      	bx	lr

000d5422 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5422:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5424:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5428:	6803      	ldr	r3, [r0, #0]
   d542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d542c:	4798      	blx	r3
}
   d542e:	3800      	subs	r0, #0
   d5430:	bf18      	it	ne
   d5432:	2001      	movne	r0, #1
   d5434:	bd08      	pop	{r3, pc}

000d5436 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5438:	4606      	mov	r6, r0
   d543a:	460f      	mov	r7, r1
   d543c:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d543e:	b1c4      	cbz	r4, d5472 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5440:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5444:	6803      	ldr	r3, [r0, #0]
   d5446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5448:	4798      	blx	r3
   d544a:	b908      	cbnz	r0, d5450 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d544c:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d544e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d5450:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5454:	2cfa      	cmp	r4, #250	; 0xfa
   d5456:	6803      	ldr	r3, [r0, #0]
   d5458:	4625      	mov	r5, r4
   d545a:	bfa8      	it	ge
   d545c:	25fa      	movge	r5, #250	; 0xfa
   d545e:	68db      	ldr	r3, [r3, #12]
   d5460:	462a      	mov	r2, r5
   d5462:	4639      	mov	r1, r7
   d5464:	4798      	blx	r3
   d5466:	b283      	uxth	r3, r0
      len -= ret;
   d5468:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d546a:	429d      	cmp	r5, r3
      len -= ret;
   d546c:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d546e:	d0e6      	beq.n	d543e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5470:	e7ec      	b.n	d544c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d5472:	2001      	movs	r0, #1
   d5474:	e7eb      	b.n	d544e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d5476 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d5476:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d547a:	4606      	mov	r6, r0
   d547c:	4688      	mov	r8, r1
   d547e:	4691      	mov	r9, r2
   d5480:	461f      	mov	r7, r3
   d5482:	461d      	mov	r5, r3
  uint16_t len = 0;
   d5484:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d5486:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d548a:	6803      	ldr	r3, [r0, #0]
   d548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d548e:	4798      	blx	r3
   d5490:	b1d0      	cbz	r0, d54c8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5492:	2d00      	cmp	r5, #0
   d5494:	db18      	blt.n	d54c8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d5496:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d549a:	6803      	ldr	r3, [r0, #0]
   d549c:	691b      	ldr	r3, [r3, #16]
   d549e:	4798      	blx	r3
   d54a0:	b160      	cbz	r0, d54bc <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d54a2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54a6:	6803      	ldr	r3, [r0, #0]
   d54a8:	695b      	ldr	r3, [r3, #20]
   d54aa:	4798      	blx	r3
   d54ac:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d54b0:	3401      	adds	r4, #1
   d54b2:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d54b4:	454c      	cmp	r4, r9
   d54b6:	d007      	beq.n	d54c8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d54b8:	463d      	mov	r5, r7
   d54ba:	e7ec      	b.n	d5496 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d54bc:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d54be:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d54c0:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d54c2:	f000 fd8b 	bl	d5fdc <delay>
  while (client->connected() && (timeout >= 0)) {
   d54c6:	e7de      	b.n	d5486 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d54c8:	4620      	mov	r0, r4
   d54ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d54ce <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d54ce:	b570      	push	{r4, r5, r6, lr}
   d54d0:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d54d2:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d54d6:	2296      	movs	r2, #150	; 0x96
   d54d8:	2100      	movs	r1, #0
   d54da:	4628      	mov	r0, r5
   d54dc:	f002 fa22 	bl	d7924 <memset>
  strcpy((char *)buffer, servername);
   d54e0:	6861      	ldr	r1, [r4, #4]
   d54e2:	4628      	mov	r0, r5
   d54e4:	f002 fa54 	bl	d7990 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d54e8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d54ec:	8922      	ldrh	r2, [r4, #8]
   d54ee:	6803      	ldr	r3, [r0, #0]
   d54f0:	4629      	mov	r1, r5
   d54f2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d54f4:	2300      	movs	r3, #0
   d54f6:	47b0      	blx	r6
}
   d54f8:	3800      	subs	r0, #0
   d54fa:	bf18      	it	ne
   d54fc:	2001      	movne	r0, #1
   d54fe:	bd70      	pop	{r4, r5, r6, pc}

000d5500 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5500:	b510      	push	{r4, lr}
   d5502:	4604      	mov	r4, r0
  if (client->connected()) {
   d5504:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5508:	6803      	ldr	r3, [r0, #0]
   d550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d550c:	4798      	blx	r3
   d550e:	b120      	cbz	r0, d551a <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5510:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5514:	6803      	ldr	r3, [r0, #0]
   d5516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5518:	4798      	blx	r3
}
   d551a:	2001      	movs	r0, #1
   d551c:	bd10      	pop	{r4, pc}
	...

000d5520 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5520:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d5522:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d5524:	4a0a      	ldr	r2, [pc, #40]	; (d5550 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d5526:	4d0b      	ldr	r5, [pc, #44]	; (d5554 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d5528:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d552c:	9b03      	ldr	r3, [sp, #12]
   d552e:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5530:	2300      	movs	r3, #0
  servername = server;
   d5532:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d5536:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d553a:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d553e:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d5542:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d5546:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d5548:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d554c:	bd30      	pop	{r4, r5, pc}
   d554e:	bf00      	nop
   d5550:	000d79e2 	.word	0x000d79e2
   d5554:	000d80dc 	.word	0x000d80dc

000d5558 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5558:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d555a:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d555e:	7203      	strb	r3, [r0, #8]
}
   d5560:	bd10      	pop	{r4, pc}
	...

000d5564 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <netdb_freeaddrinfo+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	689b      	ldr	r3, [r3, #8]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030268 	.word	0x00030268

000d5574 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <netdb_getaddrinfo+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	68db      	ldr	r3, [r3, #12]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030268 	.word	0x00030268

000d5584 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_Pin_Map+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	681b      	ldr	r3, [r3, #0]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003022c 	.word	0x0003022c

000d5594 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_Pin_Mode+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	689b      	ldr	r3, [r3, #8]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003022c 	.word	0x0003022c

000d55a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_Get_Pin_Mode+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	68db      	ldr	r3, [r3, #12]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003022c 	.word	0x0003022c

000d55b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_GPIO_Write+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	691b      	ldr	r3, [r3, #16]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003022c 	.word	0x0003022c

000d55c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_GPIO_Read+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	695b      	ldr	r3, [r3, #20]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	0003022c 	.word	0x0003022c

000d55d4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <if_index_to_name+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	695b      	ldr	r3, [r3, #20]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	0003026c 	.word	0x0003026c

000d55e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_RNG_GetRandomNumber+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	685b      	ldr	r3, [r3, #4]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030218 	.word	0x00030218

000d55f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <HAL_Delay_Microseconds+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	68db      	ldr	r3, [r3, #12]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030218 	.word	0x00030218

000d5604 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	695b      	ldr	r3, [r3, #20]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030218 	.word	0x00030218

000d5614 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <os_mutex_recursive_create+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030248 	.word	0x00030248

000d5624 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <os_mutex_recursive_destroy+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030248 	.word	0x00030248

000d5634 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <inet_inet_ntop+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	695b      	ldr	r3, [r3, #20]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030264 	.word	0x00030264

000d5644 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <inet_htonl+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6a1b      	ldr	r3, [r3, #32]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030264 	.word	0x00030264

000d5654 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <inet_htons+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030264 	.word	0x00030264

000d5664 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <hal_usart_init+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	681b      	ldr	r3, [r3, #0]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003023c 	.word	0x0003023c

000d5674 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <hal_usart_write+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	68db      	ldr	r3, [r3, #12]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003023c 	.word	0x0003023c

000d5684 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <hal_usart_available+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	691b      	ldr	r3, [r3, #16]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003023c 	.word	0x0003023c

000d5694 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <hal_usart_read+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	695b      	ldr	r3, [r3, #20]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003023c 	.word	0x0003023c

000d56a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <hal_usart_peek+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	699b      	ldr	r3, [r3, #24]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003023c 	.word	0x0003023c

000d56b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <hal_usart_flush+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	69db      	ldr	r3, [r3, #28]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003023c 	.word	0x0003023c

000d56c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <hal_usart_is_enabled+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6a1b      	ldr	r3, [r3, #32]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003023c 	.word	0x0003023c

000d56d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <hal_usart_available_data_for_write+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003023c 	.word	0x0003023c

000d56e4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <hal_usart_begin_config+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003023c 	.word	0x0003023c

000d56f4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <hal_i2c_begin+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	68db      	ldr	r3, [r3, #12]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030228 	.word	0x00030228

000d5704 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <hal_i2c_begin_transmission+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	699b      	ldr	r3, [r3, #24]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030228 	.word	0x00030228

000d5714 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <hal_i2c_end_transmission+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	69db      	ldr	r3, [r3, #28]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030228 	.word	0x00030228

000d5724 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <hal_i2c_write+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6a1b      	ldr	r3, [r3, #32]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030228 	.word	0x00030228

000d5734 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <hal_i2c_available+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030228 	.word	0x00030228

000d5744 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <hal_i2c_read+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030228 	.word	0x00030228

000d5754 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <hal_i2c_peek+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030228 	.word	0x00030228

000d5764 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <hal_i2c_flush+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030228 	.word	0x00030228

000d5774 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <hal_i2c_is_enabled+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030228 	.word	0x00030228

000d5784 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <hal_i2c_init+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030228 	.word	0x00030228

000d5794 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <hal_i2c_request_ex+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030228 	.word	0x00030228

000d57a4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <sock_setsockopt+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	699b      	ldr	r3, [r3, #24]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030238 	.word	0x00030238

000d57b4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <sock_close+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	69db      	ldr	r3, [r3, #28]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030238 	.word	0x00030238

000d57c4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <sock_connect+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6a1b      	ldr	r3, [r3, #32]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030238 	.word	0x00030238

000d57d4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <sock_recv+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030238 	.word	0x00030238

000d57e4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <sock_send+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030238 	.word	0x00030238

000d57f4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <sock_socket+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030238 	.word	0x00030238

000d5804 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <hal_spi_begin+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	681b      	ldr	r3, [r3, #0]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030230 	.word	0x00030230

000d5814 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <hal_spi_set_bit_order+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	689b      	ldr	r3, [r3, #8]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030230 	.word	0x00030230

000d5824 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <hal_spi_set_data_mode+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	68db      	ldr	r3, [r3, #12]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030230 	.word	0x00030230

000d5834 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <hal_spi_set_clock_divider+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	691b      	ldr	r3, [r3, #16]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030230 	.word	0x00030230

000d5844 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <hal_spi_transfer+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030230 	.word	0x00030230

000d5854 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <hal_spi_init+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	69db      	ldr	r3, [r3, #28]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030230 	.word	0x00030230

000d5864 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <hal_spi_is_enabled+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6a1b      	ldr	r3, [r3, #32]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030230 	.word	0x00030230

000d5874 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <hal_spi_info+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030230 	.word	0x00030230

000d5884 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <hal_spi_set_settings+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030230 	.word	0x00030230

000d5894 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <hal_spi_acquire+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030230 	.word	0x00030230

000d58a4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <hal_spi_release+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030230 	.word	0x00030230

000d58b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <HAL_USB_USART_Init+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	681b      	ldr	r3, [r3, #0]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	0003024c 	.word	0x0003024c

000d58c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <HAL_USB_USART_Begin+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	685b      	ldr	r3, [r3, #4]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003024c 	.word	0x0003024c

000d58d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <HAL_USB_USART_Available_Data+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	691b      	ldr	r3, [r3, #16]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	0003024c 	.word	0x0003024c

000d58e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	695b      	ldr	r3, [r3, #20]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	0003024c 	.word	0x0003024c

000d58f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <HAL_USB_USART_Receive_Data+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	699b      	ldr	r3, [r3, #24]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	0003024c 	.word	0x0003024c

000d5904 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_USB_USART_Send_Data+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	69db      	ldr	r3, [r3, #28]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003024c 	.word	0x0003024c

000d5914 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_USB_USART_Flush_Data+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6a1b      	ldr	r3, [r3, #32]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003024c 	.word	0x0003024c

000d5924 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <panic_+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030260 	.word	0x00030260

000d5934 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <log_message+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030260 	.word	0x00030260

000d5944 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <set_system_mode+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	685b      	ldr	r3, [r3, #4]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030220 	.word	0x00030220

000d5954 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <system_delay_ms+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	695b      	ldr	r3, [r3, #20]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030220 	.word	0x00030220

000d5964 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b03      	ldr	r3, [pc, #12]	; (d5974 <system_ctrl_set_app_request_handler+0x10>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d596e:	9301      	str	r3, [sp, #4]
   d5970:	bd08      	pop	{r3, pc}
   d5972:	0000      	.short	0x0000
   d5974:	00030220 	.word	0x00030220

000d5978 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b03      	ldr	r3, [pc, #12]	; (d5988 <system_ctrl_set_result+0x10>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5982:	9301      	str	r3, [sp, #4]
   d5984:	bd08      	pop	{r3, pc}
   d5986:	0000      	.short	0x0000
   d5988:	00030220 	.word	0x00030220

000d598c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <network_connect+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	685b      	ldr	r3, [r3, #4]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	00030240 	.word	0x00030240

000d599c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <network_connecting+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	689b      	ldr	r3, [r3, #8]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	00030240 	.word	0x00030240

000d59ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <network_disconnect+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	68db      	ldr	r3, [r3, #12]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	00030240 	.word	0x00030240

000d59bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <network_ready+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	691b      	ldr	r3, [r3, #16]
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	00030240 	.word	0x00030240

000d59cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <network_on+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	695b      	ldr	r3, [r3, #20]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	00030240 	.word	0x00030240

000d59dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <network_off+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	699b      	ldr	r3, [r3, #24]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	00030240 	.word	0x00030240

000d59ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <network_listen+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	69db      	ldr	r3, [r3, #28]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	00030240 	.word	0x00030240

000d59fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <network_listening+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	6a1b      	ldr	r3, [r3, #32]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030240 	.word	0x00030240

000d5a0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <network_set_listen_timeout+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	00030240 	.word	0x00030240

000d5a1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <network_get_listen_timeout+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	00030240 	.word	0x00030240

000d5a2c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <network_is_on+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030240 	.word	0x00030240

000d5a3c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <network_is_off+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030240 	.word	0x00030240

000d5a4c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <spark_cloud_flag_connected+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	695b      	ldr	r3, [r3, #20]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030244 	.word	0x00030244

000d5a5c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <spark_sync_time+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030244 	.word	0x00030244

000d5a6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030244 	.word	0x00030244

000d5a7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <malloc+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	681b      	ldr	r3, [r3, #0]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	0003021c 	.word	0x0003021c

000d5a8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <free+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	685b      	ldr	r3, [r3, #4]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	0003021c 	.word	0x0003021c

000d5a9c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <vsnprintf+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	0003021c 	.word	0x0003021c

000d5aac <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <__errno+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	0003021c 	.word	0x0003021c

000d5abc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <newlib_impure_ptr_callback+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	0003021c 	.word	0x0003021c

000d5acc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5acc:	2200      	movs	r2, #0
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	4611      	mov	r1, r2
   d5ad2:	f7ff bf93 	b.w	d59fc <network_listening>

000d5ad6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5ad6:	2200      	movs	r2, #0
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	4611      	mov	r1, r2
   d5adc:	f7ff bf9e 	b.w	d5a1c <network_get_listen_timeout>

000d5ae0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5ae0:	6840      	ldr	r0, [r0, #4]
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	f7ff bf92 	b.w	d5a0c <network_set_listen_timeout>

000d5ae8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ae8:	6840      	ldr	r0, [r0, #4]
   d5aea:	2200      	movs	r2, #0
   d5aec:	f081 0101 	eor.w	r1, r1, #1
   d5af0:	f7ff bf7c 	b.w	d59ec <network_listen>

000d5af4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5af4:	2300      	movs	r3, #0
   d5af6:	6840      	ldr	r0, [r0, #4]
   d5af8:	461a      	mov	r2, r3
   d5afa:	4619      	mov	r1, r3
   d5afc:	f7ff bf6e 	b.w	d59dc <network_off>

000d5b00 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5b00:	2300      	movs	r3, #0
   d5b02:	6840      	ldr	r0, [r0, #4]
   d5b04:	461a      	mov	r2, r3
   d5b06:	4619      	mov	r1, r3
   d5b08:	f7ff bf60 	b.w	d59cc <network_on>

000d5b0c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	6840      	ldr	r0, [r0, #4]
   d5b10:	4611      	mov	r1, r2
   d5b12:	f7ff bf53 	b.w	d59bc <network_ready>

000d5b16 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5b16:	2200      	movs	r2, #0
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	4611      	mov	r1, r2
   d5b1c:	f7ff bf3e 	b.w	d599c <network_connecting>

000d5b20 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	2200      	movs	r2, #0
   d5b24:	2102      	movs	r1, #2
   d5b26:	f7ff bf41 	b.w	d59ac <network_disconnect>

000d5b2a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5b2a:	2300      	movs	r3, #0
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	461a      	mov	r2, r3
   d5b30:	f7ff bf2c 	b.w	d598c <network_connect>

000d5b34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b34:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b36:	2203      	movs	r2, #3
   d5b38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b3a:	4a02      	ldr	r2, [pc, #8]	; (d5b44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b3c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5b3e:	4770      	bx	lr
   d5b40:	2003e648 	.word	0x2003e648
   d5b44:	000d8100 	.word	0x000d8100

000d5b48 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5b48:	2100      	movs	r1, #0
   d5b4a:	f7ff bea3 	b.w	d5894 <hal_spi_acquire>

000d5b4e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5b4e:	2100      	movs	r1, #0
   d5b50:	f7ff bea8 	b.w	d58a4 <hal_spi_release>

000d5b54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5b54:	b510      	push	{r4, lr}
   d5b56:	4604      	mov	r4, r0
   d5b58:	4608      	mov	r0, r1
{
    _spi = spi;
   d5b5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5b5c:	f7ff fe7a 	bl	d5854 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5b60:	2300      	movs	r3, #0
   d5b62:	6063      	str	r3, [r4, #4]
}
   d5b64:	4620      	mov	r0, r4
   d5b66:	bd10      	pop	{r4, pc}

000d5b68 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5b68:	b510      	push	{r4, lr}
   d5b6a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5b6c:	7800      	ldrb	r0, [r0, #0]
   d5b6e:	f7ff ffeb 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5b72:	b948      	cbnz	r0, d5b88 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5b74:	7820      	ldrb	r0, [r4, #0]
   d5b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5b7a:	f7ff fe43 	bl	d5804 <hal_spi_begin>
        unlock();
   d5b7e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5b84:	f7ff bfe3 	b.w	d5b4e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5b88:	bd10      	pop	{r4, pc}

000d5b8a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5b8a:	b513      	push	{r0, r1, r4, lr}
   d5b8c:	4604      	mov	r4, r0
    if (!lock())
   d5b8e:	7800      	ldrb	r0, [r0, #0]
{
   d5b90:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5b92:	f7ff ffd9 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5b96:	9901      	ldr	r1, [sp, #4]
   d5b98:	b940      	cbnz	r0, d5bac <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5b9a:	7820      	ldrb	r0, [r4, #0]
   d5b9c:	f7ff fe3a 	bl	d5814 <hal_spi_set_bit_order>
        unlock();
   d5ba0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5ba2:	b002      	add	sp, #8
   d5ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5ba8:	f7ff bfd1 	b.w	d5b4e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5bac:	b002      	add	sp, #8
   d5bae:	bd10      	pop	{r4, pc}

000d5bb0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5bb0:	b513      	push	{r0, r1, r4, lr}
   d5bb2:	4604      	mov	r4, r0
    if (!lock())
   d5bb4:	7800      	ldrb	r0, [r0, #0]
{
   d5bb6:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5bb8:	f7ff ffc6 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5bbc:	9901      	ldr	r1, [sp, #4]
   d5bbe:	b940      	cbnz	r0, d5bd2 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5bc0:	7820      	ldrb	r0, [r4, #0]
   d5bc2:	f7ff fe2f 	bl	d5824 <hal_spi_set_data_mode>
        unlock();
   d5bc6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5bc8:	b002      	add	sp, #8
   d5bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5bce:	f7ff bfbe 	b.w	d5b4e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5bd2:	b002      	add	sp, #8
   d5bd4:	bd10      	pop	{r4, pc}

000d5bd6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5bd6:	7800      	ldrb	r0, [r0, #0]
   d5bd8:	f7ff bfb9 	b.w	d5b4e <_ZN8SPIClass6unlockEv.isra.0>

000d5bdc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5bdc:	0840      	lsrs	r0, r0, #1
{
   d5bde:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5be0:	6018      	str	r0, [r3, #0]
   d5be2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5be4:	6818      	ldr	r0, [r3, #0]
   d5be6:	4288      	cmp	r0, r1
   d5be8:	b2e5      	uxtb	r5, r4
   d5bea:	d906      	bls.n	d5bfa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5bec:	3401      	adds	r4, #1
   d5bee:	2c08      	cmp	r4, #8
   d5bf0:	d002      	beq.n	d5bf8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5bf2:	0840      	lsrs	r0, r0, #1
   d5bf4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5bf6:	e7f5      	b.n	d5be4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5bf8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5bfc:	5d5b      	ldrb	r3, [r3, r5]
   d5bfe:	7013      	strb	r3, [r2, #0]
}
   d5c00:	bd30      	pop	{r4, r5, pc}
   d5c02:	bf00      	nop
   d5c04:	000d8134 	.word	0x000d8134

000d5c08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c0c:	4606      	mov	r6, r0
   d5c0e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5c10:	7800      	ldrb	r0, [r0, #0]
{
   d5c12:	460c      	mov	r4, r1
    CHECK(lock());
   d5c14:	f7ff ff98 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5c18:	2800      	cmp	r0, #0
   d5c1a:	db1b      	blt.n	d5c54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5c1c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5c1e:	2214      	movs	r2, #20
   d5c20:	2100      	movs	r1, #0
   d5c22:	a809      	add	r0, sp, #36	; 0x24
   d5c24:	f001 fe7e 	bl	d7924 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c28:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5c2a:	2200      	movs	r2, #0
   d5c2c:	a909      	add	r1, sp, #36	; 0x24
   d5c2e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c30:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5c34:	f7ff fe1e 	bl	d5874 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5c38:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5c3c:	b113      	cbz	r3, d5c44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5c3e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5c42:	b155      	cbz	r5, d5c5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5c44:	2700      	movs	r7, #0
   d5c46:	46b9      	mov	r9, r7
   d5c48:	46b8      	mov	r8, r7
   d5c4a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5c4c:	7923      	ldrb	r3, [r4, #4]
   d5c4e:	b15d      	cbz	r5, d5c68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5c50:	b1c3      	cbz	r3, d5c84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5c52:	2000      	movs	r0, #0
}
   d5c54:	b00f      	add	sp, #60	; 0x3c
   d5c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5c5a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5c5e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5c62:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5c66:	e7f1      	b.n	d5c4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5c68:	2b00      	cmp	r3, #0
   d5c6a:	d135      	bne.n	d5cd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5c6c:	68a3      	ldr	r3, [r4, #8]
   d5c6e:	4543      	cmp	r3, r8
   d5c70:	d108      	bne.n	d5c84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5c72:	f88d 9020 	strb.w	r9, [sp, #32]
   d5c76:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5c7a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5c7e:	89a3      	ldrh	r3, [r4, #12]
   d5c80:	429a      	cmp	r2, r3
   d5c82:	d0e6      	beq.n	d5c52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5c84:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5c86:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5c88:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5c8e:	ab04      	add	r3, sp, #16
   d5c90:	f10d 020f 	add.w	r2, sp, #15
   d5c94:	f7ff ffa2 	bl	d5bdc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5c98:	7921      	ldrb	r1, [r4, #4]
   d5c9a:	b985      	cbnz	r5, d5cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5c9c:	b989      	cbnz	r1, d5cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5c9e:	68a3      	ldr	r3, [r4, #8]
   d5ca0:	4543      	cmp	r3, r8
   d5ca2:	d30e      	bcc.n	d5cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5ca4:	f88d 9020 	strb.w	r9, [sp, #32]
   d5ca8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5cac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5cb0:	89a3      	ldrh	r3, [r4, #12]
   d5cb2:	429a      	cmp	r2, r3
   d5cb4:	d105      	bne.n	d5cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5cb6:	9b04      	ldr	r3, [sp, #16]
   d5cb8:	4543      	cmp	r3, r8
   d5cba:	d102      	bne.n	d5cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5cbc:	e7c9      	b.n	d5c52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5cbe:	2900      	cmp	r1, #0
   d5cc0:	d1f9      	bne.n	d5cb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5cc2:	2300      	movs	r3, #0
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	7b63      	ldrb	r3, [r4, #13]
   d5cc8:	9300      	str	r3, [sp, #0]
   d5cca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5cce:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5cd0:	7830      	ldrb	r0, [r6, #0]
   d5cd2:	f7ff fdd7 	bl	d5884 <hal_spi_set_settings>
   d5cd6:	e7bc      	b.n	d5c52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5cd8:	e9cd 5500 	strd	r5, r5, [sp]
   d5cdc:	462b      	mov	r3, r5
   d5cde:	462a      	mov	r2, r5
   d5ce0:	2101      	movs	r1, #1
   d5ce2:	e7f5      	b.n	d5cd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5ce4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ce8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5cea:	2300      	movs	r3, #0
{
   d5cec:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5cee:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5cf0:	9302      	str	r3, [sp, #8]
{
   d5cf2:	460e      	mov	r6, r1
   d5cf4:	4617      	mov	r7, r2
    if (!lock())
   d5cf6:	f7ff ff27 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5cfa:	4605      	mov	r5, r0
   d5cfc:	bb00      	cbnz	r0, d5d40 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5cfe:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5d02:	4601      	mov	r1, r0
   d5d04:	2214      	movs	r2, #20
   d5d06:	a803      	add	r0, sp, #12
   d5d08:	f001 fe0c 	bl	d7924 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5d0e:	462a      	mov	r2, r5
   d5d10:	a903      	add	r1, sp, #12
   d5d12:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d14:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5d18:	f7ff fdac 	bl	d5874 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5d1c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5d1e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5d22:	ab02      	add	r3, sp, #8
   d5d24:	f10d 0207 	add.w	r2, sp, #7
   d5d28:	fb07 f106 	mul.w	r1, r7, r6
   d5d2c:	f7ff ff56 	bl	d5bdc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5d30:	7820      	ldrb	r0, [r4, #0]
   d5d32:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5d36:	f7ff fd7d 	bl	d5834 <hal_spi_set_clock_divider>
        unlock();
   d5d3a:	7820      	ldrb	r0, [r4, #0]
   d5d3c:	f7ff ff07 	bl	d5b4e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5d40:	9802      	ldr	r0, [sp, #8]
   d5d42:	b008      	add	sp, #32
   d5d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d48 <_ZN8SPIClass15setClockDividerEh>:
{
   d5d48:	b538      	push	{r3, r4, r5, lr}
   d5d4a:	4604      	mov	r4, r0
    if (!lock())
   d5d4c:	7800      	ldrb	r0, [r0, #0]
{
   d5d4e:	460d      	mov	r5, r1
    if (!lock())
   d5d50:	f7ff fefa 	bl	d5b48 <_ZN8SPIClass4lockEv.isra.0>
   d5d54:	4603      	mov	r3, r0
   d5d56:	b9d0      	cbnz	r0, d5d8e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d5d58:	6861      	ldr	r1, [r4, #4]
   d5d5a:	b199      	cbz	r1, d5d84 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d5d5c:	4a0c      	ldr	r2, [pc, #48]	; (d5d90 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d5d5e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5d62:	4285      	cmp	r5, r0
   d5d64:	d002      	beq.n	d5d6c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d5d66:	3301      	adds	r3, #1
   d5d68:	2b08      	cmp	r3, #8
   d5d6a:	d1f8      	bne.n	d5d5e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d5d6c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d5d6e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d5d70:	2201      	movs	r2, #1
   d5d72:	40d9      	lsrs	r1, r3
   d5d74:	4620      	mov	r0, r4
   d5d76:	f7ff ffb5 	bl	d5ce4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d5d7a:	7820      	ldrb	r0, [r4, #0]
}
   d5d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d5d80:	f7ff bee5 	b.w	d5b4e <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d5d84:	7820      	ldrb	r0, [r4, #0]
   d5d86:	4629      	mov	r1, r5
   d5d88:	f7ff fd54 	bl	d5834 <hal_spi_set_clock_divider>
   d5d8c:	e7f5      	b.n	d5d7a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d5d8e:	bd38      	pop	{r3, r4, r5, pc}
   d5d90:	000d8134 	.word	0x000d8134

000d5d94 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5d94:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5d96:	7800      	ldrb	r0, [r0, #0]
   d5d98:	f7ff fd54 	bl	d5844 <hal_spi_transfer>
}
   d5d9c:	b2c0      	uxtb	r0, r0
   d5d9e:	bd08      	pop	{r3, pc}

000d5da0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5da0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5da2:	4b09      	ldr	r3, [pc, #36]	; (d5dc8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5da4:	4c09      	ldr	r4, [pc, #36]	; (d5dcc <_GLOBAL__sub_I_System+0x2c>)
   d5da6:	2202      	movs	r2, #2
   d5da8:	2000      	movs	r0, #0
   d5daa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5dac:	4b08      	ldr	r3, [pc, #32]	; (d5dd0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5dae:	6020      	str	r0, [r4, #0]
   d5db0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5db2:	71a0      	strb	r0, [r4, #6]
   d5db4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5db6:	f7ff fdc5 	bl	d5944 <set_system_mode>
SystemClass System;
   d5dba:	4620      	mov	r0, r4
   d5dbc:	4a05      	ldr	r2, [pc, #20]	; (d5dd4 <_GLOBAL__sub_I_System+0x34>)
   d5dbe:	4906      	ldr	r1, [pc, #24]	; (d5dd8 <_GLOBAL__sub_I_System+0x38>)
   d5dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5dc4:	f001 b854 	b.w	d6e70 <__aeabi_atexit>
   d5dc8:	2003e65c 	.word	0x2003e65c
   d5dcc:	2003e650 	.word	0x2003e650
   d5dd0:	ffff0000 	.word	0xffff0000
   d5dd4:	2003e498 	.word	0x2003e498
   d5dd8:	000d40fd 	.word	0x000d40fd

000d5ddc <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5ddc:	b570      	push	{r4, r5, r6, lr}
   d5dde:	b086      	sub	sp, #24
   d5de0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5de2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5de4:	4668      	mov	r0, sp
   d5de6:	f000 fa21 	bl	d622c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dec:	1d34      	adds	r4, r6, #4
   d5dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5df0:	682b      	ldr	r3, [r5, #0]
   d5df2:	7023      	strb	r3, [r4, #0]
    }
   d5df4:	4630      	mov	r0, r6
   d5df6:	b006      	add	sp, #24
   d5df8:	bd70      	pop	{r4, r5, r6, pc}

000d5dfa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5dfa:	b510      	push	{r4, lr}
   d5dfc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5dfe:	6800      	ldr	r0, [r0, #0]
   d5e00:	b108      	cbz	r0, d5e06 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e02:	f7ff fc0f 	bl	d5624 <os_mutex_recursive_destroy>
    }
   d5e06:	4620      	mov	r0, r4
   d5e08:	bd10      	pop	{r4, pc}

000d5e0a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5e0a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5e0c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5e0e:	4604      	mov	r4, r0
      if (_M_manager)
   d5e10:	b113      	cbz	r3, d5e18 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e12:	2203      	movs	r2, #3
   d5e14:	4601      	mov	r1, r0
   d5e16:	4798      	blx	r3
    }
   d5e18:	4620      	mov	r0, r4
   d5e1a:	bd10      	pop	{r4, pc}

000d5e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5e1c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5e1e:	4c06      	ldr	r4, [pc, #24]	; (d5e38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5e20:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5e22:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5e24:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5e26:	f7ff fbf5 	bl	d5614 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	4a03      	ldr	r2, [pc, #12]	; (d5e3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5e2e:	4904      	ldr	r1, [pc, #16]	; (d5e40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5e34:	f001 b81c 	b.w	d6e70 <__aeabi_atexit>
   d5e38:	2003e660 	.word	0x2003e660
   d5e3c:	2003e498 	.word	0x2003e498
   d5e40:	000d5dfb 	.word	0x000d5dfb

000d5e44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e46:	4606      	mov	r6, r0
   d5e48:	460d      	mov	r5, r1
  size_t n = 0;
   d5e4a:	188f      	adds	r7, r1, r2
   d5e4c:	2400      	movs	r4, #0
  while (size--) {
   d5e4e:	42bd      	cmp	r5, r7
   d5e50:	d00c      	beq.n	d5e6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5e52:	6833      	ldr	r3, [r6, #0]
   d5e54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e58:	689b      	ldr	r3, [r3, #8]
   d5e5a:	4630      	mov	r0, r6
   d5e5c:	4798      	blx	r3
     if (chunk>=0)
   d5e5e:	1e03      	subs	r3, r0, #0
   d5e60:	db01      	blt.n	d5e66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5e62:	441c      	add	r4, r3
  while (size--) {
   d5e64:	e7f3      	b.n	d5e4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5e66:	2c00      	cmp	r4, #0
   d5e68:	bf08      	it	eq
   d5e6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5e70:	b513      	push	{r0, r1, r4, lr}
   d5e72:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5e74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5e76:	b159      	cbz	r1, d5e90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5e78:	9101      	str	r1, [sp, #4]
   d5e7a:	f001 fd91 	bl	d79a0 <strlen>
   d5e7e:	6823      	ldr	r3, [r4, #0]
   d5e80:	9901      	ldr	r1, [sp, #4]
   d5e82:	68db      	ldr	r3, [r3, #12]
   d5e84:	4602      	mov	r2, r0
   d5e86:	4620      	mov	r0, r4
    }
   d5e88:	b002      	add	sp, #8
   d5e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5e8e:	4718      	bx	r3
    }
   d5e90:	b002      	add	sp, #8
   d5e92:	bd10      	pop	{r4, pc}

000d5e94 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5e94:	b508      	push	{r3, lr}
  return write(str);
   d5e96:	f7ff ffeb 	bl	d5e70 <_ZN5Print5writeEPKc>
}
   d5e9a:	bd08      	pop	{r3, pc}

000d5e9c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5e9c:	6803      	ldr	r3, [r0, #0]
   d5e9e:	689b      	ldr	r3, [r3, #8]
   d5ea0:	4718      	bx	r3

000d5ea2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ea2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ea4:	210d      	movs	r1, #13
{
   d5ea6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ea8:	f7ff fff8 	bl	d5e9c <_ZN5Print5printEc>
  n += print('\n');
   d5eac:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5eae:	4604      	mov	r4, r0
  n += print('\n');
   d5eb0:	4628      	mov	r0, r5
   d5eb2:	f7ff fff3 	bl	d5e9c <_ZN5Print5printEc>
  return n;
}
   d5eb6:	4420      	add	r0, r4
   d5eb8:	bd38      	pop	{r3, r4, r5, pc}

000d5eba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5eba:	b538      	push	{r3, r4, r5, lr}
   d5ebc:	4605      	mov	r5, r0
  return write(str);
   d5ebe:	f7ff ffd7 	bl	d5e70 <_ZN5Print5writeEPKc>
   d5ec2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5ec4:	4628      	mov	r0, r5
   d5ec6:	f7ff ffec 	bl	d5ea2 <_ZN5Print7printlnEv>
  return n;
}
   d5eca:	4420      	add	r0, r4
   d5ecc:	bd38      	pop	{r3, r4, r5, pc}

000d5ece <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5ece:	b530      	push	{r4, r5, lr}
   d5ed0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ed2:	2300      	movs	r3, #0
   d5ed4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5ed8:	2a01      	cmp	r2, #1
   d5eda:	bf98      	it	ls
   d5edc:	220a      	movls	r2, #10
   d5ede:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ee0:	460d      	mov	r5, r1
   d5ee2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ee6:	fb01 5312 	mls	r3, r1, r2, r5
   d5eea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5eee:	2b09      	cmp	r3, #9
   d5ef0:	bf94      	ite	ls
   d5ef2:	3330      	addls	r3, #48	; 0x30
   d5ef4:	3337      	addhi	r3, #55	; 0x37
   d5ef6:	b2db      	uxtb	r3, r3
  } while(n);
   d5ef8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5efa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5efe:	d9ef      	bls.n	d5ee0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5f00:	4621      	mov	r1, r4
   d5f02:	f7ff ffb5 	bl	d5e70 <_ZN5Print5writeEPKc>
}
   d5f06:	b00b      	add	sp, #44	; 0x2c
   d5f08:	bd30      	pop	{r4, r5, pc}

000d5f0a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f0e:	b086      	sub	sp, #24
   d5f10:	af00      	add	r7, sp, #0
   d5f12:	4605      	mov	r5, r0
   d5f14:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5f16:	1d38      	adds	r0, r7, #4
   d5f18:	2114      	movs	r1, #20
{
   d5f1a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5f1c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5f1e:	f7ff fdbd 	bl	d5a9c <vsnprintf>

    if (n<bufsize)
   d5f22:	2813      	cmp	r0, #19
   d5f24:	d80e      	bhi.n	d5f44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5f26:	1d39      	adds	r1, r7, #4
   d5f28:	4628      	mov	r0, r5
   d5f2a:	f7ff ffa1 	bl	d5e70 <_ZN5Print5writeEPKc>
   d5f2e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5f30:	b11e      	cbz	r6, d5f3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5f32:	4628      	mov	r0, r5
   d5f34:	f7ff ffb5 	bl	d5ea2 <_ZN5Print7printlnEv>
   d5f38:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	3718      	adds	r7, #24
   d5f3e:	46bd      	mov	sp, r7
   d5f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5f44:	f100 0308 	add.w	r3, r0, #8
   d5f48:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5f4c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5f4e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5f52:	4622      	mov	r2, r4
   d5f54:	1c41      	adds	r1, r0, #1
   d5f56:	683b      	ldr	r3, [r7, #0]
   d5f58:	4668      	mov	r0, sp
   d5f5a:	f7ff fd9f 	bl	d5a9c <vsnprintf>
  return write(str);
   d5f5e:	4669      	mov	r1, sp
   d5f60:	4628      	mov	r0, r5
   d5f62:	f7ff ff85 	bl	d5e70 <_ZN5Print5writeEPKc>
   d5f66:	4604      	mov	r4, r0
   d5f68:	46c5      	mov	sp, r8
   d5f6a:	e7e1      	b.n	d5f30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5f6c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f6c:	2300      	movs	r3, #0
   d5f6e:	6840      	ldr	r0, [r0, #4]
   d5f70:	461a      	mov	r2, r3
   d5f72:	4619      	mov	r1, r3
   d5f74:	f7ff bd2a 	b.w	d59cc <network_on>

000d5f78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5f78:	4b01      	ldr	r3, [pc, #4]	; (d5f80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f7a:	4a02      	ldr	r2, [pc, #8]	; (d5f84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5f7e:	4770      	bx	lr
   d5f80:	2003e664 	.word	0x2003e664
   d5f84:	000d8144 	.word	0x000d8144

000d5f88 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5f88:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5f8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d5f94:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5f96:	d411      	bmi.n	d5fbc <_ZN9TimeClass4zoneEf+0x34>
   d5f98:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5f9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5fa4:	dc0a      	bgt.n	d5fbc <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5fa6:	eddf 7a06 	vldr	s15, [pc, #24]	; d5fc0 <_ZN9TimeClass4zoneEf+0x38>
   d5faa:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5fae:	ee17 0a90 	vmov	r0, s15
   d5fb2:	f001 fc67 	bl	d7884 <__aeabi_f2lz>
   d5fb6:	4b03      	ldr	r3, [pc, #12]	; (d5fc4 <_ZN9TimeClass4zoneEf+0x3c>)
   d5fb8:	e9c3 0100 	strd	r0, r1, [r3]
}
   d5fbc:	bd08      	pop	{r3, pc}
   d5fbe:	bf00      	nop
   d5fc0:	45610000 	.word	0x45610000
   d5fc4:	2003e670 	.word	0x2003e670

000d5fc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5fc8:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5fce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5fd0:	4770      	bx	lr
   d5fd2:	bf00      	nop
   d5fd4:	2003e42c 	.word	0x2003e42c
   d5fd8:	2003e668 	.word	0x2003e668

000d5fdc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5fdc:	2100      	movs	r1, #0
   d5fde:	f7ff bcb9 	b.w	d5954 <system_delay_ms>

000d5fe2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5fe2:	b510      	push	{r4, lr}
   d5fe4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fe6:	f7ff ff10 	bl	d5e0a <_ZNSt14_Function_baseD1Ev>
   d5fea:	4620      	mov	r0, r4
   d5fec:	bd10      	pop	{r4, pc}
	...

000d5ff0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ff0:	4803      	ldr	r0, [pc, #12]	; (d6000 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ff2:	4a04      	ldr	r2, [pc, #16]	; (d6004 <_GLOBAL__sub_I_RGB+0x14>)
   d5ff4:	4904      	ldr	r1, [pc, #16]	; (d6008 <_GLOBAL__sub_I_RGB+0x18>)
   d5ff6:	2300      	movs	r3, #0
   d5ff8:	6083      	str	r3, [r0, #8]
   d5ffa:	f000 bf39 	b.w	d6e70 <__aeabi_atexit>
   d5ffe:	bf00      	nop
   d6000:	2003e678 	.word	0x2003e678
   d6004:	2003e498 	.word	0x2003e498
   d6008:	000d5fe3 	.word	0x000d5fe3

000d600c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d600c:	4b01      	ldr	r3, [pc, #4]	; (d6014 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d600e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6010:	4770      	bx	lr
   d6012:	bf00      	nop
   d6014:	2003e430 	.word	0x2003e430

000d6018 <serialEventRun>:
{
   d6018:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d601a:	4b0b      	ldr	r3, [pc, #44]	; (d6048 <serialEventRun+0x30>)
   d601c:	b143      	cbz	r3, d6030 <serialEventRun+0x18>
   d601e:	f000 f971 	bl	d6304 <_Z16_fetch_usbserialv>
   d6022:	6803      	ldr	r3, [r0, #0]
   d6024:	691b      	ldr	r3, [r3, #16]
   d6026:	4798      	blx	r3
   d6028:	2800      	cmp	r0, #0
   d602a:	dd01      	ble.n	d6030 <serialEventRun+0x18>
        serialEvent();
   d602c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6030:	4b06      	ldr	r3, [pc, #24]	; (d604c <serialEventRun+0x34>)
   d6032:	b143      	cbz	r3, d6046 <serialEventRun+0x2e>
   d6034:	f000 f9ec 	bl	d6410 <_Z22__fetch_global_Serial1v>
   d6038:	6803      	ldr	r3, [r0, #0]
   d603a:	691b      	ldr	r3, [r3, #16]
   d603c:	4798      	blx	r3
   d603e:	2800      	cmp	r0, #0
   d6040:	dd01      	ble.n	d6046 <serialEventRun+0x2e>
        serialEvent1();
   d6042:	f3af 8000 	nop.w
}
   d6046:	bd08      	pop	{r3, pc}
	...

000d6050 <_post_loop>:
{
   d6050:	b508      	push	{r3, lr}
	serialEventRun();
   d6052:	f7ff ffe1 	bl	d6018 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6056:	f7ff fad5 	bl	d5604 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d605a:	4b01      	ldr	r3, [pc, #4]	; (d6060 <_post_loop+0x10>)
   d605c:	6018      	str	r0, [r3, #0]
}
   d605e:	bd08      	pop	{r3, pc}
   d6060:	2003e7d8 	.word	0x2003e7d8

000d6064 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6064:	4802      	ldr	r0, [pc, #8]	; (d6070 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6066:	4a03      	ldr	r2, [pc, #12]	; (d6074 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6068:	4903      	ldr	r1, [pc, #12]	; (d6078 <_Z33system_initialize_user_backup_ramv+0x14>)
   d606a:	1a12      	subs	r2, r2, r0
   d606c:	f001 bc4c 	b.w	d7908 <memcpy>
   d6070:	2003f400 	.word	0x2003f400
   d6074:	2003f404 	.word	0x2003f404
   d6078:	000d8420 	.word	0x000d8420

000d607c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d607c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d607e:	2300      	movs	r3, #0
   d6080:	9300      	str	r3, [sp, #0]
   d6082:	461a      	mov	r2, r3
   d6084:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6088:	f7ff fc76 	bl	d5978 <system_ctrl_set_result>
}
   d608c:	b003      	add	sp, #12
   d608e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6094 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6094:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6096:	8843      	ldrh	r3, [r0, #2]
   d6098:	2b0a      	cmp	r3, #10
   d609a:	d008      	beq.n	d60ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d609c:	2b50      	cmp	r3, #80	; 0x50
   d609e:	d10b      	bne.n	d60b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d60a0:	4b09      	ldr	r3, [pc, #36]	; (d60c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d60a2:	681b      	ldr	r3, [r3, #0]
   d60a4:	b14b      	cbz	r3, d60ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d60a6:	b003      	add	sp, #12
   d60a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d60ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d60ae:	f7ff ffe5 	bl	d607c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d60b2:	b003      	add	sp, #12
   d60b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60b8:	2300      	movs	r3, #0
   d60ba:	9300      	str	r3, [sp, #0]
   d60bc:	461a      	mov	r2, r3
   d60be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60c2:	f7ff fc59 	bl	d5978 <system_ctrl_set_result>
}
   d60c6:	e7f4      	b.n	d60b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d60c8:	2003e68c 	.word	0x2003e68c

000d60cc <module_user_init_hook>:
{
   d60cc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60ce:	4c12      	ldr	r4, [pc, #72]	; (d6118 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60d0:	4812      	ldr	r0, [pc, #72]	; (d611c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60d2:	4d13      	ldr	r5, [pc, #76]	; (d6120 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d60d4:	2100      	movs	r1, #0
   d60d6:	f7ff fcf1 	bl	d5abc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d60da:	6823      	ldr	r3, [r4, #0]
   d60dc:	42ab      	cmp	r3, r5
   d60de:	4b11      	ldr	r3, [pc, #68]	; (d6124 <module_user_init_hook+0x58>)
   d60e0:	bf0c      	ite	eq
   d60e2:	2201      	moveq	r2, #1
   d60e4:	2200      	movne	r2, #0
   d60e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d60e8:	d002      	beq.n	d60f0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d60ea:	f7ff ffbb 	bl	d6064 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d60ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d60f0:	f7ff fa78 	bl	d55e4 <HAL_RNG_GetRandomNumber>
   d60f4:	4604      	mov	r4, r0
    srand(seed);
   d60f6:	f001 fc1d 	bl	d7934 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d60fa:	4b0b      	ldr	r3, [pc, #44]	; (d6128 <module_user_init_hook+0x5c>)
   d60fc:	b113      	cbz	r3, d6104 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d60fe:	4620      	mov	r0, r4
   d6100:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6104:	2100      	movs	r1, #0
   d6106:	4808      	ldr	r0, [pc, #32]	; (d6128 <module_user_init_hook+0x5c>)
   d6108:	f7ff fcb0 	bl	d5a6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6110:	4806      	ldr	r0, [pc, #24]	; (d612c <module_user_init_hook+0x60>)
   d6112:	2100      	movs	r1, #0
   d6114:	f7ff bc26 	b.w	d5964 <system_ctrl_set_app_request_handler>
   d6118:	2003f400 	.word	0x2003f400
   d611c:	000d600d 	.word	0x000d600d
   d6120:	9a271c1e 	.word	0x9a271c1e
   d6124:	2003e688 	.word	0x2003e688
   d6128:	00000000 	.word	0x00000000
   d612c:	000d6095 	.word	0x000d6095

000d6130 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6130:	4770      	bx	lr

000d6132 <_ZN9IPAddressD0Ev>:
   d6132:	b510      	push	{r4, lr}
   d6134:	2118      	movs	r1, #24
   d6136:	4604      	mov	r4, r0
   d6138:	f000 fe9f 	bl	d6e7a <_ZdlPvj>
   d613c:	4620      	mov	r0, r4
   d613e:	bd10      	pop	{r4, pc}

000d6140 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6140:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6142:	7d03      	ldrb	r3, [r0, #20]
   d6144:	2b06      	cmp	r3, #6
{
   d6146:	b08d      	sub	sp, #52	; 0x34
   d6148:	460e      	mov	r6, r1
   d614a:	f100 0704 	add.w	r7, r0, #4
   d614e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6152:	d012      	beq.n	d617a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6154:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6158:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d615c:	220a      	movs	r2, #10
   d615e:	4630      	mov	r0, r6
   d6160:	f7ff feb5 	bl	d5ece <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6164:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6166:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6168:	d019      	beq.n	d619e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d616a:	2c00      	cmp	r4, #0
   d616c:	d0f4      	beq.n	d6158 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d616e:	212e      	movs	r1, #46	; 0x2e
   d6170:	4630      	mov	r0, r6
   d6172:	f7ff fe93 	bl	d5e9c <_ZN5Print5printEc>
   d6176:	4404      	add	r4, r0
   d6178:	e7ee      	b.n	d6158 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d617a:	232f      	movs	r3, #47	; 0x2f
   d617c:	466a      	mov	r2, sp
   d617e:	4639      	mov	r1, r7
   d6180:	200a      	movs	r0, #10
		buf[0] = 0;
   d6182:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6186:	f7ff fa55 	bl	d5634 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d618a:	4668      	mov	r0, sp
   d618c:	f001 fc08 	bl	d79a0 <strlen>
   d6190:	6833      	ldr	r3, [r6, #0]
   d6192:	4602      	mov	r2, r0
   d6194:	68db      	ldr	r3, [r3, #12]
   d6196:	4669      	mov	r1, sp
   d6198:	4630      	mov	r0, r6
   d619a:	4798      	blx	r3
   d619c:	4604      	mov	r4, r0
    }
    return n;
}
   d619e:	4620      	mov	r0, r4
   d61a0:	b00d      	add	sp, #52	; 0x34
   d61a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d61a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d61a4:	b510      	push	{r4, lr}
   d61a6:	4b05      	ldr	r3, [pc, #20]	; (d61bc <_ZN9IPAddressC1Ev+0x18>)
   d61a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d61aa:	2211      	movs	r2, #17
   d61ac:	f840 3b04 	str.w	r3, [r0], #4
   d61b0:	2100      	movs	r1, #0
   d61b2:	f001 fbb7 	bl	d7924 <memset>
}
   d61b6:	4620      	mov	r0, r4
   d61b8:	bd10      	pop	{r4, pc}
   d61ba:	bf00      	nop
   d61bc:	000d816c 	.word	0x000d816c

000d61c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d61c0:	4603      	mov	r3, r0
   d61c2:	4a07      	ldr	r2, [pc, #28]	; (d61e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d61c4:	b510      	push	{r4, lr}
   d61c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d61ca:	f101 0210 	add.w	r2, r1, #16
   d61ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d61d2:	f843 4b04 	str.w	r4, [r3], #4
   d61d6:	4291      	cmp	r1, r2
   d61d8:	d1f9      	bne.n	d61ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d61da:	780a      	ldrb	r2, [r1, #0]
   d61dc:	701a      	strb	r2, [r3, #0]
}
   d61de:	bd10      	pop	{r4, pc}
   d61e0:	000d816c 	.word	0x000d816c

000d61e4 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d61e4:	7d03      	ldrb	r3, [r0, #20]
   d61e6:	2b04      	cmp	r3, #4
   d61e8:	d104      	bne.n	d61f4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d61ea:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61ec:	3800      	subs	r0, #0
   d61ee:	bf18      	it	ne
   d61f0:	2001      	movne	r0, #1
   d61f2:	4770      	bx	lr
    } else if (version() == 6) {
   d61f4:	2b06      	cmp	r3, #6
   d61f6:	d107      	bne.n	d6208 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d61f8:	6843      	ldr	r3, [r0, #4]
   d61fa:	b93b      	cbnz	r3, d620c <_ZNK9IPAddresscvbEv+0x28>
   d61fc:	6883      	ldr	r3, [r0, #8]
   d61fe:	b92b      	cbnz	r3, d620c <_ZNK9IPAddresscvbEv+0x28>
   d6200:	68c3      	ldr	r3, [r0, #12]
   d6202:	b91b      	cbnz	r3, d620c <_ZNK9IPAddresscvbEv+0x28>
   d6204:	6900      	ldr	r0, [r0, #16]
   d6206:	e7f1      	b.n	d61ec <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6208:	2000      	movs	r0, #0
   d620a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d620c:	2001      	movs	r0, #1
}
   d620e:	4770      	bx	lr

000d6210 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6210:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6212:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6216:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d621a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d621e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6222:	2304      	movs	r3, #4
   d6224:	6041      	str	r1, [r0, #4]
   d6226:	7503      	strb	r3, [r0, #20]
}
   d6228:	bd10      	pop	{r4, pc}
	...

000d622c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d622c:	b513      	push	{r0, r1, r4, lr}
   d622e:	4b05      	ldr	r3, [pc, #20]	; (d6244 <_ZN9IPAddressC1EPKh+0x18>)
   d6230:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6232:	78cb      	ldrb	r3, [r1, #3]
   d6234:	9300      	str	r3, [sp, #0]
   d6236:	788b      	ldrb	r3, [r1, #2]
   d6238:	784a      	ldrb	r2, [r1, #1]
   d623a:	7809      	ldrb	r1, [r1, #0]
   d623c:	f7ff ffe8 	bl	d6210 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6240:	b002      	add	sp, #8
   d6242:	bd10      	pop	{r4, pc}
   d6244:	000d816c 	.word	0x000d816c

000d6248 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6248:	7441      	strb	r1, [r0, #17]
}
   d624a:	4770      	bx	lr

000d624c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d624c:	4770      	bx	lr

000d624e <_ZN9USBSerial4readEv>:
{
   d624e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6250:	2100      	movs	r1, #0
   d6252:	7c00      	ldrb	r0, [r0, #16]
   d6254:	f7ff fb4e 	bl	d58f4 <HAL_USB_USART_Receive_Data>
}
   d6258:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d625c:	bd08      	pop	{r3, pc}

000d625e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d625e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6260:	2101      	movs	r1, #1
   d6262:	7c00      	ldrb	r0, [r0, #16]
   d6264:	f7ff fb46 	bl	d58f4 <HAL_USB_USART_Receive_Data>
}
   d6268:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d626c:	bd08      	pop	{r3, pc}

000d626e <_ZN9USBSerial17availableForWriteEv>:
{
   d626e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6270:	7c00      	ldrb	r0, [r0, #16]
   d6272:	f7ff fb37 	bl	d58e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d627a:	bd08      	pop	{r3, pc}

000d627c <_ZN9USBSerial9availableEv>:
{
   d627c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d627e:	7c00      	ldrb	r0, [r0, #16]
   d6280:	f7ff fb28 	bl	d58d4 <HAL_USB_USART_Available_Data>
}
   d6284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6288:	bd08      	pop	{r3, pc}

000d628a <_ZN9USBSerial5writeEh>:
{
   d628a:	b513      	push	{r0, r1, r4, lr}
   d628c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d628e:	7c00      	ldrb	r0, [r0, #16]
{
   d6290:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6292:	f7ff fb27 	bl	d58e4 <HAL_USB_USART_Available_Data_For_Write>
   d6296:	2800      	cmp	r0, #0
   d6298:	9901      	ldr	r1, [sp, #4]
   d629a:	dc01      	bgt.n	d62a0 <_ZN9USBSerial5writeEh+0x16>
   d629c:	7c60      	ldrb	r0, [r4, #17]
   d629e:	b120      	cbz	r0, d62aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d62a0:	7c20      	ldrb	r0, [r4, #16]
   d62a2:	f7ff fb2f 	bl	d5904 <HAL_USB_USART_Send_Data>
   d62a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d62aa:	b002      	add	sp, #8
   d62ac:	bd10      	pop	{r4, pc}

000d62ae <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d62ae:	7c00      	ldrb	r0, [r0, #16]
   d62b0:	f7ff bb30 	b.w	d5914 <HAL_USB_USART_Flush_Data>

000d62b4 <_ZN9USBSerialD0Ev>:
   d62b4:	b510      	push	{r4, lr}
   d62b6:	2114      	movs	r1, #20
   d62b8:	4604      	mov	r4, r0
   d62ba:	f000 fdde 	bl	d6e7a <_ZdlPvj>
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}
	...

000d62c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d62c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d62c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d62ca:	4604      	mov	r4, r0
   d62cc:	4608      	mov	r0, r1
   d62ce:	2100      	movs	r1, #0
   d62d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d62d4:	4b04      	ldr	r3, [pc, #16]	; (d62e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d62d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d62d8:	2301      	movs	r3, #1
  _serial = serial;
   d62da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d62de:	4611      	mov	r1, r2
   d62e0:	f7ff fae8 	bl	d58b4 <HAL_USB_USART_Init>
}
   d62e4:	4620      	mov	r0, r4
   d62e6:	bd10      	pop	{r4, pc}
   d62e8:	000d8180 	.word	0x000d8180

000d62ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d62ec:	7c00      	ldrb	r0, [r0, #16]
   d62ee:	2200      	movs	r2, #0
   d62f0:	f7ff bae8 	b.w	d58c4 <HAL_USB_USART_Begin>

000d62f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d62f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d62f6:	2214      	movs	r2, #20
{
   d62f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d62fa:	2100      	movs	r1, #0
   d62fc:	f001 fb12 	bl	d7924 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6300:	4620      	mov	r0, r4
   d6302:	bd10      	pop	{r4, pc}

000d6304 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6304:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6306:	4c10      	ldr	r4, [pc, #64]	; (d6348 <_Z16_fetch_usbserialv+0x44>)
{
   d6308:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d630a:	a803      	add	r0, sp, #12
   d630c:	f7ff fff2 	bl	d62f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6310:	7821      	ldrb	r1, [r4, #0]
   d6312:	f3bf 8f5b 	dmb	ish
   d6316:	f011 0101 	ands.w	r1, r1, #1
   d631a:	d111      	bne.n	d6340 <_Z16_fetch_usbserialv+0x3c>
   d631c:	4620      	mov	r0, r4
   d631e:	9101      	str	r1, [sp, #4]
   d6320:	f7fd fec8 	bl	d40b4 <__cxa_guard_acquire>
   d6324:	9901      	ldr	r1, [sp, #4]
   d6326:	b158      	cbz	r0, d6340 <_Z16_fetch_usbserialv+0x3c>
   d6328:	aa03      	add	r2, sp, #12
   d632a:	4808      	ldr	r0, [pc, #32]	; (d634c <_Z16_fetch_usbserialv+0x48>)
   d632c:	f7ff ffca 	bl	d62c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6330:	4620      	mov	r0, r4
   d6332:	f7fd fec4 	bl	d40be <__cxa_guard_release>
   d6336:	4a06      	ldr	r2, [pc, #24]	; (d6350 <_Z16_fetch_usbserialv+0x4c>)
   d6338:	4906      	ldr	r1, [pc, #24]	; (d6354 <_Z16_fetch_usbserialv+0x50>)
   d633a:	4804      	ldr	r0, [pc, #16]	; (d634c <_Z16_fetch_usbserialv+0x48>)
   d633c:	f000 fd98 	bl	d6e70 <__aeabi_atexit>
	return _usbserial;
}
   d6340:	4802      	ldr	r0, [pc, #8]	; (d634c <_Z16_fetch_usbserialv+0x48>)
   d6342:	b008      	add	sp, #32
   d6344:	bd10      	pop	{r4, pc}
   d6346:	bf00      	nop
   d6348:	2003e690 	.word	0x2003e690
   d634c:	2003e694 	.word	0x2003e694
   d6350:	2003e498 	.word	0x2003e498
   d6354:	000d624d 	.word	0x000d624d

000d6358 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6358:	4770      	bx	lr

000d635a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d635a:	7441      	strb	r1, [r0, #17]
}
   d635c:	4770      	bx	lr

000d635e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d635e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6360:	7c00      	ldrb	r0, [r0, #16]
   d6362:	f7ff f9b7 	bl	d56d4 <hal_usart_available_data_for_write>
}
   d6366:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d636a:	bd08      	pop	{r3, pc}

000d636c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d636c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d636e:	7c00      	ldrb	r0, [r0, #16]
   d6370:	f7ff f988 	bl	d5684 <hal_usart_available>
}
   d6374:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6378:	bd08      	pop	{r3, pc}

000d637a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d637a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d637c:	7c00      	ldrb	r0, [r0, #16]
   d637e:	f7ff f991 	bl	d56a4 <hal_usart_peek>
}
   d6382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6386:	bd08      	pop	{r3, pc}

000d6388 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6388:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d638a:	7c00      	ldrb	r0, [r0, #16]
   d638c:	f7ff f982 	bl	d5694 <hal_usart_read>
}
   d6390:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6394:	bd08      	pop	{r3, pc}

000d6396 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6396:	7c00      	ldrb	r0, [r0, #16]
   d6398:	f7ff b98c 	b.w	d56b4 <hal_usart_flush>

000d639c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d639e:	7c45      	ldrb	r5, [r0, #17]
{
   d63a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d63a2:	b12d      	cbz	r5, d63b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d63a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d63a6:	b003      	add	sp, #12
   d63a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d63ac:	f7ff b962 	b.w	d5674 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d63b0:	7c00      	ldrb	r0, [r0, #16]
   d63b2:	9101      	str	r1, [sp, #4]
   d63b4:	f7ff f98e 	bl	d56d4 <hal_usart_available_data_for_write>
   d63b8:	2800      	cmp	r0, #0
   d63ba:	9901      	ldr	r1, [sp, #4]
   d63bc:	dcf2      	bgt.n	d63a4 <_ZN11USARTSerial5writeEh+0x8>
}
   d63be:	4628      	mov	r0, r5
   d63c0:	b003      	add	sp, #12
   d63c2:	bd30      	pop	{r4, r5, pc}

000d63c4 <_ZN11USARTSerialD0Ev>:
   d63c4:	b510      	push	{r4, lr}
   d63c6:	2114      	movs	r1, #20
   d63c8:	4604      	mov	r4, r0
   d63ca:	f000 fd56 	bl	d6e7a <_ZdlPvj>
   d63ce:	4620      	mov	r0, r4
   d63d0:	bd10      	pop	{r4, pc}
	...

000d63d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d63d4:	b510      	push	{r4, lr}
   d63d6:	f04f 0c00 	mov.w	ip, #0
   d63da:	4604      	mov	r4, r0
   d63dc:	4608      	mov	r0, r1
   d63de:	4611      	mov	r1, r2
   d63e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63e4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d63e8:	4a04      	ldr	r2, [pc, #16]	; (d63fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d63ea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d63ec:	2201      	movs	r2, #1
  _serial = serial;
   d63ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d63f0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d63f2:	461a      	mov	r2, r3
   d63f4:	f7ff f936 	bl	d5664 <hal_usart_init>
}
   d63f8:	4620      	mov	r0, r4
   d63fa:	bd10      	pop	{r4, pc}
   d63fc:	000d81b0 	.word	0x000d81b0

000d6400 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6400:	7c00      	ldrb	r0, [r0, #16]
   d6402:	2300      	movs	r3, #0
   d6404:	f7ff b96e 	b.w	d56e4 <hal_usart_begin_config>

000d6408 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6408:	2200      	movs	r2, #0
   d640a:	f7ff bff9 	b.w	d6400 <_ZN11USARTSerial5beginEmm>
	...

000d6410 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6410:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6412:	4c0e      	ldr	r4, [pc, #56]	; (d644c <_Z22__fetch_global_Serial1v+0x3c>)
   d6414:	7821      	ldrb	r1, [r4, #0]
   d6416:	f3bf 8f5b 	dmb	ish
   d641a:	f011 0101 	ands.w	r1, r1, #1
   d641e:	d112      	bne.n	d6446 <_Z22__fetch_global_Serial1v+0x36>
   d6420:	4620      	mov	r0, r4
   d6422:	9101      	str	r1, [sp, #4]
   d6424:	f7fd fe46 	bl	d40b4 <__cxa_guard_acquire>
   d6428:	9901      	ldr	r1, [sp, #4]
   d642a:	b160      	cbz	r0, d6446 <_Z22__fetch_global_Serial1v+0x36>
   d642c:	4a08      	ldr	r2, [pc, #32]	; (d6450 <_Z22__fetch_global_Serial1v+0x40>)
   d642e:	4b09      	ldr	r3, [pc, #36]	; (d6454 <_Z22__fetch_global_Serial1v+0x44>)
   d6430:	4809      	ldr	r0, [pc, #36]	; (d6458 <_Z22__fetch_global_Serial1v+0x48>)
   d6432:	f7ff ffcf 	bl	d63d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6436:	4620      	mov	r0, r4
   d6438:	f7fd fe41 	bl	d40be <__cxa_guard_release>
   d643c:	4a07      	ldr	r2, [pc, #28]	; (d645c <_Z22__fetch_global_Serial1v+0x4c>)
   d643e:	4908      	ldr	r1, [pc, #32]	; (d6460 <_Z22__fetch_global_Serial1v+0x50>)
   d6440:	4805      	ldr	r0, [pc, #20]	; (d6458 <_Z22__fetch_global_Serial1v+0x48>)
   d6442:	f000 fd15 	bl	d6e70 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6446:	4804      	ldr	r0, [pc, #16]	; (d6458 <_Z22__fetch_global_Serial1v+0x48>)
   d6448:	b002      	add	sp, #8
   d644a:	bd10      	pop	{r4, pc}
   d644c:	2003e6a8 	.word	0x2003e6a8
   d6450:	2003e6ac 	.word	0x2003e6ac
   d6454:	2003e730 	.word	0x2003e730
   d6458:	2003e7b4 	.word	0x2003e7b4
   d645c:	2003e498 	.word	0x2003e498
   d6460:	000d6359 	.word	0x000d6359

000d6464 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6464:	4770      	bx	lr

000d6466 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6468:	4606      	mov	r6, r0
   d646a:	4615      	mov	r5, r2
   d646c:	460c      	mov	r4, r1
   d646e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6470:	42bc      	cmp	r4, r7
   d6472:	d006      	beq.n	d6482 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6474:	6833      	ldr	r3, [r6, #0]
   d6476:	f814 1b01 	ldrb.w	r1, [r4], #1
   d647a:	689b      	ldr	r3, [r3, #8]
   d647c:	4630      	mov	r0, r6
   d647e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6480:	e7f6      	b.n	d6470 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6482:	4628      	mov	r0, r5
   d6484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6486 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6486:	7c00      	ldrb	r0, [r0, #16]
   d6488:	2200      	movs	r2, #0
   d648a:	f7ff b94b 	b.w	d5724 <hal_i2c_write>

000d648e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d648e:	7c00      	ldrb	r0, [r0, #16]
   d6490:	2100      	movs	r1, #0
   d6492:	f7ff b94f 	b.w	d5734 <hal_i2c_available>

000d6496 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6496:	7c00      	ldrb	r0, [r0, #16]
   d6498:	2100      	movs	r1, #0
   d649a:	f7ff b953 	b.w	d5744 <hal_i2c_read>

000d649e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d649e:	7c00      	ldrb	r0, [r0, #16]
   d64a0:	2100      	movs	r1, #0
   d64a2:	f7ff b957 	b.w	d5754 <hal_i2c_peek>

000d64a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d64a6:	7c00      	ldrb	r0, [r0, #16]
   d64a8:	2100      	movs	r1, #0
   d64aa:	f7ff b95b 	b.w	d5764 <hal_i2c_flush>

000d64ae <_ZN7TwoWireD0Ev>:
   d64ae:	b510      	push	{r4, lr}
   d64b0:	2114      	movs	r1, #20
   d64b2:	4604      	mov	r4, r0
   d64b4:	f000 fce1 	bl	d6e7a <_ZdlPvj>
   d64b8:	4620      	mov	r0, r4
   d64ba:	bd10      	pop	{r4, pc}

000d64bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d64bc:	b510      	push	{r4, lr}
   d64be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64c2:	4604      	mov	r4, r0
   d64c4:	4608      	mov	r0, r1
   d64c6:	2100      	movs	r1, #0
   d64c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d64cc:	4b03      	ldr	r3, [pc, #12]	; (d64dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d64ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d64d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d64d2:	4611      	mov	r1, r2
   d64d4:	f7ff f956 	bl	d5784 <hal_i2c_init>
}
   d64d8:	4620      	mov	r0, r4
   d64da:	bd10      	pop	{r4, pc}
   d64dc:	000d81e0 	.word	0x000d81e0

000d64e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d64e0:	2300      	movs	r3, #0
   d64e2:	7c00      	ldrb	r0, [r0, #16]
   d64e4:	461a      	mov	r2, r3
   d64e6:	4619      	mov	r1, r3
   d64e8:	f7ff b904 	b.w	d56f4 <hal_i2c_begin>

000d64ec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d64ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d64ee:	2200      	movs	r2, #0
   d64f0:	2314      	movs	r3, #20
   d64f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d64f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d64fa:	780b      	ldrb	r3, [r1, #0]
   d64fc:	f88d 3008 	strb.w	r3, [sp, #8]
   d6500:	684b      	ldr	r3, [r1, #4]
   d6502:	9303      	str	r3, [sp, #12]
   d6504:	68cb      	ldr	r3, [r1, #12]
   d6506:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6508:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d650a:	7a0b      	ldrb	r3, [r1, #8]
   d650c:	9305      	str	r3, [sp, #20]
   d650e:	a901      	add	r1, sp, #4
   d6510:	f7ff f940 	bl	d5794 <hal_i2c_request_ex>
}
   d6514:	b007      	add	sp, #28
   d6516:	f85d fb04 	ldr.w	pc, [sp], #4

000d651a <_ZN7TwoWire11requestFromEhjh>:
{
   d651a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d651c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d651e:	f88d 1000 	strb.w	r1, [sp]
   d6522:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6526:	9103      	str	r1, [sp, #12]
   d6528:	bf18      	it	ne
   d652a:	2301      	movne	r3, #1
   d652c:	4669      	mov	r1, sp
    size_ = size;
   d652e:	9201      	str	r2, [sp, #4]
   d6530:	f88d 3008 	strb.w	r3, [sp, #8]
   d6534:	f7ff ffda 	bl	d64ec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6538:	b005      	add	sp, #20
   d653a:	f85d fb04 	ldr.w	pc, [sp], #4

000d653e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d653e:	2301      	movs	r3, #1
   d6540:	f7ff bfeb 	b.w	d651a <_ZN7TwoWire11requestFromEhjh>

000d6544 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6544:	7c00      	ldrb	r0, [r0, #16]
   d6546:	2200      	movs	r2, #0
   d6548:	f7ff b8dc 	b.w	d5704 <hal_i2c_begin_transmission>

000d654c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d654c:	b2c9      	uxtb	r1, r1
   d654e:	f7ff bff9 	b.w	d6544 <_ZN7TwoWire17beginTransmissionEh>

000d6552 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6552:	7c00      	ldrb	r0, [r0, #16]
   d6554:	2200      	movs	r2, #0
   d6556:	f7ff b8dd 	b.w	d5714 <hal_i2c_end_transmission>

000d655a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d655a:	2101      	movs	r1, #1
   d655c:	f7ff bff9 	b.w	d6552 <_ZN7TwoWire15endTransmissionEh>

000d6560 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6560:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6562:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6564:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6568:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d656a:	2201      	movs	r2, #1
   d656c:	f04f 33ff 	mov.w	r3, #4294967295
   d6570:	f10d 0107 	add.w	r1, sp, #7
   d6574:	47a0      	blx	r4
}
   d6576:	b002      	add	sp, #8
   d6578:	bd10      	pop	{r4, pc}

000d657a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d657a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d657c:	6803      	ldr	r3, [r0, #0]
   d657e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6580:	f04f 33ff 	mov.w	r3, #4294967295
   d6584:	46a4      	mov	ip, r4
}
   d6586:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d658a:	4760      	bx	ip

000d658c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d658c:	b513      	push	{r0, r1, r4, lr}
   d658e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6590:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6592:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6596:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6598:	f10d 0107 	add.w	r1, sp, #7
   d659c:	2201      	movs	r2, #1
   d659e:	47a0      	blx	r4
}
   d65a0:	b002      	add	sp, #8
   d65a2:	bd10      	pop	{r4, pc}

000d65a4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d65a4:	4770      	bx	lr

000d65a6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d65a6:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d65a8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d65ae:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d65b0:	da10      	bge.n	d65d4 <_ZN9TCPClient9connectedEv+0x2e>
   d65b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d65b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d65ba:	429a      	cmp	r2, r3
   d65bc:	d10a      	bne.n	d65d4 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d65be:	6803      	ldr	r3, [r0, #0]
   d65c0:	691b      	ldr	r3, [r3, #16]
   d65c2:	4798      	blx	r3
        if (!rv) {
   d65c4:	4604      	mov	r4, r0
   d65c6:	b928      	cbnz	r0, d65d4 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d65c8:	682b      	ldr	r3, [r5, #0]
   d65ca:	4628      	mov	r0, r5
   d65cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65ce:	4798      	blx	r3
        rv = available();
   d65d0:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d65d2:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d65d4:	2001      	movs	r0, #1
   d65d6:	e7fc      	b.n	d65d2 <_ZN9TCPClient9connectedEv+0x2c>

000d65d8 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d65d8:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d65da:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d65dc:	43c0      	mvns	r0, r0
   d65de:	0fc0      	lsrs	r0, r0, #31
   d65e0:	4770      	bx	lr

000d65e2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d65e2:	4770      	bx	lr

000d65e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d65e4:	4b06      	ldr	r3, [pc, #24]	; (d6600 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d65e6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d65e8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d65ea:	f100 040c 	add.w	r4, r0, #12
	    ||
   d65ee:	d005      	beq.n	d65fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d65f0:	4608      	mov	r0, r1
   d65f2:	f000 fc47 	bl	d6e84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d65f6:	2800      	cmp	r0, #0
	return nullptr;
   d65f8:	bf08      	it	eq
   d65fa:	2400      	moveq	r4, #0
      }
   d65fc:	4620      	mov	r0, r4
   d65fe:	bd10      	pop	{r4, pc}
   d6600:	000d813c 	.word	0x000d813c

000d6604 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6604:	b510      	push	{r4, lr}
   d6606:	21ac      	movs	r1, #172	; 0xac
   d6608:	4604      	mov	r4, r0
   d660a:	f000 fc36 	bl	d6e7a <_ZdlPvj>
   d660e:	4620      	mov	r0, r4
   d6610:	bd10      	pop	{r4, pc}

000d6612 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6612:	f7fd bd42 	b.w	d409a <_ZdlPv>

000d6616 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d661a:	f04f 0800 	mov.w	r8, #0
   d661e:	b086      	sub	sp, #24
   d6620:	461d      	mov	r5, r3
   d6622:	f8c0 8004 	str.w	r8, [r0, #4]
   d6626:	4604      	mov	r4, r0
   d6628:	460e      	mov	r6, r1
   d662a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d662c:	4641      	mov	r1, r8
   d662e:	2210      	movs	r2, #16
   d6630:	a802      	add	r0, sp, #8
   d6632:	f001 f977 	bl	d7924 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6636:	1c6b      	adds	r3, r5, #1
   d6638:	d009      	beq.n	d664e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d663a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d663e:	fbb5 f3f0 	udiv	r3, r5, r0
   d6642:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6646:	fb00 5313 	mls	r3, r0, r3, r5
   d664a:	4358      	muls	r0, r3
   d664c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d664e:	6960      	ldr	r0, [r4, #20]
   d6650:	2310      	movs	r3, #16
   d6652:	9300      	str	r3, [sp, #0]
   d6654:	6800      	ldr	r0, [r0, #0]
   d6656:	ab02      	add	r3, sp, #8
   d6658:	f241 0205 	movw	r2, #4101	; 0x1005
   d665c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6660:	f7ff f8a0 	bl	d57a4 <sock_setsockopt>
    if (ret < 0) {
   d6664:	2800      	cmp	r0, #0
   d6666:	da07      	bge.n	d6678 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6668:	f7ff fa20 	bl	d5aac <__errno>
   d666c:	6803      	ldr	r3, [r0, #0]
   d666e:	6063      	str	r3, [r4, #4]
        return 0;
   d6670:	2000      	movs	r0, #0
}
   d6672:	b006      	add	sp, #24
   d6674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6678:	6960      	ldr	r0, [r4, #20]
   d667a:	2300      	movs	r3, #0
   d667c:	6800      	ldr	r0, [r0, #0]
   d667e:	463a      	mov	r2, r7
   d6680:	4631      	mov	r1, r6
   d6682:	f7ff f8af 	bl	d57e4 <sock_send>
    if (ret < 0) {
   d6686:	1e03      	subs	r3, r0, #0
   d6688:	dbee      	blt.n	d6668 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d668a:	4618      	mov	r0, r3
   d668c:	e7f1      	b.n	d6672 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6690 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d6690:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6692:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6694:	4b05      	ldr	r3, [pc, #20]	; (d66ac <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6696:	4604      	mov	r4, r0
   d6698:	358c      	adds	r5, #140	; 0x8c
   d669a:	f844 3b04 	str.w	r3, [r4], #4
   d669e:	4606      	mov	r6, r0
   d66a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66a4:	682b      	ldr	r3, [r5, #0]
   d66a6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d66a8:	4630      	mov	r0, r6
   d66aa:	bd70      	pop	{r4, r5, r6, pc}
   d66ac:	000d816c 	.word	0x000d816c

000d66b0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d66b0:	b510      	push	{r4, lr}
   d66b2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66b4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66bc:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d66be:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66c0:	d005      	beq.n	d66ce <_ZN9TCPClient4peekEv+0x1e>
   d66c2:	6963      	ldr	r3, [r4, #20]
   d66c4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d66c8:	4413      	add	r3, r2
   d66ca:	7918      	ldrb	r0, [r3, #4]
}
   d66cc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d66ce:	6803      	ldr	r3, [r0, #0]
   d66d0:	691b      	ldr	r3, [r3, #16]
   d66d2:	4798      	blx	r3
   d66d4:	2800      	cmp	r0, #0
   d66d6:	d1f4      	bne.n	d66c2 <_ZN9TCPClient4peekEv+0x12>
   d66d8:	f04f 30ff 	mov.w	r0, #4294967295
   d66dc:	e7f6      	b.n	d66cc <_ZN9TCPClient4peekEv+0x1c>

000d66de <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d66de:	b510      	push	{r4, lr}
   d66e0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d66e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d66e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d66ea:	429a      	cmp	r2, r3
int TCPClient::read() {
   d66ec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d66ee:	d008      	beq.n	d6702 <_ZN9TCPClient4readEv+0x24>
   d66f0:	6963      	ldr	r3, [r4, #20]
   d66f2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d66f6:	1c51      	adds	r1, r2, #1
   d66f8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d66fc:	4413      	add	r3, r2
   d66fe:	7918      	ldrb	r0, [r3, #4]
}
   d6700:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6702:	6803      	ldr	r3, [r0, #0]
   d6704:	691b      	ldr	r3, [r3, #16]
   d6706:	4798      	blx	r3
   d6708:	2800      	cmp	r0, #0
   d670a:	d1f1      	bne.n	d66f0 <_ZN9TCPClient4readEv+0x12>
   d670c:	f04f 30ff 	mov.w	r0, #4294967295
   d6710:	e7f6      	b.n	d6700 <_ZN9TCPClient4readEv+0x22>

000d6712 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6714:	6943      	ldr	r3, [r0, #20]
   d6716:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6718:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d671c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6720:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6722:	4605      	mov	r5, r0
   d6724:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6726:	d016      	beq.n	d6756 <_ZN9TCPClient4readEPhj+0x44>
   d6728:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d672a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d672e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6732:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6734:	42bc      	cmp	r4, r7
   d6736:	bf28      	it	cs
   d6738:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d673a:	3304      	adds	r3, #4
   d673c:	4622      	mov	r2, r4
   d673e:	4419      	add	r1, r3
   d6740:	4630      	mov	r0, r6
   d6742:	f001 f8e1 	bl	d7908 <memcpy>
   d6746:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6748:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d674c:	4423      	add	r3, r4
   d674e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6752:	4620      	mov	r0, r4
   d6754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6756:	6803      	ldr	r3, [r0, #0]
   d6758:	691b      	ldr	r3, [r3, #16]
   d675a:	4798      	blx	r3
   d675c:	2800      	cmp	r0, #0
   d675e:	d1e3      	bne.n	d6728 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6760:	f04f 34ff 	mov.w	r4, #4294967295
   d6764:	e7f5      	b.n	d6752 <_ZN9TCPClient4readEPhj+0x40>

000d6766 <_ZN9TCPClient12flush_bufferEv>:
   d6766:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6768:	2300      	movs	r3, #0
   d676a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d676e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6770:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6774:	4770      	bx	lr

000d6776 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d677a:	461f      	mov	r7, r3
    stop();
   d677c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d677e:	460c      	mov	r4, r1
    stop();
   d6780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6782:	b08a      	sub	sp, #40	; 0x28
   d6784:	4605      	mov	r5, r0
   d6786:	4616      	mov	r6, r2
    stop();
   d6788:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d678a:	7d23      	ldrb	r3, [r4, #20]
   d678c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6790:	2b04      	cmp	r3, #4
   d6792:	bf0c      	ite	eq
   d6794:	2002      	moveq	r0, #2
   d6796:	200a      	movne	r0, #10
   d6798:	2206      	movs	r2, #6
   d679a:	2101      	movs	r1, #1
   d679c:	f7ff f82a 	bl	d57f4 <sock_socket>
   d67a0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d67a4:	696b      	ldr	r3, [r5, #20]
   d67a6:	681b      	ldr	r3, [r3, #0]
   d67a8:	2b00      	cmp	r3, #0
   d67aa:	da08      	bge.n	d67be <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d67ac:	682b      	ldr	r3, [r5, #0]
   d67ae:	4628      	mov	r0, r5
   d67b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67b2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d67b4:	4798      	blx	r3
}
   d67b6:	4620      	mov	r0, r4
   d67b8:	b00a      	add	sp, #40	; 0x28
   d67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d67be:	4628      	mov	r0, r5
   d67c0:	f7ff ffd1 	bl	d6766 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d67c4:	b1b7      	cbz	r7, d67f4 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d67c6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67c8:	a903      	add	r1, sp, #12
   d67ca:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d67cc:	9303      	str	r3, [sp, #12]
   d67ce:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d67d2:	f7fe feff 	bl	d55d4 <if_index_to_name>
   d67d6:	2800      	cmp	r0, #0
   d67d8:	d1e8      	bne.n	d67ac <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d67da:	6968      	ldr	r0, [r5, #20]
   d67dc:	2306      	movs	r3, #6
   d67de:	9300      	str	r3, [sp, #0]
   d67e0:	6800      	ldr	r0, [r0, #0]
   d67e2:	ab03      	add	r3, sp, #12
   d67e4:	f241 020b 	movw	r2, #4107	; 0x100b
   d67e8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d67ec:	f7fe ffda 	bl	d57a4 <sock_setsockopt>
   d67f0:	2800      	cmp	r0, #0
   d67f2:	d1db      	bne.n	d67ac <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d67f4:	221c      	movs	r2, #28
   d67f6:	2100      	movs	r1, #0
   d67f8:	a803      	add	r0, sp, #12
   d67fa:	f001 f893 	bl	d7924 <memset>
    if (ip.version() == 4) {
   d67fe:	7d23      	ldrb	r3, [r4, #20]
   d6800:	2b04      	cmp	r3, #4
   d6802:	d11d      	bne.n	d6840 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6804:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6808:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d680a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d680e:	f7fe ff21 	bl	d5654 <inet_htons>
   d6812:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6816:	6860      	ldr	r0, [r4, #4]
   d6818:	f7fe ff14 	bl	d5644 <inet_htonl>
   d681c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d681e:	696b      	ldr	r3, [r5, #20]
   d6820:	221c      	movs	r2, #28
   d6822:	6818      	ldr	r0, [r3, #0]
   d6824:	a903      	add	r1, sp, #12
   d6826:	f7fe ffcd 	bl	d57c4 <sock_connect>
   d682a:	2800      	cmp	r0, #0
   d682c:	d1be      	bne.n	d67ac <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d682e:	3404      	adds	r4, #4
   d6830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6832:	696d      	ldr	r5, [r5, #20]
   d6834:	358c      	adds	r5, #140	; 0x8c
   d6836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6838:	6823      	ldr	r3, [r4, #0]
   d683a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d683c:	2401      	movs	r4, #1
   d683e:	e7ba      	b.n	d67b6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6840:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6844:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6846:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d684a:	f7fe ff03 	bl	d5654 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d684e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6850:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6854:	1d23      	adds	r3, r4, #4
   d6856:	f104 0714 	add.w	r7, r4, #20
   d685a:	6818      	ldr	r0, [r3, #0]
   d685c:	6859      	ldr	r1, [r3, #4]
   d685e:	4632      	mov	r2, r6
   d6860:	c203      	stmia	r2!, {r0, r1}
   d6862:	3308      	adds	r3, #8
   d6864:	42bb      	cmp	r3, r7
   d6866:	4616      	mov	r6, r2
   d6868:	d1f7      	bne.n	d685a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d686a:	e7d8      	b.n	d681e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d686c <_ZN9TCPClient9availableEv>:
{
   d686c:	b530      	push	{r4, r5, lr}
   d686e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6870:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6874:	b08b      	sub	sp, #44	; 0x2c
   d6876:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6878:	b12b      	cbz	r3, d6886 <_ZN9TCPClient9availableEv+0x1a>
   d687a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d687e:	429a      	cmp	r2, r3
   d6880:	d101      	bne.n	d6886 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d6882:	f7ff ff70 	bl	d6766 <_ZN9TCPClient12flush_bufferEv>
   d6886:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6888:	6808      	ldr	r0, [r1, #0]
   d688a:	2800      	cmp	r0, #0
   d688c:	db18      	blt.n	d68c0 <_ZN9TCPClient9availableEv+0x54>
   d688e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d6892:	2d7f      	cmp	r5, #127	; 0x7f
   d6894:	d814      	bhi.n	d68c0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6896:	3104      	adds	r1, #4
   d6898:	2308      	movs	r3, #8
   d689a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d689e:	4429      	add	r1, r5
   d68a0:	f7fe ff98 	bl	d57d4 <sock_recv>
            if (ret > 0) {
   d68a4:	2800      	cmp	r0, #0
   d68a6:	dd13      	ble.n	d68d0 <_ZN9TCPClient9availableEv+0x64>
   d68a8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d68aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68ae:	b90a      	cbnz	r2, d68b4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d68b0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d68b4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d68b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68ba:	4410      	add	r0, r2
   d68bc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d68c0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d68c2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d68c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d68ca:	1ac0      	subs	r0, r0, r3
   d68cc:	b00b      	add	sp, #44	; 0x2c
   d68ce:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d68d0:	f7ff f8ec 	bl	d5aac <__errno>
   d68d4:	6803      	ldr	r3, [r0, #0]
   d68d6:	2b0b      	cmp	r3, #11
   d68d8:	d0f2      	beq.n	d68c0 <_ZN9TCPClient9availableEv+0x54>
   d68da:	f7ff f8e7 	bl	d5aac <__errno>
   d68de:	6803      	ldr	r3, [r0, #0]
   d68e0:	2b0b      	cmp	r3, #11
   d68e2:	d0ed      	beq.n	d68c0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d68e4:	2320      	movs	r3, #32
   d68e6:	2500      	movs	r5, #0
   d68e8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d68ec:	f7ff f8de 	bl	d5aac <__errno>
   d68f0:	6803      	ldr	r3, [r0, #0]
   d68f2:	9301      	str	r3, [sp, #4]
   d68f4:	4b08      	ldr	r3, [pc, #32]	; (d6918 <_ZN9TCPClient9availableEv+0xac>)
   d68f6:	4909      	ldr	r1, [pc, #36]	; (d691c <_ZN9TCPClient9availableEv+0xb0>)
   d68f8:	9300      	str	r3, [sp, #0]
   d68fa:	aa02      	add	r2, sp, #8
   d68fc:	462b      	mov	r3, r5
   d68fe:	2032      	movs	r0, #50	; 0x32
   d6900:	f7ff f818 	bl	d5934 <log_message>
                    sock_close(d_->sock);
   d6904:	6963      	ldr	r3, [r4, #20]
   d6906:	6818      	ldr	r0, [r3, #0]
   d6908:	f7fe ff54 	bl	d57b4 <sock_close>
   d690c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d690e:	f04f 32ff 	mov.w	r2, #4294967295
   d6912:	601a      	str	r2, [r3, #0]
   d6914:	e7d4      	b.n	d68c0 <_ZN9TCPClient9availableEv+0x54>
   d6916:	bf00      	nop
   d6918:	000d8207 	.word	0x000d8207
   d691c:	000d8200 	.word	0x000d8200

000d6920 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6920:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6922:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6924:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6926:	6818      	ldr	r0, [r3, #0]
   d6928:	2800      	cmp	r0, #0
   d692a:	db01      	blt.n	d6930 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d692c:	f7fe ff42 	bl	d57b4 <sock_close>
   d6930:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6932:	f04f 32ff 	mov.w	r2, #4294967295
   d6936:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6938:	6960      	ldr	r0, [r4, #20]
   d693a:	2211      	movs	r2, #17
   d693c:	2100      	movs	r1, #0
   d693e:	308c      	adds	r0, #140	; 0x8c
   d6940:	f000 fff0 	bl	d7924 <memset>
    flush_buffer();
   d6944:	4620      	mov	r0, r4
}
   d6946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d694a:	f7ff bf0c 	b.w	d6766 <_ZN9TCPClient12flush_bufferEv>

000d694e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d694e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6950:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6952:	4604      	mov	r4, r0
          total(0) {
   d6954:	6001      	str	r1, [r0, #0]
   d6956:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d695a:	3088      	adds	r0, #136	; 0x88
   d695c:	f7ff fc22 	bl	d61a4 <_ZN9IPAddressC1Ev>
}
   d6960:	4620      	mov	r0, r4
   d6962:	bd10      	pop	{r4, pc}

000d6964 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6964:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6966:	2300      	movs	r3, #0
   d6968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d696c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6970:	4a0e      	ldr	r2, [pc, #56]	; (d69ac <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6972:	6103      	str	r3, [r0, #16]
   d6974:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6976:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6978:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d697a:	20ac      	movs	r0, #172	; 0xac
   d697c:	9101      	str	r1, [sp, #4]
   d697e:	f7fd fb88 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6982:	1e05      	subs	r5, r0, #0
   d6984:	f105 060c 	add.w	r6, r5, #12
   d6988:	d008      	beq.n	d699c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d698a:	2301      	movs	r3, #1
   d698c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6990:	4b07      	ldr	r3, [pc, #28]	; (d69b0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6992:	9901      	ldr	r1, [sp, #4]
   d6994:	602b      	str	r3, [r5, #0]
   d6996:	4630      	mov	r0, r6
   d6998:	f7ff ffd9 	bl	d694e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d699c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d699e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d69a2:	f7ff fee0 	bl	d6766 <_ZN9TCPClient12flush_bufferEv>
}
   d69a6:	b002      	add	sp, #8
   d69a8:	bd70      	pop	{r4, r5, r6, pc}
   d69aa:	bf00      	nop
   d69ac:	000d823c 	.word	0x000d823c
   d69b0:	000d8220 	.word	0x000d8220

000d69b4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d69b4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d69b6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d69ba:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d69bc:	f7ff ffd2 	bl	d6964 <_ZN9TCPClientC1Ei>
}
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd10      	pop	{r4, pc}

000d69c4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d69c4:	b510      	push	{r4, lr}
   d69c6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d69c8:	6800      	ldr	r0, [r0, #0]
   d69ca:	2800      	cmp	r0, #0
   d69cc:	db01      	blt.n	d69d2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d69ce:	f7fe fef1 	bl	d57b4 <sock_close>
    }
}
   d69d2:	4620      	mov	r0, r4
   d69d4:	bd10      	pop	{r4, pc}

000d69d6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d69d6:	300c      	adds	r0, #12
   d69d8:	f7ff bff4 	b.w	d69c4 <_ZN9TCPClient4DataD1Ev>

000d69dc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d69e0:	4698      	mov	r8, r3
    stop();
   d69e2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69e4:	b093      	sub	sp, #76	; 0x4c
   d69e6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d69e8:	2400      	movs	r4, #0
    stop();
   d69ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d69ec:	4606      	mov	r6, r0
   d69ee:	4617      	mov	r7, r2
    stop();
   d69f0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d69f2:	4628      	mov	r0, r5
   d69f4:	466b      	mov	r3, sp
   d69f6:	4622      	mov	r2, r4
   d69f8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d69fa:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d69fc:	f7fe fdba 	bl	d5574 <netdb_getaddrinfo>
   d6a00:	4605      	mov	r5, r0
   d6a02:	2800      	cmp	r0, #0
   d6a04:	d163      	bne.n	d6ace <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6a06:	9b00      	ldr	r3, [sp, #0]
   d6a08:	2b00      	cmp	r3, #0
   d6a0a:	d04b      	beq.n	d6aa4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6a0c:	695b      	ldr	r3, [r3, #20]
   d6a0e:	2b00      	cmp	r3, #0
   d6a10:	d048      	beq.n	d6aa4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6a12:	a806      	add	r0, sp, #24
   d6a14:	f7ff fbc6 	bl	d61a4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6a18:	9b00      	ldr	r3, [sp, #0]
   d6a1a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6a1c:	7863      	ldrb	r3, [r4, #1]
   d6a1e:	2b02      	cmp	r3, #2
   d6a20:	d104      	bne.n	d6a2c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a22:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6a24:	a806      	add	r0, sp, #24
   d6a26:	f7ff f9d9 	bl	d5ddc <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6a2a:	e026      	b.n	d6a7a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6a2c:	2b0a      	cmp	r3, #10
   d6a2e:	d124      	bne.n	d6a7a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6a30:	2211      	movs	r2, #17
   d6a32:	4629      	mov	r1, r5
   d6a34:	a801      	add	r0, sp, #4
   d6a36:	f000 ff75 	bl	d7924 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a3a:	68a3      	ldr	r3, [r4, #8]
   d6a3c:	2b00      	cmp	r3, #0
   d6a3e:	d038      	beq.n	d6ab2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a40:	f104 0308 	add.w	r3, r4, #8
   d6a44:	f10d 0c04 	add.w	ip, sp, #4
   d6a48:	3418      	adds	r4, #24
   d6a4a:	6818      	ldr	r0, [r3, #0]
   d6a4c:	6859      	ldr	r1, [r3, #4]
   d6a4e:	4662      	mov	r2, ip
   d6a50:	c203      	stmia	r2!, {r0, r1}
   d6a52:	3308      	adds	r3, #8
   d6a54:	42a3      	cmp	r3, r4
   d6a56:	4694      	mov	ip, r2
   d6a58:	d1f7      	bne.n	d6a4a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6a5a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6a5c:	a901      	add	r1, sp, #4
   d6a5e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6a60:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6a64:	f7ff fbac 	bl	d61c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6a68:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6a6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6a70:	ac07      	add	r4, sp, #28
   d6a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a74:	f8dc 3000 	ldr.w	r3, [ip]
   d6a78:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6a7a:	a806      	add	r0, sp, #24
   d6a7c:	f7ff fbb2 	bl	d61e4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6a80:	b180      	cbz	r0, d6aa4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6a82:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6a84:	ad07      	add	r5, sp, #28
   d6a86:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6a8a:	4b12      	ldr	r3, [pc, #72]	; (d6ad4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6a8c:	930c      	str	r3, [sp, #48]	; 0x30
   d6a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a90:	ac0d      	add	r4, sp, #52	; 0x34
   d6a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a94:	682b      	ldr	r3, [r5, #0]
   d6a96:	7023      	strb	r3, [r4, #0]
   d6a98:	463a      	mov	r2, r7
   d6a9a:	4643      	mov	r3, r8
   d6a9c:	a90c      	add	r1, sp, #48	; 0x30
   d6a9e:	4630      	mov	r0, r6
   d6aa0:	47c8      	blx	r9
   d6aa2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6aa4:	9800      	ldr	r0, [sp, #0]
   d6aa6:	f7fe fd5d 	bl	d5564 <netdb_freeaddrinfo>
}
   d6aaa:	4628      	mov	r0, r5
   d6aac:	b013      	add	sp, #76	; 0x4c
   d6aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6ab2:	68e3      	ldr	r3, [r4, #12]
   d6ab4:	2b00      	cmp	r3, #0
   d6ab6:	d1c3      	bne.n	d6a40 <_ZN9TCPClient7connectEPKctm+0x64>
   d6ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6abc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6ac0:	f7fe fdc0 	bl	d5644 <inet_htonl>
   d6ac4:	4581      	cmp	r9, r0
   d6ac6:	d1bb      	bne.n	d6a40 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6ac8:	f104 0114 	add.w	r1, r4, #20
   d6acc:	e7aa      	b.n	d6a24 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6ace:	4625      	mov	r5, r4
   d6ad0:	e7e8      	b.n	d6aa4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6ad2:	bf00      	nop
   d6ad4:	000d816c 	.word	0x000d816c

000d6ad8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6ad8:	2200      	movs	r2, #0
   d6ada:	6840      	ldr	r0, [r0, #4]
   d6adc:	4611      	mov	r1, r2
   d6ade:	f7fe bf6d 	b.w	d59bc <network_ready>

000d6ae2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ae2:	2200      	movs	r2, #0
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	4611      	mov	r1, r2
   d6ae8:	f7fe bf88 	b.w	d59fc <network_listening>

000d6aec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6aec:	2200      	movs	r2, #0
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	4611      	mov	r1, r2
   d6af2:	f7fe bf93 	b.w	d5a1c <network_get_listen_timeout>

000d6af6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6af6:	6840      	ldr	r0, [r0, #4]
   d6af8:	2200      	movs	r2, #0
   d6afa:	f7fe bf87 	b.w	d5a0c <network_set_listen_timeout>

000d6afe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6afe:	6840      	ldr	r0, [r0, #4]
   d6b00:	2200      	movs	r2, #0
   d6b02:	f081 0101 	eor.w	r1, r1, #1
   d6b06:	f7fe bf71 	b.w	d59ec <network_listen>

000d6b0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6b0a:	2300      	movs	r3, #0
   d6b0c:	6840      	ldr	r0, [r0, #4]
   d6b0e:	461a      	mov	r2, r3
   d6b10:	4619      	mov	r1, r3
   d6b12:	f7fe bf63 	b.w	d59dc <network_off>

000d6b16 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b16:	2200      	movs	r2, #0
   d6b18:	6840      	ldr	r0, [r0, #4]
   d6b1a:	4611      	mov	r1, r2
   d6b1c:	f7fe bf3e 	b.w	d599c <network_connecting>

000d6b20 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b20:	6840      	ldr	r0, [r0, #4]
   d6b22:	2200      	movs	r2, #0
   d6b24:	2102      	movs	r1, #2
   d6b26:	f7fe bf41 	b.w	d59ac <network_disconnect>

000d6b2a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b2a:	2300      	movs	r3, #0
   d6b2c:	6840      	ldr	r0, [r0, #4]
   d6b2e:	461a      	mov	r2, r3
   d6b30:	f7fe bf2c 	b.w	d598c <network_connect>

000d6b34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6b34:	4b02      	ldr	r3, [pc, #8]	; (d6b40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6b36:	2204      	movs	r2, #4
   d6b38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6b3a:	4a02      	ldr	r2, [pc, #8]	; (d6b44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6b3c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6b3e:	4770      	bx	lr
   d6b40:	2003e7c8 	.word	0x2003e7c8
   d6b44:	000d8288 	.word	0x000d8288

000d6b48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b48:	2300      	movs	r3, #0
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	461a      	mov	r2, r3
   d6b4e:	f7fe bf1d 	b.w	d598c <network_connect>

000d6b52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b52:	6840      	ldr	r0, [r0, #4]
   d6b54:	2200      	movs	r2, #0
   d6b56:	2102      	movs	r1, #2
   d6b58:	f7fe bf28 	b.w	d59ac <network_disconnect>

000d6b5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b5c:	2200      	movs	r2, #0
   d6b5e:	6840      	ldr	r0, [r0, #4]
   d6b60:	4611      	mov	r1, r2
   d6b62:	f7fe bf1b 	b.w	d599c <network_connecting>

000d6b66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b66:	2200      	movs	r2, #0
   d6b68:	6840      	ldr	r0, [r0, #4]
   d6b6a:	4611      	mov	r1, r2
   d6b6c:	f7fe bf26 	b.w	d59bc <network_ready>

000d6b70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b70:	2300      	movs	r3, #0
   d6b72:	6840      	ldr	r0, [r0, #4]
   d6b74:	461a      	mov	r2, r3
   d6b76:	4619      	mov	r1, r3
   d6b78:	f7fe bf28 	b.w	d59cc <network_on>

000d6b7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b7c:	2300      	movs	r3, #0
   d6b7e:	6840      	ldr	r0, [r0, #4]
   d6b80:	461a      	mov	r2, r3
   d6b82:	4619      	mov	r1, r3
   d6b84:	f7fe bf2a 	b.w	d59dc <network_off>

000d6b88 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6b88:	6840      	ldr	r0, [r0, #4]
   d6b8a:	2100      	movs	r1, #0
   d6b8c:	f7fe bf4e 	b.w	d5a2c <network_is_on>

000d6b90 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6b90:	6840      	ldr	r0, [r0, #4]
   d6b92:	2100      	movs	r1, #0
   d6b94:	f7fe bf52 	b.w	d5a3c <network_is_off>

000d6b98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b98:	6840      	ldr	r0, [r0, #4]
   d6b9a:	2200      	movs	r2, #0
   d6b9c:	f081 0101 	eor.w	r1, r1, #1
   d6ba0:	f7fe bf24 	b.w	d59ec <network_listen>

000d6ba4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6ba4:	6840      	ldr	r0, [r0, #4]
   d6ba6:	2200      	movs	r2, #0
   d6ba8:	f7fe bf30 	b.w	d5a0c <network_set_listen_timeout>

000d6bac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6bac:	2200      	movs	r2, #0
   d6bae:	6840      	ldr	r0, [r0, #4]
   d6bb0:	4611      	mov	r1, r2
   d6bb2:	f7fe bf33 	b.w	d5a1c <network_get_listen_timeout>

000d6bb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bb6:	2200      	movs	r2, #0
   d6bb8:	6840      	ldr	r0, [r0, #4]
   d6bba:	4611      	mov	r1, r2
   d6bbc:	f7fe bf1e 	b.w	d59fc <network_listening>

000d6bc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bc4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6bc6:	b095      	sub	sp, #84	; 0x54
   d6bc8:	4616      	mov	r6, r2
   d6bca:	460d      	mov	r5, r1
   d6bcc:	4607      	mov	r7, r0
    IPAddress addr;
   d6bce:	f7ff fae9 	bl	d61a4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6bd2:	4621      	mov	r1, r4
   d6bd4:	2218      	movs	r2, #24
   d6bd6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6bd8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6bda:	f000 fea3 	bl	d7924 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6bde:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6be0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6be4:	4621      	mov	r1, r4
   d6be6:	466b      	mov	r3, sp
   d6be8:	aa0c      	add	r2, sp, #48	; 0x30
   d6bea:	4630      	mov	r0, r6
   d6bec:	f7fe fcc2 	bl	d5574 <netdb_getaddrinfo>
    if (!r) {
   d6bf0:	4604      	mov	r4, r0
   d6bf2:	2800      	cmp	r0, #0
   d6bf4:	d14c      	bne.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bf6:	4602      	mov	r2, r0
   d6bf8:	2101      	movs	r1, #1
   d6bfa:	6868      	ldr	r0, [r5, #4]
   d6bfc:	f7fe fede 	bl	d59bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c04:	4622      	mov	r2, r4
   d6c06:	6868      	ldr	r0, [r5, #4]
   d6c08:	f7fe fed8 	bl	d59bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c0c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c0e:	4681      	mov	r9, r0
        bool ok = false;
   d6c10:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c12:	2e00      	cmp	r6, #0
   d6c14:	d03c      	beq.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6c16:	2900      	cmp	r1, #0
   d6c18:	d13a      	bne.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c1a:	6873      	ldr	r3, [r6, #4]
   d6c1c:	2b02      	cmp	r3, #2
   d6c1e:	d003      	beq.n	d6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c20:	2b0a      	cmp	r3, #10
   d6c22:	d011      	beq.n	d6c48 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c24:	69f6      	ldr	r6, [r6, #28]
   d6c26:	e7f4      	b.n	d6c12 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c28:	f1b8 0f00 	cmp.w	r8, #0
   d6c2c:	d00a      	beq.n	d6c44 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c2e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6c30:	a806      	add	r0, sp, #24
   d6c32:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6c34:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6c36:	f7ff faf9 	bl	d622c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c3c:	1d3c      	adds	r4, r7, #4
   d6c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c40:	682b      	ldr	r3, [r5, #0]
   d6c42:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6c44:	4641      	mov	r1, r8
   d6c46:	e7ed      	b.n	d6c24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c48:	f1b9 0f00 	cmp.w	r9, #0
   d6c4c:	d101      	bne.n	d6c52 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c4e:	4649      	mov	r1, r9
   d6c50:	e7e8      	b.n	d6c24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c52:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c54:	2210      	movs	r2, #16
   d6c56:	a801      	add	r0, sp, #4
   d6c58:	f000 fe64 	bl	d7924 <memset>
                    a.v = 6;
   d6c5c:	2306      	movs	r3, #6
   d6c5e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c62:	ad01      	add	r5, sp, #4
   d6c64:	f104 0308 	add.w	r3, r4, #8
   d6c68:	3418      	adds	r4, #24
   d6c6a:	6818      	ldr	r0, [r3, #0]
   d6c6c:	6859      	ldr	r1, [r3, #4]
   d6c6e:	462a      	mov	r2, r5
   d6c70:	c203      	stmia	r2!, {r0, r1}
   d6c72:	3308      	adds	r3, #8
   d6c74:	42a3      	cmp	r3, r4
   d6c76:	4615      	mov	r5, r2
   d6c78:	d1f7      	bne.n	d6c6a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6c7a:	a901      	add	r1, sp, #4
   d6c7c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6c7e:	ad07      	add	r5, sp, #28
   d6c80:	f7ff fa9e 	bl	d61c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c86:	1d3c      	adds	r4, r7, #4
   d6c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c8a:	682b      	ldr	r3, [r5, #0]
   d6c8c:	7023      	strb	r3, [r4, #0]
   d6c8e:	e7de      	b.n	d6c4e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c90:	9800      	ldr	r0, [sp, #0]
   d6c92:	f7fe fc67 	bl	d5564 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c96:	4638      	mov	r0, r7
   d6c98:	b015      	add	sp, #84	; 0x54
   d6c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ca0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ca0:	4b02      	ldr	r3, [pc, #8]	; (d6cac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6ca2:	4a03      	ldr	r2, [pc, #12]	; (d6cb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ca4:	601a      	str	r2, [r3, #0]
   d6ca6:	2200      	movs	r2, #0
   d6ca8:	605a      	str	r2, [r3, #4]

} // spark
   d6caa:	4770      	bx	lr
   d6cac:	2003e7d0 	.word	0x2003e7d0
   d6cb0:	000d82c4 	.word	0x000d82c4

000d6cb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6cb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6cb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6cb8:	d902      	bls.n	d6cc0 <pinAvailable+0xc>
    return false;
   d6cba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6cbc:	b002      	add	sp, #8
   d6cbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6cc0:	f1a0 030b 	sub.w	r3, r0, #11
   d6cc4:	2b02      	cmp	r3, #2
   d6cc6:	d81a      	bhi.n	d6cfe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6cc8:	4c17      	ldr	r4, [pc, #92]	; (d6d28 <pinAvailable+0x74>)
   d6cca:	7821      	ldrb	r1, [r4, #0]
   d6ccc:	f3bf 8f5b 	dmb	ish
   d6cd0:	f011 0101 	ands.w	r1, r1, #1
   d6cd4:	d10b      	bne.n	d6cee <pinAvailable+0x3a>
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	9101      	str	r1, [sp, #4]
   d6cda:	f7fd f9eb 	bl	d40b4 <__cxa_guard_acquire>
   d6cde:	9901      	ldr	r1, [sp, #4]
   d6ce0:	b128      	cbz	r0, d6cee <pinAvailable+0x3a>
   d6ce2:	4812      	ldr	r0, [pc, #72]	; (d6d2c <pinAvailable+0x78>)
   d6ce4:	f7fe ff36 	bl	d5b54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6ce8:	4620      	mov	r0, r4
   d6cea:	f7fd f9e8 	bl	d40be <__cxa_guard_release>
   d6cee:	4b0f      	ldr	r3, [pc, #60]	; (d6d2c <pinAvailable+0x78>)
   d6cf0:	7818      	ldrb	r0, [r3, #0]
   d6cf2:	f7fe fdb7 	bl	d5864 <hal_spi_is_enabled>
   d6cf6:	2800      	cmp	r0, #0
   d6cf8:	d1df      	bne.n	d6cba <pinAvailable+0x6>
  return true; // 'pin' is available
   d6cfa:	2001      	movs	r0, #1
   d6cfc:	e7de      	b.n	d6cbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6cfe:	2801      	cmp	r0, #1
   d6d00:	d809      	bhi.n	d6d16 <pinAvailable+0x62>
   d6d02:	f000 f88d 	bl	d6e20 <_Z19__fetch_global_Wirev>
   d6d06:	2100      	movs	r1, #0
   d6d08:	7c00      	ldrb	r0, [r0, #16]
   d6d0a:	f7fe fd33 	bl	d5774 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6d0e:	f080 0001 	eor.w	r0, r0, #1
   d6d12:	b2c0      	uxtb	r0, r0
   d6d14:	e7d2      	b.n	d6cbc <pinAvailable+0x8>
   d6d16:	3809      	subs	r0, #9
   d6d18:	2801      	cmp	r0, #1
   d6d1a:	d8ee      	bhi.n	d6cfa <pinAvailable+0x46>
   d6d1c:	f7ff fb78 	bl	d6410 <_Z22__fetch_global_Serial1v>
   d6d20:	7c00      	ldrb	r0, [r0, #16]
   d6d22:	f7fe fccf 	bl	d56c4 <hal_usart_is_enabled>
   d6d26:	e7f2      	b.n	d6d0e <pinAvailable+0x5a>
   d6d28:	2003e638 	.word	0x2003e638
   d6d2c:	2003e63c 	.word	0x2003e63c

000d6d30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d30:	2823      	cmp	r0, #35	; 0x23
{
   d6d32:	b538      	push	{r3, r4, r5, lr}
   d6d34:	4604      	mov	r4, r0
   d6d36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d38:	d80a      	bhi.n	d6d50 <pinMode+0x20>
   d6d3a:	29ff      	cmp	r1, #255	; 0xff
   d6d3c:	d008      	beq.n	d6d50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6d3e:	f7ff ffb9 	bl	d6cb4 <pinAvailable>
   d6d42:	b128      	cbz	r0, d6d50 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6d44:	4629      	mov	r1, r5
   d6d46:	4620      	mov	r0, r4
}
   d6d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6d4c:	f7fe bc22 	b.w	d5594 <HAL_Pin_Mode>
}
   d6d50:	bd38      	pop	{r3, r4, r5, pc}

000d6d52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6d52:	b538      	push	{r3, r4, r5, lr}
   d6d54:	4604      	mov	r4, r0
   d6d56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d58:	f7fe fc24 	bl	d55a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d5c:	28ff      	cmp	r0, #255	; 0xff
   d6d5e:	d010      	beq.n	d6d82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6d60:	2806      	cmp	r0, #6
   d6d62:	d804      	bhi.n	d6d6e <digitalWrite+0x1c>
   d6d64:	234d      	movs	r3, #77	; 0x4d
   d6d66:	fa23 f000 	lsr.w	r0, r3, r0
   d6d6a:	07c3      	lsls	r3, r0, #31
   d6d6c:	d409      	bmi.n	d6d82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7ff ffa0 	bl	d6cb4 <pinAvailable>
   d6d74:	b128      	cbz	r0, d6d82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d76:	4629      	mov	r1, r5
   d6d78:	4620      	mov	r0, r4
}
   d6d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6d7e:	f7fe bc19 	b.w	d55b4 <HAL_GPIO_Write>
}
   d6d82:	bd38      	pop	{r3, r4, r5, pc}

000d6d84 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6d84:	b510      	push	{r4, lr}
   d6d86:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d88:	f7fe fc0c 	bl	d55a4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6d8c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6d8e:	b2db      	uxtb	r3, r3
   d6d90:	2b01      	cmp	r3, #1
   d6d92:	d908      	bls.n	d6da6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6d94:	4620      	mov	r0, r4
   d6d96:	f7ff ff8d 	bl	d6cb4 <pinAvailable>
   d6d9a:	b120      	cbz	r0, d6da6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6d9c:	4620      	mov	r0, r4
}
   d6d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6da2:	f7fe bc0f 	b.w	d55c4 <HAL_GPIO_Read>
}
   d6da6:	2000      	movs	r0, #0
   d6da8:	bd10      	pop	{r4, pc}

000d6daa <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dae:	4690      	mov	r8, r2
   d6db0:	461f      	mov	r7, r3
   d6db2:	2400      	movs	r4, #0
   d6db4:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6db6:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d6db8:	f1b8 0f00 	cmp.w	r8, #0
   d6dbc:	d113      	bne.n	d6de6 <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6dbe:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6dc2:	f001 0101 	and.w	r1, r1, #1
   d6dc6:	4630      	mov	r0, r6
   d6dc8:	f7ff ffc3 	bl	d6d52 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d6dcc:	2101      	movs	r1, #1
   d6dce:	4628      	mov	r0, r5
   d6dd0:	f7ff ffbf 	bl	d6d52 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6dd4:	3401      	adds	r4, #1
   d6dd6:	2100      	movs	r1, #0
   d6dd8:	4628      	mov	r0, r5
   d6dda:	f7ff ffba 	bl	d6d52 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d6dde:	2c08      	cmp	r4, #8
   d6de0:	d1ea      	bne.n	d6db8 <shiftOut+0xe>
  }
}
   d6de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6de6:	f1c4 0107 	rsb	r1, r4, #7
   d6dea:	fa47 f101 	asr.w	r1, r7, r1
   d6dee:	e7e8      	b.n	d6dc2 <shiftOut+0x18>

000d6df0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6df0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6df2:	2300      	movs	r3, #0
   d6df4:	2520      	movs	r5, #32
   d6df6:	8043      	strh	r3, [r0, #2]
   d6df8:	2314      	movs	r3, #20
{
   d6dfa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6dfc:	8003      	strh	r3, [r0, #0]
   d6dfe:	6085      	str	r5, [r0, #8]
   d6e00:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6e02:	4906      	ldr	r1, [pc, #24]	; (d6e1c <_Z17acquireWireBufferv+0x2c>)
   d6e04:	4628      	mov	r0, r5
   d6e06:	f000 f83a 	bl	d6e7e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6e0a:	4904      	ldr	r1, [pc, #16]	; (d6e1c <_Z17acquireWireBufferv+0x2c>)
	};
   d6e0c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6e0e:	4628      	mov	r0, r5
   d6e10:	f000 f835 	bl	d6e7e <_ZnajRKSt9nothrow_t>
	};
   d6e14:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6e16:	4620      	mov	r0, r4
   d6e18:	bd38      	pop	{r3, r4, r5, pc}
   d6e1a:	bf00      	nop
   d6e1c:	000d82f8 	.word	0x000d82f8

000d6e20 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6e20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6e22:	4d0f      	ldr	r5, [pc, #60]	; (d6e60 <_Z19__fetch_global_Wirev+0x40>)
   d6e24:	7829      	ldrb	r1, [r5, #0]
   d6e26:	f3bf 8f5b 	dmb	ish
   d6e2a:	f011 0401 	ands.w	r4, r1, #1
{
   d6e2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6e30:	d113      	bne.n	d6e5a <_Z19__fetch_global_Wirev+0x3a>
   d6e32:	4628      	mov	r0, r5
   d6e34:	f7fd f93e 	bl	d40b4 <__cxa_guard_acquire>
   d6e38:	b178      	cbz	r0, d6e5a <_Z19__fetch_global_Wirev+0x3a>
   d6e3a:	a801      	add	r0, sp, #4
   d6e3c:	f7ff ffd8 	bl	d6df0 <_Z17acquireWireBufferv>
   d6e40:	aa01      	add	r2, sp, #4
   d6e42:	4621      	mov	r1, r4
   d6e44:	4807      	ldr	r0, [pc, #28]	; (d6e64 <_Z19__fetch_global_Wirev+0x44>)
   d6e46:	f7ff fb39 	bl	d64bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6e4a:	4628      	mov	r0, r5
   d6e4c:	f7fd f937 	bl	d40be <__cxa_guard_release>
   d6e50:	4a05      	ldr	r2, [pc, #20]	; (d6e68 <_Z19__fetch_global_Wirev+0x48>)
   d6e52:	4906      	ldr	r1, [pc, #24]	; (d6e6c <_Z19__fetch_global_Wirev+0x4c>)
   d6e54:	4803      	ldr	r0, [pc, #12]	; (d6e64 <_Z19__fetch_global_Wirev+0x44>)
   d6e56:	f000 f80b 	bl	d6e70 <__aeabi_atexit>
	return wire;
}
   d6e5a:	4802      	ldr	r0, [pc, #8]	; (d6e64 <_Z19__fetch_global_Wirev+0x44>)
   d6e5c:	b007      	add	sp, #28
   d6e5e:	bd30      	pop	{r4, r5, pc}
   d6e60:	2003e7dc 	.word	0x2003e7dc
   d6e64:	2003e7e0 	.word	0x2003e7e0
   d6e68:	2003e498 	.word	0x2003e498
   d6e6c:	000d6465 	.word	0x000d6465

000d6e70 <__aeabi_atexit>:
   d6e70:	460b      	mov	r3, r1
   d6e72:	4601      	mov	r1, r0
   d6e74:	4618      	mov	r0, r3
   d6e76:	f000 bd39 	b.w	d78ec <__cxa_atexit>

000d6e7a <_ZdlPvj>:
   d6e7a:	f7fd b90e 	b.w	d409a <_ZdlPv>

000d6e7e <_ZnajRKSt9nothrow_t>:
   d6e7e:	f7fd b90a 	b.w	d4096 <_Znaj>
	...

000d6e84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6e84:	4901      	ldr	r1, [pc, #4]	; (d6e8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6e86:	f000 b8f9 	b.w	d707c <_ZNKSt9type_infoeqERKS_>
   d6e8a:	bf00      	nop
   d6e8c:	000d8314 	.word	0x000d8314

000d6e90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e92:	2400      	movs	r4, #0
   d6e94:	2310      	movs	r3, #16
   d6e96:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6e9a:	6803      	ldr	r3, [r0, #0]
   d6e9c:	9400      	str	r4, [sp, #0]
   d6e9e:	699e      	ldr	r6, [r3, #24]
   d6ea0:	f88d 4004 	strb.w	r4, [sp, #4]
   d6ea4:	4615      	mov	r5, r2
   d6ea6:	466b      	mov	r3, sp
   d6ea8:	6812      	ldr	r2, [r2, #0]
   d6eaa:	47b0      	blx	r6
   d6eac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6eb0:	f003 0306 	and.w	r3, r3, #6
   d6eb4:	2b06      	cmp	r3, #6
   d6eb6:	bf03      	ittte	eq
   d6eb8:	9b00      	ldreq	r3, [sp, #0]
   d6eba:	602b      	streq	r3, [r5, #0]
   d6ebc:	2001      	moveq	r0, #1
   d6ebe:	4620      	movne	r0, r4
   d6ec0:	b004      	add	sp, #16
   d6ec2:	bd70      	pop	{r4, r5, r6, pc}

000d6ec4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6ec4:	9800      	ldr	r0, [sp, #0]
   d6ec6:	4290      	cmp	r0, r2
   d6ec8:	bf14      	ite	ne
   d6eca:	2001      	movne	r0, #1
   d6ecc:	2006      	moveq	r0, #6
   d6ece:	4770      	bx	lr

000d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6ed0:	b510      	push	{r4, lr}
   d6ed2:	4b03      	ldr	r3, [pc, #12]	; (d6ee0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6ed4:	6003      	str	r3, [r0, #0]
   d6ed6:	4604      	mov	r4, r0
   d6ed8:	f000 f8cd 	bl	d7076 <_ZNSt9type_infoD1Ev>
   d6edc:	4620      	mov	r0, r4
   d6ede:	bd10      	pop	{r4, pc}
   d6ee0:	000d8354 	.word	0x000d8354

000d6ee4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6ee4:	b510      	push	{r4, lr}
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	f7ff fff2 	bl	d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6eec:	4620      	mov	r0, r4
   d6eee:	2108      	movs	r1, #8
   d6ef0:	f7ff ffc3 	bl	d6e7a <_ZdlPvj>
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	bd10      	pop	{r4, pc}

000d6ef8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6efc:	461f      	mov	r7, r3
   d6efe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6f02:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6f06:	4598      	cmp	r8, r3
   d6f08:	4606      	mov	r6, r0
   d6f0a:	4615      	mov	r5, r2
   d6f0c:	d107      	bne.n	d6f1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6f0e:	9907      	ldr	r1, [sp, #28]
   d6f10:	f000 f8b4 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f14:	b118      	cbz	r0, d6f1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6f16:	7165      	strb	r5, [r4, #5]
   d6f18:	2000      	movs	r0, #0
   d6f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f1e:	4639      	mov	r1, r7
   d6f20:	4630      	mov	r0, r6
   d6f22:	f000 f8ab 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f26:	2800      	cmp	r0, #0
   d6f28:	d0f6      	beq.n	d6f18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6f2a:	2301      	movs	r3, #1
   d6f2c:	f8c4 8000 	str.w	r8, [r4]
   d6f30:	7125      	strb	r5, [r4, #4]
   d6f32:	71a3      	strb	r3, [r4, #6]
   d6f34:	e7f0      	b.n	d6f18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6f36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6f36:	b538      	push	{r3, r4, r5, lr}
   d6f38:	4615      	mov	r5, r2
   d6f3a:	461c      	mov	r4, r3
   d6f3c:	f000 f89e 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f40:	b120      	cbz	r0, d6f4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6f42:	2308      	movs	r3, #8
   d6f44:	60e3      	str	r3, [r4, #12]
   d6f46:	2306      	movs	r3, #6
   d6f48:	6025      	str	r5, [r4, #0]
   d6f4a:	7123      	strb	r3, [r4, #4]
   d6f4c:	bd38      	pop	{r3, r4, r5, pc}

000d6f4e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f50:	4605      	mov	r5, r0
   d6f52:	460c      	mov	r4, r1
   d6f54:	9201      	str	r2, [sp, #4]
   d6f56:	461e      	mov	r6, r3
   d6f58:	f000 f890 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6f5c:	b950      	cbnz	r0, d6f74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f5e:	2e03      	cmp	r6, #3
   d6f60:	d808      	bhi.n	d6f74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6f62:	6823      	ldr	r3, [r4, #0]
   d6f64:	9a01      	ldr	r2, [sp, #4]
   d6f66:	695b      	ldr	r3, [r3, #20]
   d6f68:	4629      	mov	r1, r5
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	b002      	add	sp, #8
   d6f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6f72:	4718      	bx	r3
   d6f74:	b002      	add	sp, #8
   d6f76:	bd70      	pop	{r4, r5, r6, pc}

000d6f78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6f78:	b510      	push	{r4, lr}
   d6f7a:	4b03      	ldr	r3, [pc, #12]	; (d6f88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6f7c:	6003      	str	r3, [r0, #0]
   d6f7e:	4604      	mov	r4, r0
   d6f80:	f7ff ffa6 	bl	d6ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6f84:	4620      	mov	r0, r4
   d6f86:	bd10      	pop	{r4, pc}
   d6f88:	000d83b4 	.word	0x000d83b4

000d6f8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6f8c:	b510      	push	{r4, lr}
   d6f8e:	4604      	mov	r4, r0
   d6f90:	f7ff fff2 	bl	d6f78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6f94:	4620      	mov	r0, r4
   d6f96:	210c      	movs	r1, #12
   d6f98:	f7ff ff6f 	bl	d6e7a <_ZdlPvj>
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	bd10      	pop	{r4, pc}

000d6fa0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6fa2:	9f08      	ldr	r7, [sp, #32]
   d6fa4:	4297      	cmp	r7, r2
   d6fa6:	4605      	mov	r5, r0
   d6fa8:	460e      	mov	r6, r1
   d6faa:	4614      	mov	r4, r2
   d6fac:	d00a      	beq.n	d6fc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6fae:	68a8      	ldr	r0, [r5, #8]
   d6fb0:	6802      	ldr	r2, [r0, #0]
   d6fb2:	9708      	str	r7, [sp, #32]
   d6fb4:	6a15      	ldr	r5, [r2, #32]
   d6fb6:	4631      	mov	r1, r6
   d6fb8:	4622      	mov	r2, r4
   d6fba:	46ac      	mov	ip, r5
   d6fbc:	b003      	add	sp, #12
   d6fbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6fc2:	4760      	bx	ip
   d6fc4:	4619      	mov	r1, r3
   d6fc6:	9301      	str	r3, [sp, #4]
   d6fc8:	f000 f858 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6fcc:	9b01      	ldr	r3, [sp, #4]
   d6fce:	2800      	cmp	r0, #0
   d6fd0:	d0ed      	beq.n	d6fae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6fd2:	2006      	movs	r0, #6
   d6fd4:	b003      	add	sp, #12
   d6fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6fd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fdc:	460d      	mov	r5, r1
   d6fde:	4619      	mov	r1, r3
   d6fe0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6fe4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6fe8:	4681      	mov	r9, r0
   d6fea:	4617      	mov	r7, r2
   d6fec:	4698      	mov	r8, r3
   d6fee:	f000 f845 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d6ff2:	b190      	cbz	r0, d701a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6ff4:	2d00      	cmp	r5, #0
   d6ff6:	6034      	str	r4, [r6, #0]
   d6ff8:	7137      	strb	r7, [r6, #4]
   d6ffa:	db09      	blt.n	d7010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6ffc:	1961      	adds	r1, r4, r5
   d6ffe:	458a      	cmp	sl, r1
   d7000:	bf0c      	ite	eq
   d7002:	2106      	moveq	r1, #6
   d7004:	2101      	movne	r1, #1
   d7006:	71b1      	strb	r1, [r6, #6]
   d7008:	2000      	movs	r0, #0
   d700a:	b001      	add	sp, #4
   d700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7010:	3502      	adds	r5, #2
   d7012:	d1f9      	bne.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7014:	2301      	movs	r3, #1
   d7016:	71b3      	strb	r3, [r6, #6]
   d7018:	e7f6      	b.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d701a:	4554      	cmp	r4, sl
   d701c:	d106      	bne.n	d702c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d701e:	4659      	mov	r1, fp
   d7020:	4648      	mov	r0, r9
   d7022:	f000 f82b 	bl	d707c <_ZNKSt9type_infoeqERKS_>
   d7026:	b108      	cbz	r0, d702c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7028:	7177      	strb	r7, [r6, #5]
   d702a:	e7ed      	b.n	d7008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d702c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7030:	6803      	ldr	r3, [r0, #0]
   d7032:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7036:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d703a:	69dc      	ldr	r4, [r3, #28]
   d703c:	463a      	mov	r2, r7
   d703e:	4643      	mov	r3, r8
   d7040:	4629      	mov	r1, r5
   d7042:	46a4      	mov	ip, r4
   d7044:	b001      	add	sp, #4
   d7046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d704a:	4760      	bx	ip

000d704c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7050:	4607      	mov	r7, r0
   d7052:	460c      	mov	r4, r1
   d7054:	4615      	mov	r5, r2
   d7056:	461e      	mov	r6, r3
   d7058:	f7ff ff6d 	bl	d6f36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d705c:	b948      	cbnz	r0, d7072 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d705e:	68b8      	ldr	r0, [r7, #8]
   d7060:	6803      	ldr	r3, [r0, #0]
   d7062:	699f      	ldr	r7, [r3, #24]
   d7064:	462a      	mov	r2, r5
   d7066:	4633      	mov	r3, r6
   d7068:	4621      	mov	r1, r4
   d706a:	46bc      	mov	ip, r7
   d706c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7070:	4760      	bx	ip
   d7072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7076 <_ZNSt9type_infoD1Ev>:
   d7076:	4770      	bx	lr

000d7078 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7078:	2000      	movs	r0, #0
   d707a:	4770      	bx	lr

000d707c <_ZNKSt9type_infoeqERKS_>:
   d707c:	4281      	cmp	r1, r0
   d707e:	b508      	push	{r3, lr}
   d7080:	d00e      	beq.n	d70a0 <_ZNKSt9type_infoeqERKS_+0x24>
   d7082:	6840      	ldr	r0, [r0, #4]
   d7084:	7803      	ldrb	r3, [r0, #0]
   d7086:	2b2a      	cmp	r3, #42	; 0x2a
   d7088:	d00c      	beq.n	d70a4 <_ZNKSt9type_infoeqERKS_+0x28>
   d708a:	6849      	ldr	r1, [r1, #4]
   d708c:	780b      	ldrb	r3, [r1, #0]
   d708e:	2b2a      	cmp	r3, #42	; 0x2a
   d7090:	bf08      	it	eq
   d7092:	3101      	addeq	r1, #1
   d7094:	f000 fc72 	bl	d797c <strcmp>
   d7098:	fab0 f080 	clz	r0, r0
   d709c:	0940      	lsrs	r0, r0, #5
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	2001      	movs	r0, #1
   d70a2:	e7fc      	b.n	d709e <_ZNKSt9type_infoeqERKS_+0x22>
   d70a4:	2000      	movs	r0, #0
   d70a6:	e7fa      	b.n	d709e <_ZNKSt9type_infoeqERKS_+0x22>

000d70a8 <__aeabi_drsub>:
   d70a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70ac:	e002      	b.n	d70b4 <__adddf3>
   d70ae:	bf00      	nop

000d70b0 <__aeabi_dsub>:
   d70b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70b4 <__adddf3>:
   d70b4:	b530      	push	{r4, r5, lr}
   d70b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70be:	ea94 0f05 	teq	r4, r5
   d70c2:	bf08      	it	eq
   d70c4:	ea90 0f02 	teqeq	r0, r2
   d70c8:	bf1f      	itttt	ne
   d70ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70da:	f000 80e2 	beq.w	d72a2 <__adddf3+0x1ee>
   d70de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70e6:	bfb8      	it	lt
   d70e8:	426d      	neglt	r5, r5
   d70ea:	dd0c      	ble.n	d7106 <__adddf3+0x52>
   d70ec:	442c      	add	r4, r5
   d70ee:	ea80 0202 	eor.w	r2, r0, r2
   d70f2:	ea81 0303 	eor.w	r3, r1, r3
   d70f6:	ea82 0000 	eor.w	r0, r2, r0
   d70fa:	ea83 0101 	eor.w	r1, r3, r1
   d70fe:	ea80 0202 	eor.w	r2, r0, r2
   d7102:	ea81 0303 	eor.w	r3, r1, r3
   d7106:	2d36      	cmp	r5, #54	; 0x36
   d7108:	bf88      	it	hi
   d710a:	bd30      	pophi	{r4, r5, pc}
   d710c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7110:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7114:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7118:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d711c:	d002      	beq.n	d7124 <__adddf3+0x70>
   d711e:	4240      	negs	r0, r0
   d7120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7124:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7128:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d712c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7130:	d002      	beq.n	d7138 <__adddf3+0x84>
   d7132:	4252      	negs	r2, r2
   d7134:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7138:	ea94 0f05 	teq	r4, r5
   d713c:	f000 80a7 	beq.w	d728e <__adddf3+0x1da>
   d7140:	f1a4 0401 	sub.w	r4, r4, #1
   d7144:	f1d5 0e20 	rsbs	lr, r5, #32
   d7148:	db0d      	blt.n	d7166 <__adddf3+0xb2>
   d714a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d714e:	fa22 f205 	lsr.w	r2, r2, r5
   d7152:	1880      	adds	r0, r0, r2
   d7154:	f141 0100 	adc.w	r1, r1, #0
   d7158:	fa03 f20e 	lsl.w	r2, r3, lr
   d715c:	1880      	adds	r0, r0, r2
   d715e:	fa43 f305 	asr.w	r3, r3, r5
   d7162:	4159      	adcs	r1, r3
   d7164:	e00e      	b.n	d7184 <__adddf3+0xd0>
   d7166:	f1a5 0520 	sub.w	r5, r5, #32
   d716a:	f10e 0e20 	add.w	lr, lr, #32
   d716e:	2a01      	cmp	r2, #1
   d7170:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7174:	bf28      	it	cs
   d7176:	f04c 0c02 	orrcs.w	ip, ip, #2
   d717a:	fa43 f305 	asr.w	r3, r3, r5
   d717e:	18c0      	adds	r0, r0, r3
   d7180:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7188:	d507      	bpl.n	d719a <__adddf3+0xe6>
   d718a:	f04f 0e00 	mov.w	lr, #0
   d718e:	f1dc 0c00 	rsbs	ip, ip, #0
   d7192:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7196:	eb6e 0101 	sbc.w	r1, lr, r1
   d719a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d719e:	d31b      	bcc.n	d71d8 <__adddf3+0x124>
   d71a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71a4:	d30c      	bcc.n	d71c0 <__adddf3+0x10c>
   d71a6:	0849      	lsrs	r1, r1, #1
   d71a8:	ea5f 0030 	movs.w	r0, r0, rrx
   d71ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71b0:	f104 0401 	add.w	r4, r4, #1
   d71b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71bc:	f080 809a 	bcs.w	d72f4 <__adddf3+0x240>
   d71c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71c4:	bf08      	it	eq
   d71c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d71ca:	f150 0000 	adcs.w	r0, r0, #0
   d71ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71d2:	ea41 0105 	orr.w	r1, r1, r5
   d71d6:	bd30      	pop	{r4, r5, pc}
   d71d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71dc:	4140      	adcs	r0, r0
   d71de:	eb41 0101 	adc.w	r1, r1, r1
   d71e2:	3c01      	subs	r4, #1
   d71e4:	bf28      	it	cs
   d71e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d71ea:	d2e9      	bcs.n	d71c0 <__adddf3+0x10c>
   d71ec:	f091 0f00 	teq	r1, #0
   d71f0:	bf04      	itt	eq
   d71f2:	4601      	moveq	r1, r0
   d71f4:	2000      	moveq	r0, #0
   d71f6:	fab1 f381 	clz	r3, r1
   d71fa:	bf08      	it	eq
   d71fc:	3320      	addeq	r3, #32
   d71fe:	f1a3 030b 	sub.w	r3, r3, #11
   d7202:	f1b3 0220 	subs.w	r2, r3, #32
   d7206:	da0c      	bge.n	d7222 <__adddf3+0x16e>
   d7208:	320c      	adds	r2, #12
   d720a:	dd08      	ble.n	d721e <__adddf3+0x16a>
   d720c:	f102 0c14 	add.w	ip, r2, #20
   d7210:	f1c2 020c 	rsb	r2, r2, #12
   d7214:	fa01 f00c 	lsl.w	r0, r1, ip
   d7218:	fa21 f102 	lsr.w	r1, r1, r2
   d721c:	e00c      	b.n	d7238 <__adddf3+0x184>
   d721e:	f102 0214 	add.w	r2, r2, #20
   d7222:	bfd8      	it	le
   d7224:	f1c2 0c20 	rsble	ip, r2, #32
   d7228:	fa01 f102 	lsl.w	r1, r1, r2
   d722c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7230:	bfdc      	itt	le
   d7232:	ea41 010c 	orrle.w	r1, r1, ip
   d7236:	4090      	lslle	r0, r2
   d7238:	1ae4      	subs	r4, r4, r3
   d723a:	bfa2      	ittt	ge
   d723c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7240:	4329      	orrge	r1, r5
   d7242:	bd30      	popge	{r4, r5, pc}
   d7244:	ea6f 0404 	mvn.w	r4, r4
   d7248:	3c1f      	subs	r4, #31
   d724a:	da1c      	bge.n	d7286 <__adddf3+0x1d2>
   d724c:	340c      	adds	r4, #12
   d724e:	dc0e      	bgt.n	d726e <__adddf3+0x1ba>
   d7250:	f104 0414 	add.w	r4, r4, #20
   d7254:	f1c4 0220 	rsb	r2, r4, #32
   d7258:	fa20 f004 	lsr.w	r0, r0, r4
   d725c:	fa01 f302 	lsl.w	r3, r1, r2
   d7260:	ea40 0003 	orr.w	r0, r0, r3
   d7264:	fa21 f304 	lsr.w	r3, r1, r4
   d7268:	ea45 0103 	orr.w	r1, r5, r3
   d726c:	bd30      	pop	{r4, r5, pc}
   d726e:	f1c4 040c 	rsb	r4, r4, #12
   d7272:	f1c4 0220 	rsb	r2, r4, #32
   d7276:	fa20 f002 	lsr.w	r0, r0, r2
   d727a:	fa01 f304 	lsl.w	r3, r1, r4
   d727e:	ea40 0003 	orr.w	r0, r0, r3
   d7282:	4629      	mov	r1, r5
   d7284:	bd30      	pop	{r4, r5, pc}
   d7286:	fa21 f004 	lsr.w	r0, r1, r4
   d728a:	4629      	mov	r1, r5
   d728c:	bd30      	pop	{r4, r5, pc}
   d728e:	f094 0f00 	teq	r4, #0
   d7292:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7296:	bf06      	itte	eq
   d7298:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d729c:	3401      	addeq	r4, #1
   d729e:	3d01      	subne	r5, #1
   d72a0:	e74e      	b.n	d7140 <__adddf3+0x8c>
   d72a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72a6:	bf18      	it	ne
   d72a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72ac:	d029      	beq.n	d7302 <__adddf3+0x24e>
   d72ae:	ea94 0f05 	teq	r4, r5
   d72b2:	bf08      	it	eq
   d72b4:	ea90 0f02 	teqeq	r0, r2
   d72b8:	d005      	beq.n	d72c6 <__adddf3+0x212>
   d72ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d72be:	bf04      	itt	eq
   d72c0:	4619      	moveq	r1, r3
   d72c2:	4610      	moveq	r0, r2
   d72c4:	bd30      	pop	{r4, r5, pc}
   d72c6:	ea91 0f03 	teq	r1, r3
   d72ca:	bf1e      	ittt	ne
   d72cc:	2100      	movne	r1, #0
   d72ce:	2000      	movne	r0, #0
   d72d0:	bd30      	popne	{r4, r5, pc}
   d72d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72d6:	d105      	bne.n	d72e4 <__adddf3+0x230>
   d72d8:	0040      	lsls	r0, r0, #1
   d72da:	4149      	adcs	r1, r1
   d72dc:	bf28      	it	cs
   d72de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72e2:	bd30      	pop	{r4, r5, pc}
   d72e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72e8:	bf3c      	itt	cc
   d72ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72ee:	bd30      	popcc	{r4, r5, pc}
   d72f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d72f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d72fc:	f04f 0000 	mov.w	r0, #0
   d7300:	bd30      	pop	{r4, r5, pc}
   d7302:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7306:	bf1a      	itte	ne
   d7308:	4619      	movne	r1, r3
   d730a:	4610      	movne	r0, r2
   d730c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7310:	bf1c      	itt	ne
   d7312:	460b      	movne	r3, r1
   d7314:	4602      	movne	r2, r0
   d7316:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d731a:	bf06      	itte	eq
   d731c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7320:	ea91 0f03 	teqeq	r1, r3
   d7324:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7328:	bd30      	pop	{r4, r5, pc}
   d732a:	bf00      	nop

000d732c <__aeabi_ui2d>:
   d732c:	f090 0f00 	teq	r0, #0
   d7330:	bf04      	itt	eq
   d7332:	2100      	moveq	r1, #0
   d7334:	4770      	bxeq	lr
   d7336:	b530      	push	{r4, r5, lr}
   d7338:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d733c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7340:	f04f 0500 	mov.w	r5, #0
   d7344:	f04f 0100 	mov.w	r1, #0
   d7348:	e750      	b.n	d71ec <__adddf3+0x138>
   d734a:	bf00      	nop

000d734c <__aeabi_i2d>:
   d734c:	f090 0f00 	teq	r0, #0
   d7350:	bf04      	itt	eq
   d7352:	2100      	moveq	r1, #0
   d7354:	4770      	bxeq	lr
   d7356:	b530      	push	{r4, r5, lr}
   d7358:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d735c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7360:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7364:	bf48      	it	mi
   d7366:	4240      	negmi	r0, r0
   d7368:	f04f 0100 	mov.w	r1, #0
   d736c:	e73e      	b.n	d71ec <__adddf3+0x138>
   d736e:	bf00      	nop

000d7370 <__aeabi_f2d>:
   d7370:	0042      	lsls	r2, r0, #1
   d7372:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7376:	ea4f 0131 	mov.w	r1, r1, rrx
   d737a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d737e:	bf1f      	itttt	ne
   d7380:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7384:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7388:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d738c:	4770      	bxne	lr
   d738e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7392:	bf08      	it	eq
   d7394:	4770      	bxeq	lr
   d7396:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d739a:	bf04      	itt	eq
   d739c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d73a0:	4770      	bxeq	lr
   d73a2:	b530      	push	{r4, r5, lr}
   d73a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73b0:	e71c      	b.n	d71ec <__adddf3+0x138>
   d73b2:	bf00      	nop

000d73b4 <__aeabi_ul2d>:
   d73b4:	ea50 0201 	orrs.w	r2, r0, r1
   d73b8:	bf08      	it	eq
   d73ba:	4770      	bxeq	lr
   d73bc:	b530      	push	{r4, r5, lr}
   d73be:	f04f 0500 	mov.w	r5, #0
   d73c2:	e00a      	b.n	d73da <__aeabi_l2d+0x16>

000d73c4 <__aeabi_l2d>:
   d73c4:	ea50 0201 	orrs.w	r2, r0, r1
   d73c8:	bf08      	it	eq
   d73ca:	4770      	bxeq	lr
   d73cc:	b530      	push	{r4, r5, lr}
   d73ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73d2:	d502      	bpl.n	d73da <__aeabi_l2d+0x16>
   d73d4:	4240      	negs	r0, r0
   d73d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73e6:	f43f aed8 	beq.w	d719a <__adddf3+0xe6>
   d73ea:	f04f 0203 	mov.w	r2, #3
   d73ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73f2:	bf18      	it	ne
   d73f4:	3203      	addne	r2, #3
   d73f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73fa:	bf18      	it	ne
   d73fc:	3203      	addne	r2, #3
   d73fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7402:	f1c2 0320 	rsb	r3, r2, #32
   d7406:	fa00 fc03 	lsl.w	ip, r0, r3
   d740a:	fa20 f002 	lsr.w	r0, r0, r2
   d740e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7412:	ea40 000e 	orr.w	r0, r0, lr
   d7416:	fa21 f102 	lsr.w	r1, r1, r2
   d741a:	4414      	add	r4, r2
   d741c:	e6bd      	b.n	d719a <__adddf3+0xe6>
   d741e:	bf00      	nop

000d7420 <__aeabi_dmul>:
   d7420:	b570      	push	{r4, r5, r6, lr}
   d7422:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7426:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d742a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d742e:	bf1d      	ittte	ne
   d7430:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7434:	ea94 0f0c 	teqne	r4, ip
   d7438:	ea95 0f0c 	teqne	r5, ip
   d743c:	f000 f8de 	bleq	d75fc <__aeabi_dmul+0x1dc>
   d7440:	442c      	add	r4, r5
   d7442:	ea81 0603 	eor.w	r6, r1, r3
   d7446:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d744a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d744e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7452:	bf18      	it	ne
   d7454:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7458:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d745c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7460:	d038      	beq.n	d74d4 <__aeabi_dmul+0xb4>
   d7462:	fba0 ce02 	umull	ip, lr, r0, r2
   d7466:	f04f 0500 	mov.w	r5, #0
   d746a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d746e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7472:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7476:	f04f 0600 	mov.w	r6, #0
   d747a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d747e:	f09c 0f00 	teq	ip, #0
   d7482:	bf18      	it	ne
   d7484:	f04e 0e01 	orrne.w	lr, lr, #1
   d7488:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d748c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7490:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7494:	d204      	bcs.n	d74a0 <__aeabi_dmul+0x80>
   d7496:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d749a:	416d      	adcs	r5, r5
   d749c:	eb46 0606 	adc.w	r6, r6, r6
   d74a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d74a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d74a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d74ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d74b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d74b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74b8:	bf88      	it	hi
   d74ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74be:	d81e      	bhi.n	d74fe <__aeabi_dmul+0xde>
   d74c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d74c4:	bf08      	it	eq
   d74c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d74ca:	f150 0000 	adcs.w	r0, r0, #0
   d74ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74d2:	bd70      	pop	{r4, r5, r6, pc}
   d74d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d74d8:	ea46 0101 	orr.w	r1, r6, r1
   d74dc:	ea40 0002 	orr.w	r0, r0, r2
   d74e0:	ea81 0103 	eor.w	r1, r1, r3
   d74e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d74e8:	bfc2      	ittt	gt
   d74ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d74ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d74f2:	bd70      	popgt	{r4, r5, r6, pc}
   d74f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d74f8:	f04f 0e00 	mov.w	lr, #0
   d74fc:	3c01      	subs	r4, #1
   d74fe:	f300 80ab 	bgt.w	d7658 <__aeabi_dmul+0x238>
   d7502:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7506:	bfde      	ittt	le
   d7508:	2000      	movle	r0, #0
   d750a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d750e:	bd70      	pople	{r4, r5, r6, pc}
   d7510:	f1c4 0400 	rsb	r4, r4, #0
   d7514:	3c20      	subs	r4, #32
   d7516:	da35      	bge.n	d7584 <__aeabi_dmul+0x164>
   d7518:	340c      	adds	r4, #12
   d751a:	dc1b      	bgt.n	d7554 <__aeabi_dmul+0x134>
   d751c:	f104 0414 	add.w	r4, r4, #20
   d7520:	f1c4 0520 	rsb	r5, r4, #32
   d7524:	fa00 f305 	lsl.w	r3, r0, r5
   d7528:	fa20 f004 	lsr.w	r0, r0, r4
   d752c:	fa01 f205 	lsl.w	r2, r1, r5
   d7530:	ea40 0002 	orr.w	r0, r0, r2
   d7534:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d753c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7540:	fa21 f604 	lsr.w	r6, r1, r4
   d7544:	eb42 0106 	adc.w	r1, r2, r6
   d7548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d754c:	bf08      	it	eq
   d754e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7552:	bd70      	pop	{r4, r5, r6, pc}
   d7554:	f1c4 040c 	rsb	r4, r4, #12
   d7558:	f1c4 0520 	rsb	r5, r4, #32
   d755c:	fa00 f304 	lsl.w	r3, r0, r4
   d7560:	fa20 f005 	lsr.w	r0, r0, r5
   d7564:	fa01 f204 	lsl.w	r2, r1, r4
   d7568:	ea40 0002 	orr.w	r0, r0, r2
   d756c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7574:	f141 0100 	adc.w	r1, r1, #0
   d7578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d757c:	bf08      	it	eq
   d757e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7582:	bd70      	pop	{r4, r5, r6, pc}
   d7584:	f1c4 0520 	rsb	r5, r4, #32
   d7588:	fa00 f205 	lsl.w	r2, r0, r5
   d758c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7590:	fa20 f304 	lsr.w	r3, r0, r4
   d7594:	fa01 f205 	lsl.w	r2, r1, r5
   d7598:	ea43 0302 	orr.w	r3, r3, r2
   d759c:	fa21 f004 	lsr.w	r0, r1, r4
   d75a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75a4:	fa21 f204 	lsr.w	r2, r1, r4
   d75a8:	ea20 0002 	bic.w	r0, r0, r2
   d75ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d75b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75b4:	bf08      	it	eq
   d75b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75ba:	bd70      	pop	{r4, r5, r6, pc}
   d75bc:	f094 0f00 	teq	r4, #0
   d75c0:	d10f      	bne.n	d75e2 <__aeabi_dmul+0x1c2>
   d75c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d75c6:	0040      	lsls	r0, r0, #1
   d75c8:	eb41 0101 	adc.w	r1, r1, r1
   d75cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d75d0:	bf08      	it	eq
   d75d2:	3c01      	subeq	r4, #1
   d75d4:	d0f7      	beq.n	d75c6 <__aeabi_dmul+0x1a6>
   d75d6:	ea41 0106 	orr.w	r1, r1, r6
   d75da:	f095 0f00 	teq	r5, #0
   d75de:	bf18      	it	ne
   d75e0:	4770      	bxne	lr
   d75e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d75e6:	0052      	lsls	r2, r2, #1
   d75e8:	eb43 0303 	adc.w	r3, r3, r3
   d75ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d75f0:	bf08      	it	eq
   d75f2:	3d01      	subeq	r5, #1
   d75f4:	d0f7      	beq.n	d75e6 <__aeabi_dmul+0x1c6>
   d75f6:	ea43 0306 	orr.w	r3, r3, r6
   d75fa:	4770      	bx	lr
   d75fc:	ea94 0f0c 	teq	r4, ip
   d7600:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7604:	bf18      	it	ne
   d7606:	ea95 0f0c 	teqne	r5, ip
   d760a:	d00c      	beq.n	d7626 <__aeabi_dmul+0x206>
   d760c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7610:	bf18      	it	ne
   d7612:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7616:	d1d1      	bne.n	d75bc <__aeabi_dmul+0x19c>
   d7618:	ea81 0103 	eor.w	r1, r1, r3
   d761c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7620:	f04f 0000 	mov.w	r0, #0
   d7624:	bd70      	pop	{r4, r5, r6, pc}
   d7626:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d762a:	bf06      	itte	eq
   d762c:	4610      	moveq	r0, r2
   d762e:	4619      	moveq	r1, r3
   d7630:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7634:	d019      	beq.n	d766a <__aeabi_dmul+0x24a>
   d7636:	ea94 0f0c 	teq	r4, ip
   d763a:	d102      	bne.n	d7642 <__aeabi_dmul+0x222>
   d763c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7640:	d113      	bne.n	d766a <__aeabi_dmul+0x24a>
   d7642:	ea95 0f0c 	teq	r5, ip
   d7646:	d105      	bne.n	d7654 <__aeabi_dmul+0x234>
   d7648:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d764c:	bf1c      	itt	ne
   d764e:	4610      	movne	r0, r2
   d7650:	4619      	movne	r1, r3
   d7652:	d10a      	bne.n	d766a <__aeabi_dmul+0x24a>
   d7654:	ea81 0103 	eor.w	r1, r1, r3
   d7658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d765c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7664:	f04f 0000 	mov.w	r0, #0
   d7668:	bd70      	pop	{r4, r5, r6, pc}
   d766a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d766e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7672:	bd70      	pop	{r4, r5, r6, pc}

000d7674 <__aeabi_ddiv>:
   d7674:	b570      	push	{r4, r5, r6, lr}
   d7676:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d767a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d767e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7682:	bf1d      	ittte	ne
   d7684:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7688:	ea94 0f0c 	teqne	r4, ip
   d768c:	ea95 0f0c 	teqne	r5, ip
   d7690:	f000 f8a7 	bleq	d77e2 <__aeabi_ddiv+0x16e>
   d7694:	eba4 0405 	sub.w	r4, r4, r5
   d7698:	ea81 0e03 	eor.w	lr, r1, r3
   d769c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d76a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d76a4:	f000 8088 	beq.w	d77b8 <__aeabi_ddiv+0x144>
   d76a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d76b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d76b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d76b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d76bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d76c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d76c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d76c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76cc:	429d      	cmp	r5, r3
   d76ce:	bf08      	it	eq
   d76d0:	4296      	cmpeq	r6, r2
   d76d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d76d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d76da:	d202      	bcs.n	d76e2 <__aeabi_ddiv+0x6e>
   d76dc:	085b      	lsrs	r3, r3, #1
   d76de:	ea4f 0232 	mov.w	r2, r2, rrx
   d76e2:	1ab6      	subs	r6, r6, r2
   d76e4:	eb65 0503 	sbc.w	r5, r5, r3
   d76e8:	085b      	lsrs	r3, r3, #1
   d76ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d76ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d76f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d76f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d76fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76fe:	bf22      	ittt	cs
   d7700:	1ab6      	subcs	r6, r6, r2
   d7702:	4675      	movcs	r5, lr
   d7704:	ea40 000c 	orrcs.w	r0, r0, ip
   d7708:	085b      	lsrs	r3, r3, #1
   d770a:	ea4f 0232 	mov.w	r2, r2, rrx
   d770e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7712:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7716:	bf22      	ittt	cs
   d7718:	1ab6      	subcs	r6, r6, r2
   d771a:	4675      	movcs	r5, lr
   d771c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7720:	085b      	lsrs	r3, r3, #1
   d7722:	ea4f 0232 	mov.w	r2, r2, rrx
   d7726:	ebb6 0e02 	subs.w	lr, r6, r2
   d772a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d772e:	bf22      	ittt	cs
   d7730:	1ab6      	subcs	r6, r6, r2
   d7732:	4675      	movcs	r5, lr
   d7734:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7738:	085b      	lsrs	r3, r3, #1
   d773a:	ea4f 0232 	mov.w	r2, r2, rrx
   d773e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7742:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7746:	bf22      	ittt	cs
   d7748:	1ab6      	subcs	r6, r6, r2
   d774a:	4675      	movcs	r5, lr
   d774c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7750:	ea55 0e06 	orrs.w	lr, r5, r6
   d7754:	d018      	beq.n	d7788 <__aeabi_ddiv+0x114>
   d7756:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d775a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d775e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7762:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7766:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d776a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d776e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7772:	d1c0      	bne.n	d76f6 <__aeabi_ddiv+0x82>
   d7774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7778:	d10b      	bne.n	d7792 <__aeabi_ddiv+0x11e>
   d777a:	ea41 0100 	orr.w	r1, r1, r0
   d777e:	f04f 0000 	mov.w	r0, #0
   d7782:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7786:	e7b6      	b.n	d76f6 <__aeabi_ddiv+0x82>
   d7788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d778c:	bf04      	itt	eq
   d778e:	4301      	orreq	r1, r0
   d7790:	2000      	moveq	r0, #0
   d7792:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7796:	bf88      	it	hi
   d7798:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d779c:	f63f aeaf 	bhi.w	d74fe <__aeabi_dmul+0xde>
   d77a0:	ebb5 0c03 	subs.w	ip, r5, r3
   d77a4:	bf04      	itt	eq
   d77a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d77aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d77ae:	f150 0000 	adcs.w	r0, r0, #0
   d77b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77b6:	bd70      	pop	{r4, r5, r6, pc}
   d77b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d77bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d77c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d77c4:	bfc2      	ittt	gt
   d77c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77ce:	bd70      	popgt	{r4, r5, r6, pc}
   d77d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77d4:	f04f 0e00 	mov.w	lr, #0
   d77d8:	3c01      	subs	r4, #1
   d77da:	e690      	b.n	d74fe <__aeabi_dmul+0xde>
   d77dc:	ea45 0e06 	orr.w	lr, r5, r6
   d77e0:	e68d      	b.n	d74fe <__aeabi_dmul+0xde>
   d77e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d77e6:	ea94 0f0c 	teq	r4, ip
   d77ea:	bf08      	it	eq
   d77ec:	ea95 0f0c 	teqeq	r5, ip
   d77f0:	f43f af3b 	beq.w	d766a <__aeabi_dmul+0x24a>
   d77f4:	ea94 0f0c 	teq	r4, ip
   d77f8:	d10a      	bne.n	d7810 <__aeabi_ddiv+0x19c>
   d77fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77fe:	f47f af34 	bne.w	d766a <__aeabi_dmul+0x24a>
   d7802:	ea95 0f0c 	teq	r5, ip
   d7806:	f47f af25 	bne.w	d7654 <__aeabi_dmul+0x234>
   d780a:	4610      	mov	r0, r2
   d780c:	4619      	mov	r1, r3
   d780e:	e72c      	b.n	d766a <__aeabi_dmul+0x24a>
   d7810:	ea95 0f0c 	teq	r5, ip
   d7814:	d106      	bne.n	d7824 <__aeabi_ddiv+0x1b0>
   d7816:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d781a:	f43f aefd 	beq.w	d7618 <__aeabi_dmul+0x1f8>
   d781e:	4610      	mov	r0, r2
   d7820:	4619      	mov	r1, r3
   d7822:	e722      	b.n	d766a <__aeabi_dmul+0x24a>
   d7824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7828:	bf18      	it	ne
   d782a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d782e:	f47f aec5 	bne.w	d75bc <__aeabi_dmul+0x19c>
   d7832:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7836:	f47f af0d 	bne.w	d7654 <__aeabi_dmul+0x234>
   d783a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d783e:	f47f aeeb 	bne.w	d7618 <__aeabi_dmul+0x1f8>
   d7842:	e712      	b.n	d766a <__aeabi_dmul+0x24a>

000d7844 <__aeabi_d2uiz>:
   d7844:	004a      	lsls	r2, r1, #1
   d7846:	d211      	bcs.n	d786c <__aeabi_d2uiz+0x28>
   d7848:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d784c:	d211      	bcs.n	d7872 <__aeabi_d2uiz+0x2e>
   d784e:	d50d      	bpl.n	d786c <__aeabi_d2uiz+0x28>
   d7850:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7854:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7858:	d40e      	bmi.n	d7878 <__aeabi_d2uiz+0x34>
   d785a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d785e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7862:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7866:	fa23 f002 	lsr.w	r0, r3, r2
   d786a:	4770      	bx	lr
   d786c:	f04f 0000 	mov.w	r0, #0
   d7870:	4770      	bx	lr
   d7872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7876:	d102      	bne.n	d787e <__aeabi_d2uiz+0x3a>
   d7878:	f04f 30ff 	mov.w	r0, #4294967295
   d787c:	4770      	bx	lr
   d787e:	f04f 0000 	mov.w	r0, #0
   d7882:	4770      	bx	lr

000d7884 <__aeabi_f2lz>:
   d7884:	ee07 0a90 	vmov	s15, r0
   d7888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7890:	d401      	bmi.n	d7896 <__aeabi_f2lz+0x12>
   d7892:	f000 b80b 	b.w	d78ac <__aeabi_f2ulz>
   d7896:	eef1 7a67 	vneg.f32	s15, s15
   d789a:	b508      	push	{r3, lr}
   d789c:	ee17 0a90 	vmov	r0, s15
   d78a0:	f000 f804 	bl	d78ac <__aeabi_f2ulz>
   d78a4:	4240      	negs	r0, r0
   d78a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d78aa:	bd08      	pop	{r3, pc}

000d78ac <__aeabi_f2ulz>:
   d78ac:	b5d0      	push	{r4, r6, r7, lr}
   d78ae:	f7ff fd5f 	bl	d7370 <__aeabi_f2d>
   d78b2:	4b0c      	ldr	r3, [pc, #48]	; (d78e4 <__aeabi_f2ulz+0x38>)
   d78b4:	2200      	movs	r2, #0
   d78b6:	4606      	mov	r6, r0
   d78b8:	460f      	mov	r7, r1
   d78ba:	f7ff fdb1 	bl	d7420 <__aeabi_dmul>
   d78be:	f7ff ffc1 	bl	d7844 <__aeabi_d2uiz>
   d78c2:	4604      	mov	r4, r0
   d78c4:	f7ff fd32 	bl	d732c <__aeabi_ui2d>
   d78c8:	4b07      	ldr	r3, [pc, #28]	; (d78e8 <__aeabi_f2ulz+0x3c>)
   d78ca:	2200      	movs	r2, #0
   d78cc:	f7ff fda8 	bl	d7420 <__aeabi_dmul>
   d78d0:	4602      	mov	r2, r0
   d78d2:	460b      	mov	r3, r1
   d78d4:	4630      	mov	r0, r6
   d78d6:	4639      	mov	r1, r7
   d78d8:	f7ff fbea 	bl	d70b0 <__aeabi_dsub>
   d78dc:	f7ff ffb2 	bl	d7844 <__aeabi_d2uiz>
   d78e0:	4621      	mov	r1, r4
   d78e2:	bdd0      	pop	{r4, r6, r7, pc}
   d78e4:	3df00000 	.word	0x3df00000
   d78e8:	41f00000 	.word	0x41f00000

000d78ec <__cxa_atexit>:
   d78ec:	b510      	push	{r4, lr}
   d78ee:	4c05      	ldr	r4, [pc, #20]	; (d7904 <__cxa_atexit+0x18>)
   d78f0:	4613      	mov	r3, r2
   d78f2:	b12c      	cbz	r4, d7900 <__cxa_atexit+0x14>
   d78f4:	460a      	mov	r2, r1
   d78f6:	4601      	mov	r1, r0
   d78f8:	2002      	movs	r0, #2
   d78fa:	f3af 8000 	nop.w
   d78fe:	bd10      	pop	{r4, pc}
   d7900:	4620      	mov	r0, r4
   d7902:	e7fc      	b.n	d78fe <__cxa_atexit+0x12>
   d7904:	00000000 	.word	0x00000000

000d7908 <memcpy>:
   d7908:	440a      	add	r2, r1
   d790a:	4291      	cmp	r1, r2
   d790c:	f100 33ff 	add.w	r3, r0, #4294967295
   d7910:	d100      	bne.n	d7914 <memcpy+0xc>
   d7912:	4770      	bx	lr
   d7914:	b510      	push	{r4, lr}
   d7916:	f811 4b01 	ldrb.w	r4, [r1], #1
   d791a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d791e:	4291      	cmp	r1, r2
   d7920:	d1f9      	bne.n	d7916 <memcpy+0xe>
   d7922:	bd10      	pop	{r4, pc}

000d7924 <memset>:
   d7924:	4402      	add	r2, r0
   d7926:	4603      	mov	r3, r0
   d7928:	4293      	cmp	r3, r2
   d792a:	d100      	bne.n	d792e <memset+0xa>
   d792c:	4770      	bx	lr
   d792e:	f803 1b01 	strb.w	r1, [r3], #1
   d7932:	e7f9      	b.n	d7928 <memset+0x4>

000d7934 <srand>:
   d7934:	b538      	push	{r3, r4, r5, lr}
   d7936:	4b0d      	ldr	r3, [pc, #52]	; (d796c <srand+0x38>)
   d7938:	681d      	ldr	r5, [r3, #0]
   d793a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d793c:	4604      	mov	r4, r0
   d793e:	b97b      	cbnz	r3, d7960 <srand+0x2c>
   d7940:	2018      	movs	r0, #24
   d7942:	f7fe f89b 	bl	d5a7c <malloc>
   d7946:	4a0a      	ldr	r2, [pc, #40]	; (d7970 <srand+0x3c>)
   d7948:	4b0a      	ldr	r3, [pc, #40]	; (d7974 <srand+0x40>)
   d794a:	63a8      	str	r0, [r5, #56]	; 0x38
   d794c:	e9c0 2300 	strd	r2, r3, [r0]
   d7950:	4b09      	ldr	r3, [pc, #36]	; (d7978 <srand+0x44>)
   d7952:	6083      	str	r3, [r0, #8]
   d7954:	230b      	movs	r3, #11
   d7956:	8183      	strh	r3, [r0, #12]
   d7958:	2201      	movs	r2, #1
   d795a:	2300      	movs	r3, #0
   d795c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7960:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7962:	2200      	movs	r2, #0
   d7964:	611c      	str	r4, [r3, #16]
   d7966:	615a      	str	r2, [r3, #20]
   d7968:	bd38      	pop	{r3, r4, r5, pc}
   d796a:	bf00      	nop
   d796c:	2003e430 	.word	0x2003e430
   d7970:	abcd330e 	.word	0xabcd330e
   d7974:	e66d1234 	.word	0xe66d1234
   d7978:	0005deec 	.word	0x0005deec

000d797c <strcmp>:
   d797c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7980:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7984:	2a01      	cmp	r2, #1
   d7986:	bf28      	it	cs
   d7988:	429a      	cmpcs	r2, r3
   d798a:	d0f7      	beq.n	d797c <strcmp>
   d798c:	1ad0      	subs	r0, r2, r3
   d798e:	4770      	bx	lr

000d7990 <strcpy>:
   d7990:	4603      	mov	r3, r0
   d7992:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7996:	f803 2b01 	strb.w	r2, [r3], #1
   d799a:	2a00      	cmp	r2, #0
   d799c:	d1f9      	bne.n	d7992 <strcpy+0x2>
   d799e:	4770      	bx	lr

000d79a0 <strlen>:
   d79a0:	4603      	mov	r3, r0
   d79a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d79a6:	2a00      	cmp	r2, #0
   d79a8:	d1fb      	bne.n	d79a2 <strlen+0x2>
   d79aa:	1a18      	subs	r0, r3, r0
   d79ac:	3801      	subs	r0, #1
   d79ae:	4770      	bx	lr

000d79b0 <dynalib_user>:
   d79b0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d79c0:	0000 0000 6f46 6e75 2064 6461 7264 7365     ....Found addres
   d79d0:	3a73 2520 3330 2069 3028 2578 3230 2958     s: %03i (0x%02X)
   d79e0:	0a20 4400 6e6f 3a65 4620 756f 646e 2520      ..Done: Found %
   d79f0:	2069 6564 6976 6563 7328 2e29 0a20 4300     i device(s). ..C
   d7a00:	4259 5245 4142 5353 4220 4f4f 4954 474e     YBERBASS BOOTING
   d7a10:	5520 2150 4300 6e6f 656e 7463 6e69 2067      UP!.Connecting 
   d7a20:	6f74 4920 746e 7265 656e 2074 000a 6f43     to Internet ..Co
   d7a30:	6e6e 6365 6974 676e 7420 206f 6e49 6f66     nnecting to Info
   d7a40:	656e 0a74 2e00 4d00 7369 6574 4672 656c     net....MisterFle
   d7a50:	0078 6f69 612e 6164 7266 6975 2e74 6f63     x.io.adafruit.co
   d7a60:	006d 6961 5f6f 5a65 4c45 3436 724c 536c     m.aio_eZEL64LrlS
   d7a70:	5043 3375 6a67 7867 4b61 4875 5a72 7364     CPu3gjgxaKuHrZds
   d7a80:	4134 4d00 7369 6574 4672 656c 2f78 6566     4A.MisterFlex/fe
   d7a90:	6465 2f73 7548 696d 6964 7974 4d00 7369     eds/Humidity.Mis
   d7aa0:	6574 4672 656c 2f78 6566 6465 2f73 7250     terFlex/feeds/Pr
   d7ab0:	7365 7573 6572 4d00 7369 6574 4672 656c     essure.MisterFle
   d7ac0:	2f78 6566 6465 2f73 6554 706d 7265 7461     x/feeds/Temperat
   d7ad0:	7275 0065 694d 7473 7265 6c46 7865 662f     ure.MisterFlex/f
   d7ae0:	6565 7364 4e2f 746f 0065 6564 6166 6c75     eeds/Note.defaul
   d7af0:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d7b00:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d7b10:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d7b20:	7525 2520 2073 4f4d 4544 7525 003e 0000     %u %s MODE%u>...

000d7b30 <_ZTVN8particle11SPISettingsE>:
	...
   d7b38:	4429 000d 4419 000d 441b 000d               )D...D...D..

000d7b44 <_ZTV16Adafruit_SSD1306>:
	...
   d7b4c:	40c5 000d 42f3 000d 537d 000d 5e45 000d     .@...B..}S..E^..
   d7b5c:	4c95 000d 5095 000d 4b25 000d 49b9 000d     .L...P..%K...I..
   d7b6c:	5151 000d 51ef 000d 5225 000d 5241 000d     QQ...Q..%R..AR..

000d7b7c <_ZL4font>:
   d7b7c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7b8c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7b9c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7bac:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7bbc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7bcc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7bdc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7bec:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7bfc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7c0c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7c1c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7c2c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7c3c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7c4c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7c5c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7c6c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7c7c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7c8c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7c9c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7cac:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7cbc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7ccc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7cdc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7cec:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7cfc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7d0c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7d1c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7d2c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7d3c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7d4c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7d5c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7d6c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7d7c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7d8c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7d9c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7dac:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7dbc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7dcc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7ddc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7dec:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7dfc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7e0c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d7e1c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7e2c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7e3c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d7e4c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7e5c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d7e6c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d7e7c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d7e8c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7e9c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7eac:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7ebc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7ecc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7edc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7eec:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d7efc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d7f0c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d7f1c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d7f2c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d7f3c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d7f4c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d7f5c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d7f6c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7f7c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d7f8c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d7f9c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7fac:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7fbc:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d7fcc:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d7fdc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d7fec:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d7ffc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d800c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d801c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d802c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d803c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d804c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d805c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d806c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8078 <_ZTV12Adafruit_GFX>:
	...
   d8088:	537d 000d 5e45 000d 40a1 000d 5095 000d     }S..E^...@...P..
   d8098:	51b9 000d 51d5 000d 5151 000d 51ef 000d     .Q...Q..QQ...Q..
   d80a8:	5225 000d 5241 000d                         %R..AR..

000d80b0 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d80b8:	40c7 000d 4301 000d 5423 000d 54cf 000d     .@...C..#T...T..
   d80c8:	5501 000d 5437 000d 5477 000d               .U..7T..wT..

000d80d4 <_ZTV13Adafruit_MQTT>:
	...
   d80e4:	40a1 000d 40a1 000d 40a1 000d 40a1 000d     .@...@...@...@..
   d80f4:	40a1 000d                                   .@..

000d80f8 <_ZTVN5spark13EthernetClassE>:
	...
   d8100:	5b2b 000d 5b21 000d 5b17 000d 5b0d 000d     +[..![...[...[..
   d8110:	5b01 000d 5af5 000d 6b89 000d 6b91 000d     .[...Z...k...k..
   d8120:	5ae9 000d 5ae1 000d 5ad7 000d 5acd 000d     .Z...Z...Z...Z..
   d8130:	6bc1 000d                                   .k..

000d8134 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8134:	0800 1810 2820 3830                         .... (08

000d813c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8144:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d8154:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8164 <_ZTV9IPAddress>:
	...
   d816c:	6141 000d 6131 000d 6133 000d               Aa..1a..3a..

000d8178 <_ZTV9USBSerial>:
	...
   d8180:	624d 000d 62b5 000d 628b 000d 5e45 000d     Mb...b...b..E^..
   d8190:	627d 000d 624f 000d 625f 000d 62af 000d     }b..Ob.._b...b..
   d81a0:	626f 000d 6249 000d                         ob..Ib..

000d81a8 <_ZTV11USARTSerial>:
	...
   d81b0:	6359 000d 63c5 000d 639d 000d 5e45 000d     Yc...c...c..E^..
   d81c0:	636d 000d 6389 000d 637b 000d 6397 000d     mc...c..{c...c..
   d81d0:	635b 000d 635f 000d                         [c.._c..

000d81d8 <_ZTV7TwoWire>:
	...
   d81e0:	6465 000d 64af 000d 6487 000d 6467 000d     ed...d...d..gd..
   d81f0:	648f 000d 6497 000d 649f 000d 64a7 000d     .d...d...d...d..
   d8200:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   d8210:	2072 203d 6425 0000                         r = %d..

000d8218 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8220:	65e3 000d 6605 000d 69d7 000d 6613 000d     .e...f...i...f..
   d8230:	65e5 000d                                   .e..

000d8234 <_ZTV9TCPClient>:
	...
   d823c:	40c9 000d 4129 000d 6561 000d 657b 000d     .@..)A..ae..{e..
   d824c:	686d 000d 66df 000d 66b1 000d 65a5 000d     mh...f...f...e..
   d825c:	6777 000d 69dd 000d 6713 000d 6921 000d     wg...i...g..!i..
   d826c:	65a7 000d 65d9 000d 658d 000d 6617 000d     .e...e...e...f..
   d827c:	6691 000d                                   .f..

000d8280 <_ZTVN5spark9WiFiClassE>:
	...
   d8288:	6b2b 000d 6b21 000d 6b17 000d 6ad9 000d     +k..!k...k...j..
   d8298:	5f6d 000d 6b0b 000d 6b89 000d 6b91 000d     m_...k...k...k..
   d82a8:	6aff 000d 6af7 000d 6aed 000d 6ae3 000d     .j...j...j...j..
   d82b8:	6bc1 000d                                   .k..

000d82bc <_ZTVN5spark12NetworkClassE>:
	...
   d82c4:	6b49 000d 6b53 000d 6b5d 000d 6b67 000d     Ik..Sk..]k..gk..
   d82d4:	6b71 000d 6b7d 000d 6b89 000d 6b91 000d     qk..}k...k...k..
   d82e4:	6b99 000d 6ba5 000d 6bad 000d 6bb7 000d     .k...k...k...k..
   d82f4:	6bc1 000d                                   .k..

000d82f8 <_ZSt7nothrow>:
	...

000d82f9 <_ZTSSt19_Sp_make_shared_tag>:
   d82f9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8309:	6572 5f64 6174 0067 0000                     red_tag....

000d8314 <_ZTISt19_Sp_make_shared_tag>:
   d8314:	8354 000d 82f9 000d                         T.......

000d831c <_ZTIN10__cxxabiv117__class_type_infoE>:
   d831c:	83b4 000d 8328 000d 83d8 000d               ....(.......

000d8328 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8328:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8338:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8348:	0045 0000                                   E...

000d834c <_ZTVN10__cxxabiv117__class_type_infoE>:
   d834c:	0000 0000 831c 000d 6ed1 000d 6ee5 000d     .........n...n..
   d835c:	7079 000d 7079 000d 6f4f 000d 6e91 000d     yp..yp..Oo...n..
   d836c:	6f37 000d 6ef9 000d 6ec5 000d               7o...n...n..

000d8378 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8378:	83b4 000d 8384 000d 831c 000d               ............

000d8384 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8384:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8394:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d83a4:	666e 456f 0000 0000                         nfoE....

000d83ac <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d83ac:	0000 0000 8378 000d 6f79 000d 6f8d 000d     ....x...yo...o..
   d83bc:	7079 000d 7079 000d 6f4f 000d 6e91 000d     yp..yp..Oo...n..
   d83cc:	704d 000d 6fd9 000d 6fa1 000d               Mp...o...o..

000d83d8 <_ZTISt9type_info>:
   d83d8:	8354 000d 83e0 000d                         T.......

000d83e0 <_ZTSSt9type_info>:
   d83e0:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d83ed <link_const_variable_data_end>:
   d83ed:	00          	.byte	0x00
	...

000d83f0 <link_constructors_location>:
   d83f0:	000d4311 	.word	0x000d4311
   d83f4:	000d49a9 	.word	0x000d49a9
   d83f8:	000d5b35 	.word	0x000d5b35
   d83fc:	000d5da1 	.word	0x000d5da1
   d8400:	000d5e1d 	.word	0x000d5e1d
   d8404:	000d5f79 	.word	0x000d5f79
   d8408:	000d5fc9 	.word	0x000d5fc9
   d840c:	000d5ff1 	.word	0x000d5ff1
   d8410:	000d6b35 	.word	0x000d6b35
   d8414:	000d6ca1 	.word	0x000d6ca1

000d8418 <link_constructors_end>:
	...
